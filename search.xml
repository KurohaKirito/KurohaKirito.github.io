<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工作中常用的一些 ADB 命令</title>
    <url>/computer/computer_adb.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌰查看指定进程包名的内存使用情况"><a href="#🌰查看指定进程包名的内存使用情况" class="headerlink" title="🌰查看指定进程包名的内存使用情况"></a>🌰查看指定进程包名的内存使用情况</h1><p><code>adb shell dumpsys meminfo [pkg/pid]</code></p>
<h1 id="🌰Unity-以-OpenGL-模式启动"><a href="#🌰Unity-以-OpenGL-模式启动" class="headerlink" title="🌰Unity 以 OpenGL 模式启动"></a>🌰Unity 以 OpenGL 模式启动</h1><p><code>-force-gles</code></p>
<h1 id="🌰删除-Git-中的空目录"><a href="#🌰删除-Git-中的空目录" class="headerlink" title="🌰删除 Git 中的空目录"></a>🌰删除 Git 中的空目录</h1><p><code>git clean -fd</code></p>
<h1 id="🌰查询第三方包体"><a href="#🌰查询第三方包体" class="headerlink" title="🌰查询第三方包体"></a>🌰查询第三方包体</h1><p><code>adb shell pm list packages -3</code></p>
<h1 id="🌰ADB-安装包体"><a href="#🌰ADB-安装包体" class="headerlink" title="🌰ADB 安装包体"></a>🌰ADB 安装包体</h1><p><code>adb install C:/a.apk</code></p>
<h1 id="🌰Unity-日志-后为筛选符-常用-I-W-E"><a href="#🌰Unity-日志-后为筛选符-常用-I-W-E" class="headerlink" title="🌰Unity 日志 ( : 后为筛选符, 常用 I, W, E )"></a>🌰Unity 日志 ( : 后为筛选符, 常用 I, W, E )</h1><p><code>adb logcat -s Unity:E</code> 或 <code>adb logcat -s Unity</code></p>
<h1 id="🌰输入文本-光标在输入框内时命令才会生效"><a href="#🌰输入文本-光标在输入框内时命令才会生效" class="headerlink" title="🌰输入文本 ( 光标在输入框内时命令才会生效 )"></a>🌰输入文本 ( 光标在输入框内时命令才会生效 )</h1><p><code>adb shell input text *******</code></p>
<h1 id="🌰国内版-Profiler"><a href="#🌰国内版-Profiler" class="headerlink" title="🌰国内版 Profiler"></a>🌰国内版 Profiler</h1><p><code>adb forward tcp:34999 localabstract:Unity-com.sofunny.ChickenDEV</code></p>
<p><code>adb forward tcp:34999 localabstract:Unity-com.sofunny.chickendinnerfirst</code></p>
<p><code>adb forward tcp:34999 localabstract:Unity-com.sofunny.Sausage</code></p>
<h1 id="🌰海外版-Profiler"><a href="#🌰海外版-Profiler" class="headerlink" title="🌰海外版 Profiler"></a>🌰海外版 Profiler</h1><p><code>adb forward tcp:34999 localabstract:Unity-com.GlobalSoFunny.Sausage</code></p>
<p><code>adb forward tcp:34999 localabstract:Unity-com.GlobalSoFunny.BetaSausage</code></p>
<h1 id="🌰查看移动端设备的-CPU-型号"><a href="#🌰查看移动端设备的-CPU-型号" class="headerlink" title="🌰查看移动端设备的 CPU 型号"></a>🌰查看移动端设备的 CPU 型号</h1><p><code>adb shell getprop ro.product.cpu.abi</code></p>
<h1 id="🌰移动端设备的-CPU-型号-移动端需要节能-因此只能使用精简指令集的-ARM-架构"><a href="#🌰移动端设备的-CPU-型号-移动端需要节能-因此只能使用精简指令集的-ARM-架构" class="headerlink" title="🌰移动端设备的 CPU 型号 (移动端需要节能, 因此只能使用精简指令集的 ARM 架构)"></a>🌰移动端设备的 CPU 型号 (移动端需要节能, 因此只能使用精简指令集的 ARM 架构)</h1><table>
<thead>
<tr>
<th>CPU 型号</th>
<th>位数</th>
<th>架构</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>armeabi-v8a</td>
<td>64 位</td>
<td>armv8 架构</td>
<td>主流</td>
</tr>
<tr>
<td>armeabi-v7a</td>
<td>32 位</td>
<td>armv7 架构</td>
<td></td>
</tr>
<tr>
<td>armeabi</td>
<td>32 位</td>
<td>armv5 和 armv6 架构</td>
<td></td>
</tr>
<tr>
<td>x86_64</td>
<td>64 位</td>
<td>x86_64 架构</td>
<td></td>
</tr>
<tr>
<td>x86</td>
<td>32 位</td>
<td>x86 架构</td>
<td></td>
</tr>
</tbody></table>
<h1 id="🌰获取某个应用进程的-PID"><a href="#🌰获取某个应用进程的-PID" class="headerlink" title="🌰获取某个应用进程的 PID"></a>🌰获取某个应用进程的 PID</h1><p><code>adb shell ps</code></p>
<p><code>adb shell &quot;ps |grep Sausage&quot;</code></p>
<h1 id="🌰查看-OpenGL-ES-版本"><a href="#🌰查看-OpenGL-ES-版本" class="headerlink" title="🌰查看 OpenGL ES 版本"></a>🌰查看 OpenGL ES 版本</h1><p><code>adb shell getprop ro.opengles.version</code></p>
<table>
<thead>
<tr>
<th align="left">ro.opengles.version</th>
<th align="left">android:glEsVersion</th>
<th align="left">Of OpenGL ES version</th>
</tr>
</thead>
<tbody><tr>
<td align="left">65536</td>
<td align="left">0x00010000</td>
<td align="left">OpenGL ES 1.0</td>
</tr>
<tr>
<td align="left">65537</td>
<td align="left">0x00010001</td>
<td align="left">OpenGL ES 1.1</td>
</tr>
<tr>
<td align="left">131072</td>
<td align="left">0x00020000</td>
<td align="left">OpenGL ES 2.0</td>
</tr>
<tr>
<td align="left">196608</td>
<td align="left">0x00030000</td>
<td align="left">OpenGL ES 3.0</td>
</tr>
<tr>
<td align="left">196609</td>
<td align="left">0x00030001</td>
<td align="left">OpenGL ES 3.1</td>
</tr>
<tr>
<td align="left">196610</td>
<td align="left">0x00030002</td>
<td align="left">OpenGL ES 3.2</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Computer</category>
      </categories>
      <tags>
        <tag>ADB</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义 Rider 的配置和缓存位置</title>
    <url>/computer/computer_ide.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🍖问题"><a href="#🍖问题" class="headerlink" title="🍖问题"></a>🍖问题</h1><p>用过 Rider 的设置同步插件的应该都知道, 看似同步了很多设置, 而实际上呢, 虽然不能说是完全没用吧, 但也是屁用没有</p>
<p>于是自己手动同步各项设置就成了重中之重</p>
<p><img data-src="/images/computer/rider-1.png" alt="设置同步"></p>
<h1 id="🥝新建-Rider-的配置和缓存目录"><a href="#🥝新建-Rider-的配置和缓存目录" class="headerlink" title="🥝新建 Rider 的配置和缓存目录"></a>🥝新建 Rider 的配置和缓存目录</h1><p>推荐在 <code>JetBrains</code> 目录中新建 <code>rider</code> , <code>config</code> , <code>system</code> 三个目录</p>
<ul>
<li><code>rider</code> 为存放主程序的位置</li>
<li><code>config</code> 为存放配置文件和插件的位置</li>
<li><code>system</code> 为存放缓存和日志的位置</li>
</ul>
<h1 id="🍹Rider-用户配置文件"><a href="#🍹Rider-用户配置文件" class="headerlink" title="🍹Rider 用户配置文件"></a>🍹Rider 用户配置文件</h1><p>Rider 自定义配置文件在这个位置</p>
<p><code>&#123;Rider&#125;/bin/idea.properties</code></p>
<p><img data-src="/images/computer/rider-2.png" alt="配置文件"></p>
<h1 id="🍙自定义-Rider-配置"><a href="#🍙自定义-Rider-配置" class="headerlink" title="🍙自定义 Rider 配置"></a>🍙自定义 Rider 配置</h1><p>打开 <code>idea.properties</code> 文件, 需要修改的位置有 4 个: 配置存放目录, 缓存存放目录, 插件存放目录, 日志存放目录, 可以参照以下配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="section"># Uncomment this option if you want to customize a path to the settings directory.</span></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line">idea.config.path=E:/Program/JetBrains/config</span><br><span class="line"></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="section"># Uncomment this option if you want to customize a path to the caches directory.</span></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line">idea.system.path=E:/Program/JetBrains/system</span><br><span class="line"></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="section"># Uncomment this option if you want to customize a path to the user-installed ugins directory.</span></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line">idea.plugins.path=$&#123;idea.config.path&#125;/plugins</span><br><span class="line"></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="section"># Uncomment this option if you want to customize a path to the logs directory.</span></span><br><span class="line"><span class="section">#---------------------------------------------------------------------</span></span><br><span class="line">idea.log.path=$&#123;idea.system.path&#125;/log</span><br></pre></td></tr></table></figure>

<h1 id="🌴迁移默认设置到新目录"><a href="#🌴迁移默认设置到新目录" class="headerlink" title="🌴迁移默认设置到新目录"></a>🌴迁移默认设置到新目录</h1><h2 id="配置文件的迁移"><a href="#配置文件的迁移" class="headerlink" title="配置文件的迁移"></a>配置文件的迁移</h2><ul>
<li>默认位置 <code>C:\Users\Administrator\AppData\Roaming\JetBrains\&#123;rider_version&#125;\</code></li>
</ul>
<p>将上述文件夹中的文件全部移动到新的 <code>config</code> 文件夹中</p>
<h2 id="缓存文件的迁移"><a href="#缓存文件的迁移" class="headerlink" title="缓存文件的迁移"></a>缓存文件的迁移</h2><ul>
<li>默认位置 <code>C:\Users\Administrator\AppData\Local\JetBrains\&#123;rider_version&#125;\</code></li>
</ul>
<p>将上述文件夹中的文件全部移动到新的 <code>system</code> 文件夹中</p>
<p>最后重启 Rider 即可</p>
]]></content>
      <categories>
        <category>Computer</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>战棋游戏命中率研究</title>
    <url>/game/game-true-hit.html</url>
    <content><![CDATA[<p>研究一下战棋游戏代表《火焰纹章》中命中率的设定, 学习一下前辈的经验</p>
<span id="more"></span>

<h1 id="🎄声明"><a href="#🎄声明" class="headerlink" title="🎄声明"></a>🎄声明</h1><p>下文中 y 代指真实命中, x 代指显示命中</p>
<h1 id="🌴-1RN-命中系统"><a href="#🌴-1RN-命中系统" class="headerlink" title="🌴&quot;1RN&quot; 命中系统"></a>🌴&quot;1RN&quot; 命中系统</h1><p>查看火焰纹章 WIKI 中对命中率的解释, 这里是原文: <span class="exturl" data-url="aHR0cHM6Ly9maXJlZW1ibGVtd2lraS5vcmcvd2lraS9UcnVlX2hpdCNjaXRlX3JlZi1yZWRkaXRfMy0w">WiKi<i class="fa fa-external-link-alt"></i></span></p>
<p>在 <code>多拉基亚776</code> 之前的火焰纹章均使用 y &#x3D; x 的设定, 即真实命中就是玩家所看到的显示命中, 称为 &quot;1RN&quot; 命中系统, 下面是曲线图</p>
<p><img data-src="/images/game/true_hit_1.png" alt="1RN"></p>
<h1 id="🍉-2RN-命中系统"><a href="#🍉-2RN-命中系统" class="headerlink" title="🍉&quot;2RN&quot; 命中系统"></a>🍉&quot;2RN&quot; 命中系统</h1><p>&quot;真实命中&quot; 的概念首次出现在 GBA 的 <code>封印之剑</code> 中, 并出现在包括 <code>觉醒</code> 在内的大多数后续游戏中</p>
<p>在这些游戏中不再只掷一个随机数, 而是掷两个, 通过计算这两个随机数的平均值, 并将平均值与显示的命中率进行比较, 如果平均值小于命中率则攻击命中, 这种方式称为 &quot;2RN&quot; 命中系统, 下面是对比曲线图</p>
<p><img data-src="/images/game/true_hit_2.png" alt="2RN"></p>
<ul>
<li>绿色的是 2RN 命中系统</li>
<li>紫色的是 1RN 命中系统</li>
</ul>
<p>可以看出 2RN 系统更加鼓励低命中时闪避, 高命中时击中, 这种情况下闪避高的角色和命中高的角色将会十分强力</p>
<h1 id="✨混合命中系统"><a href="#✨混合命中系统" class="headerlink" title="✨混合命中系统"></a>✨混合命中系统</h1><p>某些火焰纹章中采用了一种介于 &quot;1RN&quot; 和 &quot;2RN&quot; 之间的新命中率系统</p>
<p>当显示命中率低于 50% 时游戏将使用 &quot;1RN&quot; 命中系统, 此时真实命中就是玩家看到的显示命中</p>
<p>当显示命中率达到或超过 50% 时游戏将掷出一个随机数, 之后使用特定的数学函数进行比较, 下面是对比曲线图</p>
<p><img data-src="/images/game/true_hit_3.png" alt="3RN"></p>
<ul>
<li>红色的是 混合 命中系统</li>
<li>绿色的是 2RN 命中系统</li>
<li>紫色的是 1RN 命中系统</li>
</ul>
<p>可以看出混合命中系统依旧鼓励高命中, 但是不再鼓励玩家利用闪避型的角色去规避伤害, 更鼓励玩家利用高防御角色吸收伤害</p>
<h1 id="🦄-2RN-命中系统的命中率表"><a href="#🦄-2RN-命中系统的命中率表" class="headerlink" title="🦄&quot;2RN&quot; 命中系统的命中率表"></a>🦄&quot;2RN&quot; 命中系统的命中率表</h1><table>
<thead>
<tr>
<th>显示命中</th>
<th>真实命中</th>
<th>显示命中</th>
<th>真实命中</th>
<th>显示命中</th>
<th>真实命中</th>
<th>显示命中</th>
<th>真实命中</th>
<th>显示命中</th>
<th>真实命中</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0.00</td>
<td>20</td>
<td>8.20</td>
<td>40</td>
<td>32.40</td>
<td>60</td>
<td>68.40</td>
<td>80</td>
<td>92.20</td>
</tr>
<tr>
<td>1</td>
<td>0.03</td>
<td>21</td>
<td>9.03</td>
<td>41</td>
<td>34.03</td>
<td>61</td>
<td>69.97</td>
<td>81</td>
<td>92.97</td>
</tr>
<tr>
<td>2</td>
<td>0.10</td>
<td>22</td>
<td>9.90</td>
<td>42</td>
<td>35.70</td>
<td>62</td>
<td>71.50</td>
<td>82</td>
<td>93.70</td>
</tr>
<tr>
<td>3</td>
<td>0.21</td>
<td>23</td>
<td>10.81</td>
<td>43</td>
<td>37.41</td>
<td>63</td>
<td>72.99</td>
<td>83</td>
<td>94.39</td>
</tr>
<tr>
<td>4</td>
<td>0.36</td>
<td>24</td>
<td>11.76</td>
<td>44</td>
<td>39.16</td>
<td>64</td>
<td>74.44</td>
<td>84</td>
<td>95.04</td>
</tr>
<tr>
<td>5</td>
<td>0.55</td>
<td>25</td>
<td>12.75</td>
<td>45</td>
<td>40.95</td>
<td>65</td>
<td>75.85</td>
<td>85</td>
<td>95.65</td>
</tr>
<tr>
<td>6</td>
<td>0.78</td>
<td>26</td>
<td>13.78</td>
<td>46</td>
<td>42.78</td>
<td>66</td>
<td>77.22</td>
<td>86</td>
<td>96.22</td>
</tr>
<tr>
<td>7</td>
<td>1.05</td>
<td>27</td>
<td>14.85</td>
<td>47</td>
<td>44.65</td>
<td>67</td>
<td>78.55</td>
<td>87</td>
<td>96.75</td>
</tr>
<tr>
<td>8</td>
<td>1.36</td>
<td>28</td>
<td>15.96</td>
<td>48</td>
<td>46.56</td>
<td>68</td>
<td>79.84</td>
<td>88</td>
<td>97.24</td>
</tr>
<tr>
<td>9</td>
<td>1.71</td>
<td>29</td>
<td>17.11</td>
<td>49</td>
<td>48.51</td>
<td>69</td>
<td>81.09</td>
<td>89</td>
<td>97.69</td>
</tr>
<tr>
<td>10</td>
<td>2.10</td>
<td>30</td>
<td>18.30</td>
<td>50</td>
<td>50.50</td>
<td>70</td>
<td>82.30</td>
<td>90</td>
<td>98.10</td>
</tr>
<tr>
<td>11</td>
<td>2.53</td>
<td>31</td>
<td>19.53</td>
<td>51</td>
<td>52.47</td>
<td>71</td>
<td>83.47</td>
<td>91</td>
<td>98.47</td>
</tr>
<tr>
<td>12</td>
<td>3.00</td>
<td>32</td>
<td>20.80</td>
<td>52</td>
<td>54.40</td>
<td>72</td>
<td>84.60</td>
<td>92</td>
<td>98.80</td>
</tr>
<tr>
<td>13</td>
<td>3.51</td>
<td>33</td>
<td>22.11</td>
<td>53</td>
<td>56.29</td>
<td>73</td>
<td>85.69</td>
<td>93</td>
<td>99.09</td>
</tr>
<tr>
<td>14</td>
<td>4.06</td>
<td>34</td>
<td>23.46</td>
<td>54</td>
<td>58.14</td>
<td>74</td>
<td>86.74</td>
<td>94</td>
<td>99.34</td>
</tr>
<tr>
<td>15</td>
<td>4.65</td>
<td>35</td>
<td>24.85</td>
<td>55</td>
<td>59.95</td>
<td>75</td>
<td>87.75</td>
<td>95</td>
<td>99.55</td>
</tr>
<tr>
<td>16</td>
<td>5.28</td>
<td>36</td>
<td>26.28</td>
<td>56</td>
<td>61.72</td>
<td>76</td>
<td>88.72</td>
<td>96</td>
<td>99.72</td>
</tr>
<tr>
<td>17</td>
<td>5.95</td>
<td>37</td>
<td>27.75</td>
<td>57</td>
<td>63.45</td>
<td>77</td>
<td>89.65</td>
<td>97</td>
<td>99.85</td>
</tr>
<tr>
<td>18</td>
<td>6.66</td>
<td>38</td>
<td>29.26</td>
<td>58</td>
<td>65.14</td>
<td>78</td>
<td>90.54</td>
<td>98</td>
<td>99.94</td>
</tr>
<tr>
<td>19</td>
<td>7.41</td>
<td>39</td>
<td>30.81</td>
<td>59</td>
<td>66.79</td>
<td>79</td>
<td>91.39</td>
<td>99</td>
<td>99.99</td>
</tr>
<tr>
<td>20</td>
<td>8.20</td>
<td>40</td>
<td>32.40</td>
<td>60</td>
<td>68.40</td>
<td>80</td>
<td>92.20</td>
<td>100</td>
<td>100.00</td>
</tr>
</tbody></table>
<h1 id="📚参考资料"><a href="#📚参考资料" class="headerlink" title="📚参考资料"></a>📚参考资料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9maXJlZW1ibGVtd2lraS5vcmcvd2lraS9UcnVlX2hpdCNjaXRlX3JlZi1yZWRkaXRfMy0w">火焰纹章 wiki<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZXJlbmVzZm9yZXN0Lm5ldC9nZW5lcmFsL3RydWUtaGl0Lw==">True Hit<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL29wdXMvNzc0MDcyNjc0NTY3NTg1ODEy">火焰纹章中的显示命中与实际命中<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>理解计算机中的字符编码</title>
    <url>/computer/computer_char_code.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌠前言"><a href="#🌠前言" class="headerlink" title="🌠前言"></a>🌠前言</h1><p>今天再一次体会到了 <strong>基础知识不扎实会带来无数的问题与困扰</strong> 这句话是多么地真实 ! ! 事情起因是我想巩固一下 SQL 知识, 于是用 SQL Developer 工具开始写 SQL, 但是当我用 SQL Developer 打开一个之前在 PL&#x2F;SQL 上编辑的 SQL 文件的时候, 里面所有的中文全部乱码了 ! ! 我就知道我必须要解决 <code>编码</code> 这个困扰我许久的问题了. 于是上网搜索资料, 最后总结如下, 我使用了编码的发展顺序来组织文章结构 ( 大概, 或许, 应该, 差不多是这么个发展顺序吧, 哈哈 ! ), OK, 我们开始.</p>
<h1 id="字符集-和-编码规则"><a href="#字符集-和-编码规则" class="headerlink" title="字符集 和 编码规则"></a>字符集 和 编码规则</h1><p>有两件事必须在最开始就要点出, 这也是这篇文章的重心所在.</p>
<ol>
<li>字符集和编码规则是完全不同的两种事物:</li>
</ol>
<p><strong>字符集</strong>: 为每一个字符分配一个唯一的 ID.</p>
<p><strong>编码规则</strong>: 定义如何将之前定义的 ID 转换为计算机中的字节序列的一整套规则.</p>
<p>这里不需要特别明白, 只需要知道有这样一个区别即可, 后面根据实例来理解它们会更容易.</p>
<ol start="2">
<li>字符集和编码规则仅在讨论计算机存储时有效.</li>
</ol>
<h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><p>在计算机内部, 所有信息最终都是一个二进制值. 每一个二进制位 (bit) 有 0 和 1 两种状态, 因此八个二进制位就可以组合出 256 种状态, 这被称为一个字节 (byte). 也就是说, 从 <code>0X00</code> 到 <code>0XFF</code> 的一个字节一共可以用来表示 256 种不同的状态, 如果让每一个状态对应一个符号, 就是 256 个符号.</p>
<h1 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h1><p>于是美国就率先制定了一套字符编码, 来解决英语字符与二进制位之间的关系, 并做了统一规定. 这被称为 <code>ASCII</code>, 即 <code>美国信息交换标准代码</code>, 一直沿用至今.</p>
<p>由于 <code>ASCII</code> 提出的时候, 字符集和编码规则这两个概念尚未区分, 于是 <code>ASCII</code> 既表示字符集又表示编码规则. 不过为了好理解, 我们这里来一波强行解释! 上图!</p>
<p><img data-src="/images/computer/ascii.png" alt="ASCII"></p>
<h2 id="ASCII-字符集"><a href="#ASCII-字符集" class="headerlink" title="ASCII 字符集"></a>ASCII 字符集</h2><p>上图中的 <code>Bin</code> 和 <code>缩写/字符</code> 这两列就是字符集, 一共规定了 128 个字符以及这 128 个字符的 ID.</p>
<p>字符集就只是负责这个工作, 即给每个要表示的字符分配一个 ID, 创建一种映射关系, 至于这个 ID 在计算机中怎么储存, 是用 1 个字节还是 2 个字节还是可变长度字节是不需要字符集去考虑的. 即使是仅仅只有 128 个字符的 ASCII 字符集, 我在电脑中就喜欢用 2 个字节表示, 我硬盘空间有的是, 我就喜欢 1 个字节表示字符, 另 1 个字节在旁边站岗, 谁又管的着呢? 虽然这很蠢!</p>
<h2 id="ASCII-编码规则"><a href="#ASCII-编码规则" class="headerlink" title="ASCII 编码规则"></a>ASCII 编码规则</h2><ul>
<li>① 每个字符都使用 1 个字节表示.</li>
<li>② 这个字节的首位始终为 0.</li>
</ul>
<p>ASCII 字符集经过编码规则的限制之后, 在计算机中就表示为了: 0000.0000 到 0111.1111.</p>
<p>这样应该就有点明白字符集和编码规则的区别了吧. 其实当时那个年代 <code>字符集</code> 和 <code>编码规则</code> 这两个概念还没有明确建立, 因为没必要区分开, 默认情况下, 字符集所定义的 ID 的二进制形式就直接是编码规则, 但是随着时代的发展, 明确建立这两个概念就很有必要了. 比如后来提出的 Unicode 字符集, 在 2020 年 3 月的 <code>ISO/IEC 10646:2020</code> 版本中, 总共有 143924 个字符, 其中部分字符会占用 4 个字节, 总不能还是使用 <code>字符集所定义的 ID 的二进制形式就直接是编码规则</code> 这种简单的对应了吧, 因为这样的话所有的字符都要用 4 个字节, 原来只需 1 个字节的英文字母现在需要 4 个字节, 原来只需要 2 个字节的汉字现在也需要 4 个字节, 而且 Unicode 编码还在不断地补充进化, 所以这样实在是太浪费空间了! 我还要用硬盘存放珍贵的电影资源呢! 更大的影响是在网络传输方面, 原本只需传输 1 MB 的数据量, 现在却要传输 4 MB, 这太浪费带宽了!</p>
<p>[注] ASCII 是后面一切编码的基础, 因此即使字符编码不断发展, 发展后的它们也都会考虑到和 ASCII 的兼容性, 因此你会看到后面的编码都会做出一些相应的措施来兼容 ASCII.</p>
<h1 id="扩展版-ASCII"><a href="#扩展版-ASCII" class="headerlink" title="扩展版 ASCII"></a>扩展版 ASCII</h1><p>随着计算机的普及, 计算机进入了欧洲国家, 但是 ASCII 中不包含其他语言的字符啊! 像希腊字母, 罗马字母等. 那么这些欧洲国家就很难受啊! 正好 ASCII 只使用了 1 个字节的后 7 位, 于是, 一些欧洲国家就决定, 利用 ASCII 编码规则中闲置的最高位编入新的符号 ( 你美国人不是才用了半个字节吗, 那好, 剩下的半个字节由我们来定义 ). 这样一来, 这些欧洲国家使用的编码体系, 就可以表示 256 个字符, 我们称之为 <code>扩展版 ASCII</code>.</p>
<h2 id="扩展版-ASCII-字符集"><a href="#扩展版-ASCII-字符集" class="headerlink" title="扩展版 ASCII 字符集"></a>扩展版 ASCII 字符集</h2><p>扩展版 ASCII 字符集规定了 256 个字符. 其中 128 个字符直接沿用了 ASCII, 以达到兼容的目的, 剩下的 128 个字符是欧洲国家自己定义的字符. 当然由于每个国家语言不同, 对于这 128 个字符, 不同的国家自然有不同的定义, 那么肯定也会有它们独特的称呼, 但本质上它们都属于扩展版 ASCII 字符集🤣. (是不是感觉开始出现了混乱的味道? 嗯哼~) 但是不管怎样, 所有这些扩展版 ASCII 字符集中, 0 ~ 127 表示的符号是一样的, 不一样的只是 128 ~ 255 这些字符.</p>
<h2 id="扩展版-ASCII-编码规则"><a href="#扩展版-ASCII-编码规则" class="headerlink" title="扩展版 ASCII 编码规则"></a>扩展版 ASCII 编码规则</h2><ul>
<li>① 每个字符使用 1 个字节表示.</li>
</ul>
<p>于是扩展版 ASCII  字符集经过编码规则的限制之后, 在计算机中就表示为了: 0000.0000 到 1111.1111. ASCII 和扩展版 ASCII 两者之间互不冲突, 相安无事.</p>
<p>从扩展版 ASCII 开始, 这种命名就具有了表示一个大类的意味, 在这个大类下, 具体会细分成很多字符集, 比如, 意大利有意大利的扩展版 ASCII, 法国有法国的扩展版 ASCII, 瑞士有瑞士的扩展版 ASCII. 其中最优秀的字符集扩展方案是 <code>ISO 8859-1</code>, 通常称之为 <code>Latin-1</code>, Latin-1 利用 128 ~ 255 这 128 个二进制数, 包括了足够的附加字符集来涵盖基本的西欧语言, 同时在 0 ~ 127 的范围内兼容 ASCII 编码规则.</p>
<h1 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h1><p>之后, 计算机进入了亚洲国家, 亚洲国家使用的符号就更多了, 其中我国的汉字就接近十万个! 常用字也有四千多个. 由于前面的 ASCII 和扩展版 ASCII 的单字节字符集只能表示 256 种符号, 这对于我们博大精深的汉语来说是肯定不够的, 于是单字节不行, 就必须使用多字节. 于是就诞生了一系列的多字节字符集, 其中一类就叫做 <code>ANSI 字符集</code>.</p>
<p>ANSI 字符集是从 0X0000 定义到 0XFFFF, 理论上来说, 只要全部的字符都使用 2 个字节表示, 就可以包含 65536 个字符 (但是实际的编码规则不会这么简单直接), 这对于任何单个国家的字符需求来说, 都能基本满足了.</p>
<p>ANSI 字符集定义了要表示的字符以及对应的 ID, 但是并不意味着将这些字符编到计算机中的时候会遵守 <code>字符集所定义的 ID 的二进制形式就直接是编码规则</code> 的游戏规则. 就比如后面会提到的 <code>GB 2312</code> 字符集使用的 <code>EUC-CN</code> 编码规则, 半角字符只占 1 个字节, 汉字和全角字符才会占用 2 个字节 (是不是已经开始有点晕了😵).</p>
<p>[注] 网络上有人说 ANSI 字符集是 ASCII 字符集 的扩展, 我想他应该是把我前面所提到的 ASCII 字符集和 ASCII 扩展字符集都统称为了 ASCII 字符集, 于是得出了他的这个结论. 我认为我的说法和他的说法没有绝对的谁对谁错, 只是不同的两种理解. 在现在这个信息交流如此便利的时代, 我也希望大家在非原则问题上不要过于较真. 不过本文中一直采用的是我自己的看法, 即 ASCII 字符集和 ASCII 扩展字符集不统称为 ASCII 字符集. 接下来让我们回到正题.</p>
<h2 id="ANSI-字符集"><a href="#ANSI-字符集" class="headerlink" title="ANSI 字符集"></a>ANSI 字符集</h2><p>ANSI 字符集中包含的字符具体是什么不好说, 因为不同国家的 ANSI 字符集包含的字符是不一样的, 和当时的 ASCII 扩展字符集的发展轨迹相同, 对于 ANSI 字符集, 不同的亚洲国家同样设计了他们各自的字符集 (这里我终于搜索到这些细分的 ANSI 字符集所对应的名字了 😂), 比如日本的 ANSI 字符集叫做 <code>JIS X 0208</code>, 韩国的叫做 <code>KS X 1001</code>, 我国的 ANSI 字符集叫做 <code>GB 2312</code>, 释义为: <strong><code>信息处理交换用汉字编码字符集基本集</code></strong>. 下面简单说一下 GB 2312 中所规定的字符集内容.</p>
<p>GB 2312 共收录 6763 个汉字, 其中一级汉字 3755 个, 二级汉字 3008 个, 同时收录了包括拉丁字母, 希腊字母, 日文平假名及片假名字母, 俄语西里尔字母在内的 682 个字符.</p>
<p>GB 2312 的出现, 基本满足了汉字的计算机处理需要, 它所收录的汉字已经覆盖中国大陆 99.75% 的使用频率.</p>
<h2 id="ANSI-编码规则"><a href="#ANSI-编码规则" class="headerlink" title="ANSI 编码规则"></a>ANSI 编码规则</h2><ul>
<li>① 不同的 ANSI 字符集会规定其独特的编码规则.</li>
</ul>
<p>这个还真的都不一样, 但是也都是有基准的. 比如我国的 GB 2312 字符集使用的 ANSI 编码规则叫做 <code>EUC-CN</code>, 日本的 JIS X 0208 字符集在 Windows 上使用的 ANSI 编码规则叫做 <code>EUC-JP</code>, 韩国的 KS X 1001 字符集使用的 ANSI 编码规则叫做 <code>EUC-KR</code>. 这些编码规则都是 <code>EUC</code> 类的编码规则.</p>
<p>是不是头都大了? 😂 只要知道不同的 <code>ANSI 字符集</code> 会采用一些不同的编码规则即可.</p>
<p>总结一下, <code>ANSI</code> 是一类字符集的统称, 不同的国家有其自己的 ANSI 字符集, 不同的字符集也会对应不同的编码规则, 同样编码规则也都有各自的名称.</p>
<p>有人可能会问, 后面不是会出现 Unicode 这种全球统一的字符集吗, 那为什么还要继续使用和发展 ASNI 这种国家之间无法兼容的字符集呢? 这个问题呢我后面会解答.</p>
<h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>ASNI 出现之后, 各个国家的字符需求基本都解决了, 但是因为每个国家制定了他们各自的字符集和对应的编码方案, 所以各个国家之间的字符集不通用, 于是制定一套全球统一编码的呼声越加强烈! 最后 <code>ISO</code> 即 <code>国际标准化组织</code> 实在看不下去了, 为了解决不同国家 ANSI 的冲突问题, ISO 就制定了一套全球统一编码, 即 <code>Unicode</code>.</p>
<p><code>Unicode</code> 时代的时候, 字符集和编码规则就已经很明确了, Unicode 仅仅只是一种字符集. 其中定义了全世界所有符号的唯一标识 ID, 并且一直在不断地修订. 2020 年 3 月的 <code>ISO/IEC 10646:2020</code> 标准中, 已经包含了 143924 个字符.</p>
<p>如果使用简单的 <code>字符集所定义的 ID 的二进制形式就直接是编码规则</code> 的方法来存储 Unicode 字符集, 将会造成极大的浪费, 于是为了解决 Unicode 这个庞大字符集的存储和网络传输问题, 对应 Unicode 字符集的编码规则就出现了. 其中最常用的就是 <code>UTF-8</code> 编码规则了. 其他的编码规则还有 <code>UTF-16 BE</code>, (Big-Endian 大端序) <code>UTF-16 LE</code> (Little-Endian 小端序), <code>UTF-32</code>, <code>UTF-7</code>, <code>Punycode</code>, <code>CESU-8</code>, <code>SCSU</code>, <code>GB18030</code> 等等.</p>
<p>对于之前说的为什么还要继续使用 ANSI 字符集的原因是, Unicode 下的各种编码规则, 对于常用汉字, 基本上都是占用 3 个字节, 生僻汉字可能占用到 6 个字节. 对于 <code>GB2312</code> 和 <code>GBK</code> 来讲, UTF-8 无疑造成了浪费, 所以, UTF-8 可以说是对英文友好, 但对中文不友好的一种编码方式. 所以在中文界,  GB2312 与 GBK 依旧有自己的市场. 但是按照目前的趋势来看, 硬盘都是白菜价, 电脑性能也已经足够无视这点性能的消耗了. 所以推荐所有的网页使用统一编码: UTF-8.</p>
<p>其中关于 UTF-8, GB18030 内部的具体编码规则就不展开说了 (其实我也不会, 哈哈), 有兴趣的可以自己搜索资料, 维基百科就是一个比较好的选择.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>美国人为了表示日常用的字符, 制定了 ASCII 字符集.</li>
<li>欧洲人为了表示日常用的字符, 扩充了 ASCII 字符集.</li>
<li>中国人为了表示常用简体汉字, 制定了 GB2312 字符集.</li>
<li>中国人为了表示生僻汉字和繁体字, 扩充 GB2312 字符集为 GBK 字符集.</li>
<li>ISO 为了统一全世界的字符, 制定了全球字符集 Unicode, 目标为包含世界上全部的字符.</li>
<li>为了方便 Unicode 的传输和存储, 制定了 UTF-8, UTF-16 等一系列编码规则.</li>
</ul>
<h1 id="💖-举例"><a href="#💖-举例" class="headerlink" title="💖 举例"></a>💖 举例</h1><p>现在在程序编码过程中, 你的一个变量被赋值了这样一个字符串, <code>\u5730\u7403\u002c\u0020\u7531\u6211\u6765\u5b88\u62a4\u0021</code>, 考虑下面几个问题:</p>
<ol>
<li>这一串字符串使用了什么字符集?</li>
<li>这一串字符串使用了什么编码规则?</li>
<li>使用什么规则对其解码? 字符集映射, 还是编码规则?</li>
</ol>
<hr>
<p>解析:</p>
<p>这只是一串字符串, 我们并没有在讨论它的计算机存储方式, 因此字符集和编码规则统统无意义. 如果此时此刻这串字符串储存在计算机中, 此处的讨论才会有意义, 字符集及其编码规则全都是在讨论计算机如何存储字符的, 如果不讨论存储便没有意义.</p>
<p>对其解码需要使用 Unicode 字符集映射, 原因就是因为这是 Unicode 中对字符定义的 ID, ID 为 <code>\u5730</code> 的字符是 <code>地</code>, ID 为 <code>\u7403</code> 的字符是 <code>球</code>, 后面的依次是: <code>,</code>, <code> </code>, <code>由</code>, <code>我</code>, <code>来</code>, <code>守</code>, <code>护</code>, <code>!</code>.</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMDcvMTAvYXNjaWlfdW5pY29kZV9hbmRfdXRmLTguaHRtbA==">字符编码笔记: ASCII, Unicode 和 UTF-8<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL3d3dy5xaWFueGluZ3poZW0uY29tL3Bvc3QtMTQ5OS5odG1s">网页编码就是那点事<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIzMzc0MDc4L2Fuc3dlci8yNDM4NTk2Mw==">Unicode 和 UTF-8 有什么区别<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxODg3MjQ2L2Fuc3dlci8xOTYzMTIzNQ==">字符集和编码方式的区别<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTQ2NzIzMS9hcnRpY2xlL2RldGFpbHMvODY1NTA4NTQ=">ASCII 码和 ANSI 码的区别<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjA4OWM1YjUxODgyNTM4YzAyZjAzZWI=">从 ASCII 到 UTF-8 字符集到底是什么<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzU3NDYxNjE0L2Fuc3dlci8yNzQ2MzQ3MjA=">ASCII 码  和 Unicode 码是什么关系<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>设置 Windows 访问不同 IP 时使用不同的网络</title>
    <url>/computer/computer_issues.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="设置-Windows-访问不同-IP-时使用不同的网络"><a href="#设置-Windows-访问不同-IP-时使用不同的网络" class="headerlink" title="设置 Windows 访问不同 IP 时使用不同的网络"></a>设置 Windows 访问不同 IP 时使用不同的网络</h1><p>这个效果是通过设置 Windows 路由表实现的.</p>
<h2 id="路由表查看方法"><a href="#路由表查看方法" class="headerlink" title="路由表查看方法"></a>路由表查看方法</h2><p>在 <code>Power Shell</code> 中使用 <code>route print</code> 命令可以查看路由表信息.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPv4 路由表</span><br><span class="line">==========================================================================================</span><br><span class="line">活动路由:</span><br><span class="line">          网络目标                网络掩码               网关              接口       跃点数</span><br><span class="line">          0.0.0.0                0.0.0.0     192.168.42.129    192.168.42.220          25</span><br><span class="line">          0.0.0.0                0.0.0.0       10.30.20.254      10.30.20.143          25</span><br><span class="line">       10.30.20.0          255.255.255.0            在链路上      10.30.20.143         281</span><br><span class="line">     10.30.20.143        255.255.255.255            在链路上      10.30.20.143         281</span><br><span class="line">     10.30.20.255        255.255.255.255            在链路上      10.30.20.143         281</span><br><span class="line">        127.0.0.0              255.0.0.0            在链路上         127.0.0.1         331</span><br><span class="line">        127.0.0.1        255.255.255.255            在链路上         127.0.0.1         331</span><br><span class="line">  127.255.255.255        255.255.255.255            在链路上         127.0.0.1         331</span><br><span class="line">       172.16.0.0            255.255.0.0       10.30.20.254      10.30.20.143          26</span><br><span class="line">     192.168.42.0          255.255.255.0            在链路上    192.168.42.220         281</span><br><span class="line">   192.168.42.220        255.255.255.255            在链路上    192.168.42.220         281</span><br><span class="line">   192.168.42.255        255.255.255.255            在链路上    192.168.42.220         281</span><br><span class="line">        224.0.0.0              240.0.0.0            在链路上         127.0.0.1         331</span><br><span class="line">        224.0.0.0              240.0.0.0            在链路上    192.168.42.220         281</span><br><span class="line">        224.0.0.0              240.0.0.0            在链路上      10.30.20.143         281</span><br><span class="line">  255.255.255.255        255.255.255.255            在链路上         127.0.0.1         331</span><br><span class="line">  255.255.255.255        255.255.255.255            在链路上    192.168.42.220         281</span><br><span class="line">  255.255.255.255        255.255.255.255            在链路上      10.30.20.143         281</span><br><span class="line">==========================================================================================</span><br><span class="line">永久路由:</span><br><span class="line">          网络地址                网络掩码           网关地址                         跃点数</span><br><span class="line">       172.16.0.0            255.255.0.0       10.30.20.254                             1</span><br><span class="line">==========================================================================================</span><br></pre></td></tr></table></figure>

<h2 id="路由表的预备知识"><a href="#路由表的预备知识" class="headerlink" title="路由表的预备知识"></a>路由表的预备知识</h2><ul>
<li>什么是默认路由规则</li>
</ul>
<p>网络地址为 <code>0.0.0.0</code> 的路由规则就是默认路由规则, 默认路由规则是当其他全部的路由规则都没有匹配成功的时候生效</p>
<ul>
<li>什么是普通路由规则</li>
</ul>
<p>有且至少有一个具体数字不为 0 的路由规则就是普通路由规则</p>
<ul>
<li>如何算匹配成功</li>
</ul>
<p><strong>实际网络地址</strong> 和 <strong>路由表网络掩码</strong> 进行与运算, 如果和 <strong>路由表网络地址</strong> 相等, 则视为匹配成功</p>
<h2 id="路由表的操作命令"><a href="#路由表的操作命令" class="headerlink" title="路由表的操作命令"></a>路由表的操作命令</h2><ul>
<li>route delete</li>
</ul>
<p>用于删除路由规则, 此命令无法使用通配符, 比如: <code>route delete 0.0.0.0</code> 或 <code>route delete 192.168.0.0</code></p>
<ul>
<li>route add</li>
</ul>
<p>添加路由规则, 以实现效果举例:</p>
<ul>
<li><ul>
<li><p>想要默认用外网访问网络, 外网的网关是 192.168.42.129, 怎么设置呢?</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">route delete <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line">route add -p <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> mask <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">42</span>.<span class="number">129</span></span><br></pre></td></tr></table></figure>

<p>想要实现类似 &quot;默认&quot; 这种效果, 先把所有的默认路由删除掉, 然后添加想要的默认路由规则即可</p>
</li>
</ul>
</li>
<li><ul>
<li><p>有个网址必须使用内网才能访问, 内网网关是 10.30.20.254, 怎么配置呢?</p>
<p>先得到网址的 IP 地址, 以 <code>https://git.tube/dashboard/projects/starred</code> 为例, 在 Power Shell 中直接 ping 域名即可</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> git.tube</span><br><span class="line"></span><br><span class="line">正在 <span class="built_in">Ping</span> git.tube [<span class="number">172</span>.<span class="number">16</span>.<span class="number">11</span>.<span class="number">23</span>] 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">172</span>.<span class="number">16</span>.<span class="number">11</span>.<span class="number">23</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">63</span></span><br><span class="line">来自 <span class="number">172</span>.<span class="number">16</span>.<span class="number">11</span>.<span class="number">23</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">63</span></span><br><span class="line">来自 <span class="number">172</span>.<span class="number">16</span>.<span class="number">11</span>.<span class="number">23</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">63</span></span><br><span class="line">来自 <span class="number">172</span>.<span class="number">16</span>.<span class="number">11</span>.<span class="number">23</span> 的回复: 字节=<span class="number">32</span> 时间&lt;<span class="number">1</span>ms TTL=<span class="number">63</span></span><br><span class="line"></span><br><span class="line"><span class="number">172</span>.<span class="number">16</span>.<span class="number">11</span>.<span class="number">23</span> 的 <span class="built_in">Ping</span> 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">0</span>ms，最长 = <span class="number">0</span>ms，平均 = <span class="number">0</span>ms</span><br></pre></td></tr></table></figure>

<p>得到目标网址: 172.16.11.23, 之后添加路由规则, 为了可以访问整个域名蔟, 只进行部分限定</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">route add -p <span class="number">172</span>.<span class="number">16</span>.<span class="number">0</span>.<span class="number">0</span> mask <span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span>.<span class="number">0</span> <span class="number">10</span>.<span class="number">30</span>.<span class="number">20</span>.<span class="number">254</span></span><br></pre></td></tr></table></figure>
<p>[<strong>注</strong>] <font color='red'>mask 的要求是: mask 和想要访问的 IP 与运算后和网络地址必须一致</font></p>
<p><code>[172.16.11.23] &amp; [255.255.0.0] = [172.16.0.0]</code></p>
</li>
</ul>
</li>
</ul>
<h1 id="打开方式-中残留已卸载的应用程序"><a href="#打开方式-中残留已卸载的应用程序" class="headerlink" title="&#39;打开方式&#39;中残留已卸载的应用程序"></a>&#39;打开方式&#39;中残留已卸载的应用程序</h1><p>注册表里面 HKEY_CLASSES_ROOT 目录中, 删除对应程序名称的文件夹即可.</p>
<h1 id="常用-Win-组合快捷键"><a href="#常用-Win-组合快捷键" class="headerlink" title="常用 Win 组合快捷键"></a>常用 Win 组合快捷键</h1><p>Win 键可以说就是 Windows 的系统按键, 所以 Win 的组合快捷键都是和 Windows 操作相关的.</p>
<ul>
<li><code>Win Q</code> : 打开 搜索.</li>
<li><code>Win W</code> : 打开 工作区.</li>
<li><code>Win E</code> : <font color=red>打开 资源管理器. </font></li>
<li><code>Win R</code> : 打开 运行.</li>
<li><code>Win T</code> : 选中 任务栏上的图标, 可循环切换.</li>
<li><code>Win U</code> : 打开 设置中的轻松使用设置.</li>
<li><code>Win I</code> : 打开 设置.</li>
<li><code>Win P</code> : 更改 投影模式.</li>
<li><code>Win A</code> : 打开 桌面右下角的消息通知.</li>
<li><code>Win S</code> : 打开 搜索.</li>
<li><code>Win D</code> : <font color=red>显示 Windows 桌面, 再次按下 <code>Win D</code> 返回之前的页面. </font></li>
<li><code>Win F</code> : 打开 反馈中心.</li>
<li><code>Win H</code> : 进行 Windows 语音听写, 前提是当前焦点在一个文本编辑器上, 如记事本.  ( 这个功能 &quot;超棒&quot;, 只是语音识别不准确而已, 只是支持的应用特别少而已, 只是使用语音输入后必须关闭文件重新打开之后才能正常使用键盘输入而已...嗯...就这样...)</li>
<li><code>Win K</code> : 打开 连接, 检测外部显示设备.</li>
<li><code>Win L</code> : 实现 快速锁屏.</li>
<li><code>Win ;</code> : 打开 Windows 表情输入.</li>
<li><code>Win .</code> : <font color=red>打开 Windows 表情输入. </font></li>
<li><code>Win X</code> : 打开 开始菜单图标的右键菜单.</li>
<li><code>Win C</code> : 打开 小娜 Cortana.  ( 在设置中开启此快捷键)</li>
<li><code>Win V</code> : <font color=red> 打开 剪切板历史. 这个是真的好用. </font></li>
<li><code>Win B</code> : 选中 托盘栏中的第一个图标, 不能循环切换, 只能选择第一个.</li>
<li><code>Win M</code> : 最小化当前桌面中的所有窗口. 没有最小化功能的窗口无法最小化.</li>
<li><code>Win Table</code> : <font color=red>打开 Windows 10 时间线. </font></li>
</ul>
<h1 id="常用-Ctrl-组合快捷键"><a href="#常用-Ctrl-组合快捷键" class="headerlink" title="常用 Ctrl 组合快捷键"></a>常用 Ctrl 组合快捷键</h1><p>Ctrl 可能是 Control 的简写吧, 所以 Ctrl 快捷键和命令相关.</p>
<p>不同的应用程序会有不同的 Ctrl 组合快捷键, 而且大多数都可以进行自定义, 所以只列举常见的<strong>通用默认快捷键</strong>. <strong>下面所有的快捷键在不同的程序中稍有区别</strong>.</p>
<ul>
<li><code>Ctrl W</code> : <font color=red> 关闭当前页面. </font></li>
<li><code>Ctrl A</code> : 全选.</li>
<li><code>Ctrl B</code> : 给字体加粗. Word 支持此快捷键.</li>
<li><code>Ctrl C</code> : 复制.</li>
<li><code>Ctrl S</code> : 保存.</li>
<li><code>Ctrl F</code> : 查找.</li>
<li><code>Ctrl Z</code> : 撤销一次操作.</li>
<li><code>Ctrl X</code> : 剪切.</li>
<li><code>Ctrl V</code> : 粘贴.</li>
<li><code>Ctrl Y</code> : <font color=red>恢复一次撤销. </font></li>
<li><code>Ctrl O</code> : 程序内部的 &quot;打开&quot; 功能.</li>
<li><code>Ctrl N</code> : 程序内部的 &quot;新建&quot; 功能.</li>
<li><code>Ctrl Enter</code> : 通讯软件输入消息时换行, 不发送.</li>
</ul>
<h1 id="常用-Alt-组合快捷键"><a href="#常用-Alt-组合快捷键" class="headerlink" title="常用 Alt 组合快捷键"></a>常用 Alt 组合快捷键</h1><p>Alt 主要和软件的菜单相关.</p>
<ul>
<li><code>Alt 左键双击</code> : <font color=red>快速查看文件, 文件夹的属性.</font></li>
</ul>
<h1 id="提高效率的技巧"><a href="#提高效率的技巧" class="headerlink" title="提高效率的技巧"></a>提高效率的技巧</h1><ul>
<li><p>按下 Win R, 输入 <code>shell:sendto</code>, 在之后的页面中可以修改右键菜单中的「发送到」子菜单.</p>
</li>
<li><p>Windows 中, 在任务栏的图标上点击鼠标中键可以快速新建窗口, 在任务栏的缩略图中点击鼠标中键可以快速关闭窗口.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏笔记</title>
    <url>/game/game_note.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="常用-Emoji"><a href="#常用-Emoji" class="headerlink" title="常用 Emoji"></a>常用 Emoji</h1><p>😈🤠👻🦄🐔🐬🐤👀🦴✨🎄🔑💊📚⏳🍖🍸🥝🍉🍍🍑🍒🍓🍅🍐🍏🍎🍋🍊🍈🍀🌴🌈⚡🔥</p>
<h1 id="游戏灵感-剧情、故事、剧本"><a href="#游戏灵感-剧情、故事、剧本" class="headerlink" title="游戏灵感 - 剧情、故事、剧本"></a>游戏灵感 - 剧情、故事、剧本</h1><h2 id="惰性系列-廉价的真诚"><a href="#惰性系列-廉价的真诚" class="headerlink" title="[惰性系列] 廉价的真诚"></a><strong>[惰性系列] 廉价的真诚</strong></h2><p>一个人的命运其实可以理解为是这个人的认知和经验阅历总和的体现.</p>
<p>一个人要发展, 要成就更多的人, 那么就必须过 &quot;钱&quot; 这一关, 去做距离钱很近的事情, 才能慢慢地懂得人性, 才能慢慢摸清社会底层的运转规则, 只有懂得了人性、摸清了规则你才能成为强者去保护你想保护的人。</p>
<p>真诚这项能力, 和其他能力组合都是极其强大的, 但是如果只有真诚本身, 那说明这个人是一个思想上极为懒惰的人, 当你的品质只有真诚时, 真诚就会变为单纯, 而极度的单纯就是思想上的极度懒惰。</p>
<p>一定要学会去思考人性, 去和人性打交道, 不要懒, 去尝试, 去参与, 去体会, 只有真正学会这些, 了解这些, 才能称为是自己这本故事书的主人公, 而不是别人人生的陪演。</p>
<h2 id="惰性系列-做成年人的选择"><a href="#惰性系列-做成年人的选择" class="headerlink" title="[惰性系列] 做成年人的选择"></a><strong>[惰性系列] 做成年人的选择</strong></h2><p>感悟自蜀国大将军姜维</p>
<p>姜维在蜀国选择投降时, 依然心存希望, 选择假意投降, 联合钟会谋反让蜀国幽而复明, 虽然最终失败, 但是这才是成年人的选择, 而不是一死了之, 那是未成年人的做法</p>
<p>面对困难首先想到的是逃避, 放弃, 一死了之, 这是不行的. 卧薪尝胆是困难的, 但正因为是困难的, 所以它才需要努力, 它才值得去争取! 从这里也可以延申推断出拖延症的症结也是逃避, 逃避那些困难的事件, 这也是不对的, 适当的劳逸结合可以, 但不能始终去逃避.</p>
<h2 id="反战-战争、武力、和平"><a href="#反战-战争、武力、和平" class="headerlink" title="[反战] 战争、武力、和平"></a><strong>[反战] 战争、武力、和平</strong></h2><p>观点来自高达 00 中的玛丽娜. 武力解决问题确实很方便, 打就完事了嘛, 最后谁活着谁是对的!</p>
<p>但不管是什么理由的战争与暴力, 即使是出自正义的理由, 也一样会伤害到无辜的人。对暴力和武力彻底的拒绝, 以及探索如何实现暴力和武力的彻底杜绝, 才是一个真正和平的社会应抱有的态度.</p>
<h2 id="寿命论"><a href="#寿命论" class="headerlink" title="[寿命论]"></a><strong>[寿命论]</strong></h2><p>来自芙莉莲. 芙莉莲作为精灵族, 寿命几乎无限, 面对昔日的朋友, 异常开心, 使用大量镜头刻画芙莉莲和旧友的感情, 但是最终旧友的一句鼓励: 加油啊, 一定要打败魔王! 直接泪目, 因为魔王早就被打败了! 昔日的好友也早已苍老糊涂了.</p>
<h2 id="克隆人"><a href="#克隆人" class="headerlink" title="[克隆人]"></a><strong>[克隆人]</strong></h2><p>来自蜡笔小新. 一开始便从被机械化的主角出发来讲故事, 去体验家人的情感变化. </p>
<p>家人见到机械化的主人公, 从恐慌, 到交流, 到理解, 到最后接受, 总之让玩家觉得主人公被机械化, 虽然遇到了各种不便, 虽然内心极度恐慌, 虽然家人们一开始也不接纳自己, 但好在家人们理解自己, 经过几周, 几月, 几年的相处, 自己还是融入了家庭, 这是一个非常温馨的故事.</p>
<p>但紧接着故事大反转, 主人公其实并没有机械化, 这个机械的只是主人公的机械体, 真正的主人公还活着, 但是家人们已经接受了目前的主人公, 两个主人公都是主人公啊, 这一点一定要突出刻画, 他俩没有善恶之分, 机械的也是在追求自己的爱人, 自己也是真心爱着家人们的, 而且这段时间内, 几年内, 明明一直都是自己陪在家人身边的, 为什么突然一个所谓的 &quot;真的&quot; 来了, 然后我就要离开 ? ! 凭什么呀 ? ! 为什么我要离开 ?</p>
<h2 id="基础概念-为人处世的基础概念"><a href="#基础概念-为人处世的基础概念" class="headerlink" title="[基础概念] 为人处世的基础概念"></a><strong>[基础概念] 为人处世的基础概念</strong></h2><ol>
<li><p>如果你决定不再和某个人有任何的联系, 那么就不需要再去得罪他&#x2F;她, 再去和他&#x2F;她产生任何的交集, 直接默默断开联系即可.</p>
</li>
<li><p>伺候和照顾的区别, <strong>照顾</strong>是帮忙做他&#x2F;她不会做或者做不到的事情, 而<strong>伺候</strong>是, 他&#x2F;她自己会做的, 能做到的事情, 却还要帮他&#x2F;她做.</p>
</li>
</ol>
<h1 id="游戏灵感-玩法、机制、表现"><a href="#游戏灵感-玩法、机制、表现" class="headerlink" title="游戏灵感 - 玩法、机制、表现"></a>游戏灵感 - 玩法、机制、表现</h1><h2 id="通用-元素机制"><a href="#通用-元素机制" class="headerlink" title="[通用] 元素机制"></a><strong>[通用] 元素机制</strong></h2><p>风 火 电 水 土 冰 木 光 暗 毒 生命</p>
<p>生命 &#x3D; 光 + 木<br>毒 &#x3D; 暗 + 木<br>沼泽 &#x3D; 水 + 土<br>毒沼泽 &#x3D; 毒 + 沼泽<br>气 &#x3D; 电 + 水<br>火 &#x3D; 光 + 木</p>
<p>风会助长火势<br>电可以在有水的地形上蔓延<br>火可以在草原上蔓延<br>水可以让毒素蔓延<br>山体阻挡狂风</p>
<h2 id="通用-出力机制"><a href="#通用-出力机制" class="headerlink" title="[通用] 出力机制"></a><strong>[通用] 出力机制</strong></h2><p>攻击力可调, 攻速也可调, 此机制可以实现的效果:</p>
<ol>
<li>可以实现手下留情的机制, 宝可梦抓宠物, 剧情中饶对方一命;</li>
<li>另外也可以强制初始出力 50%, 越打越猛, 实现类似龙珠中的悟空的效果. 即所有人打架都是看状态的, 一开始状态不可能全开, 肾上腺素还没开始分泌呢, 对吧 ? 所以一开始是不会使出全力的, 那么玩家同样, 对付小兵完全可以不用全力, 面对 BOSS, 在长时间的战斗后, 出力的上限越来越高, 甚至突破上限.</li>
<li>或者设置高的出力会消耗更多的体力, 让玩家在面对 boss 前要温存体力, 但这样就有点像机战中机体的能量设定了, 需要取舍;</li>
</ol>
<h2 id="日式战棋-迷雾机制"><a href="#日式战棋-迷雾机制" class="headerlink" title="[日式战棋] 迷雾机制"></a><strong>[日式战棋] 迷雾机制</strong></h2><p>这个东西有利有弊, 也没啥特殊的地方, 可以参考战场兄弟, 英雄联盟等迷雾机制, 可以用于迷雾森林, 比如异世界的世界观下, 探索迷雾森林很常见啦, 再就是夜晚等特殊剧情地图, 尽量不要作为基础的游戏机制.</p>
<h2 id="日式战棋-伏兵机制"><a href="#日式战棋-伏兵机制" class="headerlink" title="[日式战棋] 伏兵机制"></a><strong>[日式战棋] 伏兵机制</strong></h2><p>指定我方一名角色, 指定的角色消失, 当有敌人走到消失的位置附近 2 格时, 角色出现, 造成恐慌 buff. 这个机制设计的重点是必须表现出一种提前埋伏好的感觉, 那种运筹帷幄的计谋感.</p>
<h2 id="日式战棋-朝向机制"><a href="#日式战棋-朝向机制" class="headerlink" title="[日式战棋] 朝向机制"></a><strong>[日式战棋] 朝向机制</strong></h2><p>主要也是为刺客准备的, 比如可以设置偷袭技能, 当被刺时可以提高伤害. 另外也可以用来演变成夹击甚至包围等战略或者剧情, 比如腹背受敌, 壮烈牺牲的剧情.</p>
<h2 id="日式战棋-隐身-再动机制"><a href="#日式战棋-隐身-再动机制" class="headerlink" title="[日式战棋] 隐身+再动机制"></a><strong>[日式战棋] 隐身+再动机制</strong></h2><p>也是为刺客准备的机制, 毕竟战棋中的刺客还是很难体现出刺杀的感觉嘛. 可以无视敌人的仇恨, 进行绕后偷袭.</p>
<h2 id="日式战棋-协乘机制"><a href="#日式战棋-协乘机制" class="headerlink" title="[日式战棋] 协乘机制"></a><strong>[日式战棋] 协乘机制</strong></h2><p>为飞行单位准备的机制, 可以拉一个人移动.</p>
<h2 id="日式战棋-禁锢、抓取、推开机制"><a href="#日式战棋-禁锢、抓取、推开机制" class="headerlink" title="[日式战棋] 禁锢、抓取、推开机制"></a><strong>[日式战棋] 禁锢、抓取、推开机制</strong></h2><p>参考自三国志 11, 游戏中可以抓取敌军的单位, 抓到面前来, 或者推开敌方单位, 推到落石处, 推到埋伏处, 推到陷阱处等等. 可以禁锢单位, 无法移动, 只能使用道具, 原地攻击等. 甚至还可以有眩晕, 直接强制待机.</p>
<h2 id="日式战棋-分身-夹击-包围机制"><a href="#日式战棋-分身-夹击-包围机制" class="headerlink" title="[日式战棋] 分身+夹击+包围机制"></a><strong>[日式战棋] 分身+夹击+包围机制</strong></h2><p>只要是为了弥补夹击和包围很难触发的问题, 甚至可以结合朝向机制进行联动.</p>
<h2 id="日式战棋-一击脱离-致残机制"><a href="#日式战棋-一击脱离-致残机制" class="headerlink" title="[日式战棋] 一击脱离+致残机制"></a><strong>[日式战棋] 一击脱离+致残机制</strong></h2><p>一击脱离自身很难直接拉开距离, 但是配合致残, 就可以无限拉扯, 被致残的人是追不上的.</p>
<h2 id="日式战棋-切换机制"><a href="#日式战棋-切换机制" class="headerlink" title="[日式战棋] 切换机制"></a><strong>[日式战棋] 切换机制</strong></h2><p>灵感来自刀剑神域的 Switch, 主要体现角色之间的配合, 这也是我像制作的战棋游戏的终极目标: 配合感, 制作出像刀剑神域中一样的配合感的战棋游戏. 这里的切换可以完全按照刀剑神域中的演出来, 一个角色攻击后, 招架对方的攻击, 此时队友可以立即与其交换位置, 打出连携, 如果被切换的人同样可以切换, 甚至可以再切换回来, 另外想到的关于剧情的, 可以刻划一个悲伤的故事, 主人公四人的绝技, 四连斩, 但最后仅剩下主角一人, 在困境中, 其他三人的英灵出现, 四人久违的再次联手, 用出当年的绝技.</p>
<h2 id="日式战棋-连携作战机制"><a href="#日式战棋-连携作战机制" class="headerlink" title="[日式战棋] 连携作战机制"></a><strong>[日式战棋] 连携作战机制</strong></h2><p>连携作战机制, 使用行动条来规定行动的顺序, 当特定的角色在地图中的位置相邻一定范围, 并且行动顺序满足条件, 比如可以一起行动, 甚至间隔行动时, 会触发连携机制 (这样可以强行拉动行动慢的角色), 打出连携技, 比如水平四方斩, 高额伤害, 比起每个人的伤害相加都要高, 可以搭配类似的职业, 比如忍者职业, 可以变身成场景物品, 类似红警的幻影, 变成树, 变成石柱等地形, 而斥候可以识别出这些</p>
<h2 id="日式战棋-侦察"><a href="#日式战棋-侦察" class="headerlink" title="[日式战棋] 侦察"></a><strong>[日式战棋] 侦察</strong></h2><p>盗贼, 斥候的技能, 可以探查一片区域是否有埋伏, 也就是会触发援兵的点, 或者陷阱, 或者埋伏, 固定剧情或许用处不大, 但是肉鸽地图呢, 每次都是随机的地图, 必须要盗贼</p>
<h2 id="卡牌-弃牌机制"><a href="#卡牌-弃牌机制" class="headerlink" title="[卡牌] 弃牌机制"></a><strong>[卡牌] 弃牌机制</strong></h2><p>参考 &lt;带我去地下城吧&gt; 这部作品, 摒弃卡牌的抽牌概念, 转而使用弃牌, 既可以体现探索地牢是物资越来越少的感觉, 又可以完全取消抽牌所带来的运气要素, 切记运气是 rogue 游戏的大忌.</p>
<h1 id="游戏灵感-画面、特效、美术"><a href="#游戏灵感-画面、特效、美术" class="headerlink" title="游戏灵感 - 画面、特效、美术"></a>游戏灵感 - 画面、特效、美术</h1><h2 id="武器-刀枪模式"><a href="#武器-刀枪模式" class="headerlink" title="[武器] 刀枪模式"></a><strong>[武器] 刀枪模式</strong></h2><p>灵感来自宇宙星神盖亚的炮剑, 异世界舅舅中女主的圣物, 轨迹系列中男二的枪斧, 血色佣兵中女狂战的刀型枪, 主要就是近战远程可以来回切换.</p>
<h2 id="地图-地图基础设计理念"><a href="#地图-地图基础设计理念" class="headerlink" title="[地图] 地图基础设计理念"></a><strong>[地图] 地图基础设计理念</strong></h2><p>一副地图中, 大多数的不合理之处都来自于脱离发展过程的高楼平地. 其实先拟一遍城市从村落慢慢变为城市的逻辑过程, 这样推演出来的最终城市, 恢宏的同时又能兼具合理性, 如同桥是为了交通, 但交通是为了地区人口的流动, 不能为了一座看起来会很方便的桥梁而在两侧安插居民区, 而是为了两侧的居民区安置一座并不是效率最高的桥梁. 模拟的发展过程还能帮助完善城市的各个区域功能作用和背景.</p>
<h1 id="游戏网站"><a href="#游戏网站" class="headerlink" title="游戏网站"></a>游戏网站</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueWlrbS5uZXQv">FC 游戏集合<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kb3MuemN6Yy5jei8=">DOS 游戏集合<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9oNW1vdGEuY29tLw==">HTML 5 魔塔游戏集合<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jaHZpbi5naXRodWIuaW8vcmVhY3QtdGV0cmlzLw==">俄罗斯方块<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h1 id="游戏王"><a href="#游戏王" class="headerlink" title="游戏王"></a>游戏王</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuMTIzcGFuLmNvbS9zL1lSZXRWdi1Fd21uQS5odG1s">MDPro3<i class="fa fa-external-link-alt"></i></span> 作者: <strong>赤子奈落</strong></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL3lnb2NvcmUueXMxNjguY29tLw==">游戏王娱乐力量全开<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly95Z28yMzMuY29tLw==">游戏王 223 服务器<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xsbHlhc3ZpZWwvWUdPUHJvVW5pdHlfVjI=">游戏王 YGOPro2 开源代码<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly95Z29wcm8yLmxpbmsvZG93bmxvYWRzLmh0bWw=">游戏王 YGOPro2 游戏客户端下载<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><font color='red'><strong>联机匹配</strong></font>: 主机地址的两个空分别填入 <code>s1.ygo233.com</code> 和 <code>233</code>, 密码留空</p>
</li>
<li><p><font color='red'><strong>人机对战</strong></font>: 主机地址的两个空分别填入 <code>s1.ygo233.com</code> 和 <code>233</code>, 密码: <code>AI</code></p>
</li>
<li><p><font color='red'><strong>好友约战</strong></font>: 房间密码输入任意文字, 房间名前加 M# 为比赛模式, T# 为 2V2 模式. 详细查阅: <span class="exturl" data-url="aHR0cHM6Ly95Z28yMzMuY29tL3VzYWdl">房间设置<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h1 id="泰拉瑞亚"><a href="#泰拉瑞亚" class="headerlink" title="泰拉瑞亚"></a>泰拉瑞亚</h1><ul>
<li><p>官网: <span class="exturl" data-url="aHR0cHM6Ly90ZXJyYXJpYS5vcmcv">Terraria<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>MOD: <span class="exturl" data-url="aHR0cHM6Ly9mczQ5Lm9yZy8=">制作教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>以下 MOD 均可以通过模组浏览器下载, 其对应的汉化包都可以使用模组 <strong>Localizer</strong> 下载</p>
<blockquote>
<p>Localizer：汉化器</p>
<p>CheatSheet：作弊器</p>
<p>UnLeveled：血量界面美化</p>
<p>BossChecklist：BOSS 进度查询</p>
<p>CalamityMod：灾厄</p>
<p>RecipeBrowser：合成表</p>
<p>WheresMyItems：物品辅助查找</p>
</blockquote>
</li>
</ul>
<h1 id="星露谷物语"><a href="#星露谷物语" class="headerlink" title="星露谷物语"></a>星露谷物语</h1><ul>
<li><p>MOD 加载器: <span class="exturl" data-url="aHR0cHM6Ly9zbWFwaS5pby8=">SMAPI<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>MOD 搜索器: <span class="exturl" data-url="aHR0cHM6Ly9zbWFwaS5pby9tb2RzLw==">SMAPI Search<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>手册: <span class="exturl" data-url="aHR0cHM6Ly94aW5nbHVndS5odWlqaXdpa2kuY29tL3dpa2kvJUU5JUE2JTk2JUU5JUExJUI1">WiKi<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>农场上传: <span class="exturl" data-url="aHR0cHM6Ly91cGxvYWQuZmFybS8=">星露谷物语农场<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>MOD 网站: <span class="exturl" data-url="aHR0cHM6Ly93d3cubmV4dXNtb2RzLmNvbS9zdGFyZGV3dmFsbGV5">N 站<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h1 id="维诺之战"><a href="#维诺之战" class="headerlink" title="维诺之战"></a>维诺之战</h1><ul>
<li>手册: <span class="exturl" data-url="aHR0cDovL3d3dy53ZXNub3RoLm9yZy9tYW51YWwvZGV2L21hbnVhbC56aF9DTi5odG1sI19wcmVmYWNl">WiKi<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="饥荒联机版"><a href="#饥荒联机版" class="headerlink" title="饥荒联机版"></a>饥荒联机版</h1><ul>
<li><p>官网: <span class="exturl" data-url="aHR0cHM6Ly9hY2NvdW50cy5rbGVpLmNvbS9hY2NvdW50L2luZm8=">Klei<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>直播掉落: <span class="exturl" data-url="aHR0cHM6Ly9saXZlLmJpbGliaWxpLmNvbS9ibGFja2JvYXJkL3N0YXJ2ZS0yMDIwLXBjLmh0bWw=">BiliBili<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h1 id="塞尔达传说-荒野之息"><a href="#塞尔达传说-荒野之息" class="headerlink" title="塞尔达传说 荒野之息"></a>塞尔达传说 荒野之息</h1><ul>
<li>整合包地址: <span class="exturl" data-url="aHR0cDovL3hpYW92aWVtYy52aXAvaW5kZXgucGhwL2FyY2hpdmVzLzM1MC8=">荒野之息<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="Telegram-语言包"><a href="#Telegram-语言包" class="headerlink" title="Telegram 语言包"></a>Telegram 语言包</h1><p>不同版本汉化程度以及汉化质量不同, 需要多切换多尝试</p>
<h2 id="中文-简体-聪聪"><a href="#中文-简体-聪聪" class="headerlink" title="中文(简体)-聪聪"></a>中文(简体)-聪聪</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhcncc</p>
<h2 id="中文-简体-zh-CN"><a href="#中文-简体-zh-CN" class="headerlink" title="中文(简体)-@zh_CN"></a>中文(简体)-@zh_CN</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;classic-zh-cn</p>
<h2 id="中文-简体-简体"><a href="#中文-简体-简体" class="headerlink" title="中文(简体)-简体"></a>中文(简体)-简体</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;classic-zh</p>
<h2 id="中文-简体-langCN"><a href="#中文-简体-langCN" class="headerlink" title="中文(简体)-langCN"></a>中文(简体)-langCN</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhlangcn</p>
<h2 id="中文-简体-zh-hans"><a href="#中文-简体-zh-hans" class="headerlink" title="中文(简体)-zh-hans"></a>中文(简体)-zh-hans</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zh-hans-beta</p>
<h2 id="中文-简体-瓜体"><a href="#中文-简体-瓜体" class="headerlink" title="中文(简体)-瓜体"></a>中文(简体)-瓜体</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;duang-zh-cn</p>
<h2 id="中文-简体-小哇"><a href="#中文-简体-小哇" class="headerlink" title="中文(简体)-小哇"></a>中文(简体)-小哇</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;qingwa</p>
<h2 id="中文-简体-江湖中文版"><a href="#中文-简体-江湖中文版" class="headerlink" title="中文(简体)-江湖中文版"></a>中文(简体)-江湖中文版</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;jianghu</p>
<h2 id="中文-简体-cnmoe"><a href="#中文-简体-cnmoe" class="headerlink" title="中文(简体)-@cnmoe"></a>中文(简体)-@cnmoe</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;moecn</p>
<h2 id="中文-简体-MiaoCN"><a href="#中文-简体-MiaoCN" class="headerlink" title="中文(简体)-@MiaoCN"></a>中文(简体)-@MiaoCN</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;meowcn</p>
<h2 id="中文-简体-简体字"><a href="#中文-简体-简体字" class="headerlink" title="中文(简体)-简体字"></a>中文(简体)-简体字</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;jiantizi</p>
<h2 id="中文-香港-繁体1"><a href="#中文-香港-繁体1" class="headerlink" title="中文(香港)-繁体1"></a>中文(香港)-繁体1</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;hongkong</p>
<h2 id="中文-香港-繁体2"><a href="#中文-香港-繁体2" class="headerlink" title="中文(香港)-繁体2"></a>中文(香港)-繁体2</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhhant-hk</p>
<h2 id="中文-香港-繁体3"><a href="#中文-香港-繁体3" class="headerlink" title="中文(香港)-繁体3"></a>中文(香港)-繁体3</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zh-hant-raw</p>
<h2 id="中文-香港-人口语"><a href="#中文-香港-人口语" class="headerlink" title="中文(香港)-人口语"></a>中文(香港)-人口语</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;hongkonger</p>
<h2 id="中文-香港-广东话1"><a href="#中文-香港-广东话1" class="headerlink" title="中文(香港)-广东话1"></a>中文(香港)-广东话1</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhhkpb1</p>
<h2 id="中文-香港-广东话2"><a href="#中文-香港-广东话2" class="headerlink" title="中文(香港)-广东话2"></a>中文(香港)-广东话2</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;hkcantonese</p>
<h2 id="中文-香港-郭桓桓"><a href="#中文-香港-郭桓桓" class="headerlink" title="中文(香港)-郭桓桓"></a>中文(香港)-郭桓桓</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhong-taiwan-traditional</p>
<h2 id="中文-台灣-正体"><a href="#中文-台灣-正体" class="headerlink" title="中文(台灣)-正体"></a>中文(台灣)-正体</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;taiwan</p>
<h2 id="中文-台灣-繁体"><a href="#中文-台灣-繁体" class="headerlink" title="中文(台灣)-繁体"></a>中文(台灣)-繁体</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zh-hant-beta</p>
<h2 id="中文-台灣-文言"><a href="#中文-台灣-文言" class="headerlink" title="中文(台灣)-文言"></a>中文(台灣)-文言</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;chinese-ancient</p>
<h2 id="中文-台灣-文言-1"><a href="#中文-台灣-文言-1" class="headerlink" title="中文(台灣)-文言"></a>中文(台灣)-文言</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;chinese-literary</p>
<h2 id="中文-台灣-魔法師"><a href="#中文-台灣-魔法師" class="headerlink" title="中文(台灣)-魔法師"></a>中文(台灣)-魔法師</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;encha</p>
<h2 id="日文"><a href="#日文" class="headerlink" title="日文"></a>日文</h2><p>tg:&#x2F;&#x2F;setlanguage?lang&#x3D;ja-beta</p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>这个文件既是 GIF 又是 ZIP ？！</title>
    <url>/computer/computer_polyglot.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌴神奇的文件！"><a href="#🌴神奇的文件！" class="headerlink" title="🌴神奇的文件！"></a>🌴神奇的文件！</h1><p>首先看一下下面的这个文件</p>
<p><img data-src="/images/computer/polyglot.gif" alt="polyglot"></p>
<p>看起来它就是一张动图对吧？</p>
<p><img data-src="/images/computer/polyglot.png" alt="polyglot-b"></p>
<p>现在你把它下载下来，然后将后缀重命名为 <code>zip</code></p>
<p>它是不是变成一个压缩包了？</p>
<p>你可能觉得这并算不了什么，因为 Windows 系统就是会按照文件的后缀名来绑定打开方式，这很正常呀！</p>
<p>是的，你想得完全正确，但是你尝试解压一下呢？</p>
<p>是不是很神奇，它居然真的能够解压哦！甚至解压出来的文件还是全新的文件，两个 <code>bat</code> 文件！</p>
<h1 id="🍉它是什么？"><a href="#🍉它是什么？" class="headerlink" title="🍉它是什么？"></a>🍉它是什么？</h1><p>这种文件叫做 <code>Polyglot</code> 多语文件，是一种能够在多个不同的程序或环境中以不同格式解析的文件。</p>
<h1 id="🥝主要用途"><a href="#🥝主要用途" class="headerlink" title="🥝主要用途"></a>🥝主要用途</h1><p>既然 <code>Polyglot</code> 文件可以在多个环境下运行不同的内容，那么 ... 嘿嘿嘿, 自然是深受广大黑客的喜爱啦, 所以它常被用于黑客攻击和恶意软件传播。</p>
<h2 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h2><p>比如给你发送一个同时是 PDF 和 EXE 的 Polyglot 文件，然后欺骗你打开这个 PDF，但实际上它也能作为可执行文件运行恶意代码哦！</p>
<h2 id="绕过杀毒软件"><a href="#绕过杀毒软件" class="headerlink" title="绕过杀毒软件"></a>绕过杀毒软件</h2><p>将某些恶意代码隐藏在图片或音频文件中，就可以绕过安全检查啦！</p>
<h2 id="绕过上传限制"><a href="#绕过上传限制" class="headerlink" title="绕过上传限制"></a>绕过上传限制</h2><p>有的网站只允许上传特定格式的文件，那么用 Polyglot 文件就可以将自己真正想上传的东西藏起来，并上传到服务器上。</p>
<h1 id="🍖如何制作"><a href="#🍖如何制作" class="headerlink" title="🍖如何制作"></a>🍖如何制作</h1><p>制作非常简单, 首先准备好要合并的两个文件</p>
<p><img data-src="/images/computer/polyglot-a.png" alt="polyglot-a"></p>
<p><img data-src="/images/computer/polyglot-b.png" alt="polyglot-b"></p>
<p>之后运行命令</p>
<p><code>copy /b kami.gif + bat.zip combined.gif</code></p>
<p>然后就可以成功得到一个 Polyglot 文件啦！</p>
]]></content>
      <categories>
        <category>Computer</category>
      </categories>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>委托(二) 委托与 &quot;回调和回调函数&quot;</title>
    <url>/csharp/csharp_delegate_02.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="回调与回调函数"><a href="#回调与回调函数" class="headerlink" title="回调与回调函数"></a>回调与回调函数</h1><p>我也不太清楚为什么会出来一个 &quot;<font color='red'>回调函数</font>&quot; 的概念, 回调函数不就是一个参数吗?</p>
<blockquote>
<p>将方法 A 作为 方法 B 的一个参数传入到方法 B 中, 那么方法 A 就是方法 B 的回调函数.</p>
</blockquote>
<p>可以这样理解:</p>
<ol>
<li><p>&quot;回调&quot; 是一种技术: <font color='red'>将方法作为参数传入另一个方法!</font> 在各大编程语言, 脚本语言中都有实现这门技术!</p>
</li>
<li><p>&quot;回调函数&quot; 就是作为参数的方法!</p>
</li>
</ol>
<p>强调: <strong>回调是一项技术! 回调函数是一个参数!</strong></p>
<h1 id="回调-的用途"><a href="#回调-的用途" class="headerlink" title="&quot;回调&quot; 的用途"></a>&quot;回调&quot; 的用途</h1><ol>
<li><p>因为 A 是作为参数传入 B 的, 那么在 B 中就可以编写很多的判断逻辑来准确控制 A 的执行时机, 当然用 retuan 返回执行标志, 通过执行标志来控制 A 的执行也是可以的, 但是这样不是还得对执行标志进行一次判断吗? 当然这个没什么影响, 但是万一这个执行标志无法返回呢, 对吧?</p>
</li>
<li><p>如果 B 中需要处理很复杂的数据, 而且这个数据很难使用 return 返回, 甚至可能根本无法使用 return, 但是 A 又必须要用到这个数据, 此时就可以利用 &quot;回调&quot; 这项技术了, 将 A 传入 B, 在 B 的内部执行 A, 这样 A 就可以获取到需要的数据了.</p>
</li>
<li><p>假设方法 B 可以随机获得一种食材, 食材有多种多样烹饪方法, 可以红烧, 可以清蒸, 可以煎炸, 此时就可以给 B 添加一个 &quot;回调函数&quot; 参数, 这个参数就是烹饪方法 A, 那么在执行方法 B 获取食材的同时就可以将烹饪方法 A 一并传入, 这样一道菜就直接做好了! 而且只要传入不同的 A 就可以做出不同的菜, 甚至在 B 里面还可以写判断方法, 控制某些食材只能用某些特定的烹饪方法!</p>
</li>
</ol>
<p>总结: &quot;回调&quot; 可以做菜~!</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>csharp 中由于方法无法作为参数进行传递, 所以想要在 csharp 中实现 &quot;回调&quot; 需要使用委托来实现, 下面是一个简单的示例.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_CallBackTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">CallBackTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 随机器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">readonly</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            CallBackTest callBackTest = <span class="keyword">new</span> CallBackTest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取食材的同时将烹饪方法作为参数传入, 实现内部调用 -- 这就是 &quot;回调&quot; !</span></span><br><span class="line">            <span class="comment">// 含义为: 先获取食材, 之后使用参数内的烹饪方式对食材进行处理, 得到烹饪后的食物.</span></span><br><span class="line">            callBackTest.GetIngredients(callBackTest.Cook1);<span class="comment">//烧烤</span></span><br><span class="line">            callBackTest.GetIngredients(callBackTest.Cook1);<span class="comment">//烧烤</span></span><br><span class="line">            callBackTest.GetIngredients(callBackTest.Cook2);<span class="comment">//清蒸</span></span><br><span class="line">            callBackTest.GetIngredients(callBackTest.Cook1);<span class="comment">//烧烤</span></span><br><span class="line">            callBackTest.GetIngredients(callBackTest.Cook3);<span class="comment">//煎炸</span></span><br><span class="line">            callBackTest.GetIngredients(callBackTest.Cook1);<span class="comment">//烧烤</span></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取食材</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cook&quot;&gt;</span>烹饪方法<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetIngredients</span>(<span class="params">Action&lt;<span class="built_in">string</span>&gt; cook</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str_ingredient = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="built_in">int</span> int_ingredient = random.Next(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (int_ingredient &gt; <span class="number">75</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                str_ingredient = <span class="string">&quot;大棒肉(&quot;</span> + int_ingredient + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(int_ingredient &gt; <span class="number">25</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                str_ingredient = <span class="string">&quot;鲈鱼(&quot;</span> + int_ingredient + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (int_ingredient == <span class="number">25</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                str_ingredient = <span class="string">&quot;杂烩兔肉块(&quot;</span> + int_ingredient + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(str_ingredient))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;白忙了一天, 没有获得任何食材(&quot;</span> + int_ingredient + <span class="string">&quot;) !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cook(str_ingredient);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 烧烤</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ingredient&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cook1</span>(<span class="params"><span class="built_in">string</span> ingredient</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;获得了 &lt;烧烤&quot;</span> + ingredient + <span class="string">&quot;&gt; !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清蒸</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ingredient&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cook2</span>(<span class="params"><span class="built_in">string</span> ingredient</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;获得了 &lt;清蒸&quot;</span> + ingredient + <span class="string">&quot;&gt; !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 煎炸</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ingredient&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cook3</span>(<span class="params"><span class="built_in">string</span> ingredient</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;获得了 &lt;炸&quot;</span> + ingredient + <span class="string">&quot;&gt; !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzE5ODAxMTMx">回调函数（callback）是什么？<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNDE0OTEzMQ==">js的回调函数一般都用来做什么<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>委托(一) 委托的基本用法</title>
    <url>/csharp/csharp_delegate_01.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="本文重点"><a href="#本文重点" class="headerlink" title="本文重点"></a>本文重点</h1><ol>
<li><p>delegate 和 Delegate 的区别</p>
</li>
<li><p>定义委托</p>
</li>
<li><p>实例化委托</p>
</li>
<li><p>Action 和 Func</p>
</li>
<li><p>委托的基本用法</p>
</li>
</ol>
<h1 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h1><p><code>delegate</code> 是一个类型关键字, 和它类似的还有: <code>class</code>, <code>interface</code>, <code>enum</code> 等等. 这类关键字都是用来定义的, 而不是实例化的. 枚举类型使用 <code>enum</code> 进行定义, 委托类型使用 <code>delegate</code> 进行定义. 因此 <font color='red'><strong>delegate 不是类! 它只是一个类型关键字! 用来定义类型的.</strong></font></p>
<h1 id="System-String-string-和-System-Delegate-delegate"><a href="#System-String-string-和-System-Delegate-delegate" class="headerlink" title="System.String - string 和 System.Delegate - delegate"></a>System.String - string 和 System.Delegate - delegate</h1><p>System.String 是 .Net 框架中的一个类, .Net 框架中包含多种编程语言, 其中 C# 语言中给 System.String 起了一个别名 string, 因此 <code>string str</code> 和 <code>System.String str</code> 是没有区别的, <code>string</code> 就是一个类, <code>string str</code> 这一个代码不是在定义类型, 而是在实例化对象. 但是 <code>delegate</code> 和 <code>System.Delegate</code> 的关系就不是这样了. <code>System.Delegate</code> 是一个类, 而 <code>delegate</code> 则是一个 <code>类型关键字</code>, 它是用来定义委托的, 就像 <code>class</code> 定义类, <code>struct</code> 定义结构体, <code>enum</code> 定义枚举一样, 这些关键字是同一个级次的, 但他们都不是类.</p>
<p>如下图, String, string, Delegate 都可以调用类中的静态方法, 这是因为他们都是类, 但是 delegate 则不可以, 因为它仅仅只是一个类型关键字.</p>
<p><img data-src="/images/csharp/delegate.png" alt="delegate"></p>
<h1 id="🦄如何定义一个委托类型"><a href="#🦄如何定义一个委托类型" class="headerlink" title="🦄如何定义一个委托类型"></a>🦄如何定义一个委托类型</h1><ol>
<li>使用 delegate 关键字</li>
<li>指明待委托方法的两个特征: <code>1. 返回值 2. 参数</code></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义委托类型, 返回值为: int, 参数为: (int, int)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span> (<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>[<strong>注</strong>] 其实 csharp 中已经有定义好的通用委托类型了, 基本无需自己定义委托类型.</p>
<h1 id="🐬如何实例化出一个委托实例"><a href="#🐬如何实例化出一个委托实例" class="headerlink" title="🐬如何实例化出一个委托实例"></a>🐬如何实例化出一个委托实例</h1><p>实例化委托就是使用之前定义好的委托类型实例化出一个委托对象, 也叫做委托实例. 委托的实例化语法和类的实例化语法相同.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化一个 MyDelegate 类型的委托对象, 此时还没有初始化</span></span><br><span class="line">MyDelegate myDelegate;</span><br></pre></td></tr></table></figure>

<p>[<strong>注</strong>] 实例化委托时通常不再使用自己定义的委托类型, 而是使用 csharp 中已经定义好的通用委托类型 Action&lt;&gt; 和 Func&lt;&gt;.</p>
<h1 id="🌴如何初始化一个委托实例"><a href="#🌴如何初始化一个委托实例" class="headerlink" title="🌴如何初始化一个委托实例"></a>🌴如何初始化一个委托实例</h1><ul>
<li><p>方法 1: 使用 new 关键字初始化. 待委托方法作为参数传入.</p>
</li>
<li><p>方法 2: 直接使用符合特征的方法赋值.</p>
</li>
</ul>
<p>[<strong>注</strong>] 待委托方法如果不是静态方法, 则必须是实例方法. 不能将未实例化的方法作为参数传入委托或对委托赋值.</p>
<h1 id="如何调用委托"><a href="#如何调用委托" class="headerlink" title="如何调用委托"></a>如何调用委托</h1><ul>
<li>方式 1: 调用委托和调用方法在代码写法上一致.</li>
<li>方式 2: 调用 Invoke() 方法.</li>
</ul>
<h1 id="委托基本用法示例-非静态"><a href="#委托基本用法示例-非静态" class="headerlink" title="委托基本用法示例 (非静态)"></a>委托基本用法示例 (非静态)</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSharp 起别名的语法规则, 在 namespace 外部书写时必须写全部路径</span></span><br><span class="line"><span class="comment">// using Package = System.Collections.Generic.Dictionary&lt;string, int&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyDelegateTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// CSharp 起别名的语法规则, 在 namespace 内部书写的时候可以嵌套引用 namespace 外的 using</span></span><br><span class="line">    <span class="keyword">using</span> Package = Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个委托类, 指明待委托方法的特征: 1. 返回值 (string) 2. 参数 (string, int, Package)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">DelegateBuy</span>(<span class="params"><span class="built_in">string</span> itemName, <span class="built_in">int</span> num, Package package</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 实例化 玩家包裹</span></span><br><span class="line">            Package package = <span class="keyword">new</span> Package();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实例化 委托</span></span><br><span class="line">            <span class="comment">// 委托初始化时可以直接赋值, 也可以使用 new 关键字</span></span><br><span class="line">            <span class="comment">// 当 &quot;待委托方法&quot; 是非静态方法时, 只能传递待委托方法的实例作为参数, 因此这里必须实例化 Program, 并写 &quot;program.Buy&quot;, 不能只写 &quot;Buy&quot;.</span></span><br><span class="line">            Program program = <span class="keyword">new</span> Program();</span><br><span class="line">            DelegateBuy delegateBuy = program.Buy;</span><br><span class="line">            DelegateBuy delegateBuy2 = <span class="keyword">new</span> DelegateBuy(program.Buy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用委托的写法和调用方法的写法一致</span></span><br><span class="line">            Console.WriteLine(delegateBuy(<span class="string">&quot;体力药水&quot;</span>, <span class="number">10</span>, package));</span><br><span class="line">            Console.WriteLine(delegateBuy(<span class="string">&quot;体力药水&quot;</span>, <span class="number">25</span>, package));</span><br><span class="line">            Console.WriteLine(delegateBuy2(<span class="string">&quot;魔力药水&quot;</span>, <span class="number">10</span>, package));</span><br><span class="line">            Console.WriteLine(delegateBuy2(<span class="string">&quot;魔力药水&quot;</span>, <span class="number">5</span>, package));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 暂停</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 待委托的方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;itemName&quot;&gt;</span>物品名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;num&quot;&gt;</span>物品数量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;package&quot;&gt;</span>玩家包裹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Buy</span>(<span class="params"><span class="built_in">string</span> itemName, <span class="built_in">int</span> num, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; package</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (package.ContainsKey(itemName))</span><br><span class="line">            &#123;</span><br><span class="line">                package[itemName] += num;</span><br><span class="line">                str = <span class="built_in">string</span>.Format(<span class="string">&quot;您又购买了&#123;0&#125;个&#123;1&#125;!&quot;</span>, num, itemName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                package.Add(itemName, num);</span><br><span class="line">                str = <span class="built_in">string</span>.Format(<span class="string">&quot;您购买了&#123;0&#125;个&#123;1&#125;!&quot;</span>, num, itemName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="委托基本用法示例-静态"><a href="#委托基本用法示例-静态" class="headerlink" title="委托基本用法示例 (静态)"></a>委托基本用法示例 (静态)</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSharp 起别名的语法规则, 在 namespace 外部书写时必须写全部路径</span></span><br><span class="line"><span class="comment">// using Package = System.Collections.Generic.Dictionary&lt;string, int&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyDelegateTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// CSharp 起别名的语法规则, 在 namespace 内部书写的时候可以嵌套引用 namespace 外的 using</span></span><br><span class="line">    <span class="keyword">using</span> Package = Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个委托类, 指明待委托方法的特征: 1. 返回值 (string) 2. 参数 (string, int, Package)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">DelegateBuy</span>(<span class="params"><span class="built_in">string</span> itemName, <span class="built_in">int</span> num, Package package</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 实例化 玩家包裹</span></span><br><span class="line">            Package package = <span class="keyword">new</span> Package();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实例化 委托</span></span><br><span class="line">            <span class="comment">// 当 &quot;待委托方法&quot; 是静态方法时, 可以直接将静态方法作为参数传递.</span></span><br><span class="line">            DelegateBuy delegateBuy = Program.Buy;</span><br><span class="line">            DelegateBuy delegateBuy2 = <span class="keyword">new</span> DelegateBuy(Program.Buy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用委托的写法和调用方法的写法一致</span></span><br><span class="line">            Console.WriteLine(delegateBuy(<span class="string">&quot;体力药水&quot;</span>, <span class="number">10</span>, package));</span><br><span class="line">            Console.WriteLine(delegateBuy(<span class="string">&quot;体力药水&quot;</span>, <span class="number">25</span>, package));</span><br><span class="line">            Console.WriteLine(delegateBuy2(<span class="string">&quot;魔力药水&quot;</span>, <span class="number">10</span>, package));</span><br><span class="line">            Console.WriteLine(delegateBuy2(<span class="string">&quot;魔力药水&quot;</span>, <span class="number">5</span>, package));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 暂停</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 待委托的方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;itemName&quot;&gt;</span>物品名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;num&quot;&gt;</span>物品数量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;package&quot;&gt;</span>玩家包裹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Buy</span>(<span class="params"><span class="built_in">string</span> itemName, <span class="built_in">int</span> num, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; package</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (package.ContainsKey(itemName))</span><br><span class="line">            &#123;</span><br><span class="line">                package[itemName] += num;</span><br><span class="line">                str = <span class="built_in">string</span>.Format(<span class="string">&quot;您又购买了&#123;0&#125;个&#123;1&#125;!&quot;</span>, num, itemName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                package.Add(itemName, num);</span><br><span class="line">                str = <span class="built_in">string</span>.Format(<span class="string">&quot;您购买了&#123;0&#125;个&#123;1&#125;!&quot;</span>, num, itemName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Action-和-Func"><a href="#Action-和-Func" class="headerlink" title="Action 和 Func"></a>Action 和 Func</h1><p>在实例化委托的时候, 不仅仅可以使用自己定义的委托, 还可以使用 csharp 中已经定义好的两个泛型委托: <strong><code>Action&lt;&gt;</code></strong> 和 <strong><code>Func&lt;&gt;</code></strong> 来实例化 (强烈建议使用).</p>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p><strong>Action&lt;&gt;</strong> 待委托的方法都是没有返回值的方法, 参数使用泛型进行指定.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Action a; <span class="comment">// 实例化出一个待委托方法特征为没有返回值, 没有参数的委托实例 a</span></span><br><span class="line">Action&lt;<span class="built_in">string</span>&gt; b; <span class="comment">// 实例化出一个待委托方法特征为没有返回值, 有一个 string 类型参数的委托实例 b</span></span><br><span class="line">Action&lt;<span class="built_in">string</span>, <span class="built_in">int</span>[]&gt; c; <span class="comment">// 实例化出一个待委托方法特征为没有返回值, 具有一个 string, 一个 int 数组参数的委托实例 c</span></span><br></pre></td></tr></table></figure>

<h2 id="Func"><a href="#Func" class="headerlink" title="Func"></a>Func</h2><p><strong>Func&lt;&gt;</strong> 待委托的方法都是具有返回值的方法. 使用泛型来指定参数和返回值. 其中泛型中的最后一个类型为返回值的类型.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">string</span>&gt; a; <span class="comment">// 实例化出一个待委托方法特征为没有参数, 返回值类型为 string 的委托实例 a</span></span><br><span class="line">Func&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; b; <span class="comment">// 实例化出一个待委托方法特征为有一个 string 类型的参数, 返回值为 int 类型的委托实例 b</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">int</span>[]&gt; c; <span class="comment">// 实例化出一个待委托方法特征为有两个 类型分别为 int 和 string 类型的参数, 返回值为 int 数组类型的委托实例 c</span></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>delegate 和 Delegate 的区别:</p>
<p> Delegate 是类, delegate 是关键字.</p>
</li>
<li><p>定义委托</p>
<p> 不再自定义委托, 使用 Action&lt;&gt; 和 Func&lt;&gt;.</p>
</li>
<li><p>实例化委托</p>
<p> 使用泛型指明待委托方法的特征.</p>
</li>
<li><p>Action 和 Func</p>
<p> Action&lt;&gt; 指明无返回值, Func&lt;&gt; 最后一个泛型类型指明返回值.</p>
</li>
<li><p>委托的基本用法</p>
<p> 可以通过委托来调用方法.</p>
</li>
</ol>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzMxNTkw">理解委托类型<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>委托(三) 委托的初始化</title>
    <url>/csharp/csharp_delegate_03.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="初始化委托对象"><a href="#初始化委托对象" class="headerlink" title="初始化委托对象"></a>初始化委托对象</h1><p>先定义一个委托类型, 然后使用定义的委托类型实例化一个委托对象.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个委托类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个 MyDelegate 类型的委托对象, 此时还没有初始化</span></span><br><span class="line">MyDelegate myDelegate;</span><br></pre></td></tr></table></figure>

<p><code>MyDelegate myDelegate</code> 只是实例化出了一个空的委托对象, 没有内容, 必须对其初始化. 委托的初始化方式经历了几种变化:</p>
<blockquote>
<p>C# 1.0 中, 使用 &quot;在代码中其他位置定义函数&quot; 的方法, <strong>显式</strong>初始化委托.</p>
<p>C# 2.0 引入了 <strong>匿名方法</strong> 的概念, 以一种可在委托调用中执行的 &quot;未命名内联语句块&quot; 的方式来初始化委托.</p>
<p>C# 3.0 引入了 <strong>Lambda 表达式</strong> 或者 <strong>Lambda 语句块</strong>, 这是另一种匿名方法的书写形式, 但更具表现力并且更简练.</p>
<p>通常, 面向 .NET Framework 3.5 或更高版本的应用程序应使用 Lambda (λ) 表达式或 Lambda 语句块来初始化委托.</p>
</blockquote>
<ol>
<li>第一种: [C# 1.0] 写法上和初始化类一样, 使用 New 关键字.</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 myDelegate 委托</span></span><br><span class="line">myDelegate = <span class="keyword">new</span> MyDelegate(program.Add);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种: [C# 1.0] 写法上和初始化值类型一样, 直接赋值.</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 myDelegate (直接赋值)</span></span><br><span class="line">myDelegate = program.Add;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>第三种: [C# 2.0] 使用匿名方法的原始写法进行初始化</li>
</ol>
<p>匿名方法同样是使用 delegate 关键字定义 (强烈建议不再使用匿名方法, 了解即可, 转而使用 Lambda 表达式或 Lambda 语句块), 返回值无需特别指明, 只需使用 return 来指明返回值及其类型即可, 匿名方法参数的指明方式和普通方法的指明方式一致, 但是必须和委托定义时声明的方法签名吻合.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">myDelegate = <span class="built_in">delegate</span> (<span class="built_in">int</span> a, <span class="built_in">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b).ToString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>第四种: [C# 3.0] 使用匿名方法的简化写法--Lambda 表达式或 Lambda 语句块进行初始化 (强烈建议使用!)</li>
</ol>
<p>Lambda 表达式和 Lambda 语句块也是委托初始化的一种手段, 它比匿名方法更为简洁, 而且不会混淆 (谁让委托类型的定义和匿名方法的定义使用同样的关键字的, 唉... 乱套了吧... 我瞎说的~~), 总之正如微软文档说的一样, 学习使用 lambda 表达式吧, 为什么呢? 因为如果你不会的话, 连别人的程序都看不懂啊😥</p>
<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><ol>
<li><p>Lambda 的特征符号是: <code>=&gt;</code>. &#x3D;&gt; 符号的左边是参数, 使用小括号 ( ) 括起来, 右侧是语句或表达式, 当右侧是语句时, 必须使用大括号 { } 括起来, 当右侧是表达式时, 则不能带有大括号, 且表达式只能有一句.</p>
</li>
<li><p>Lambda 中右侧是语句时, 使用 return 语句来指明返回值及其类型, 返回值的类型必须符合委托的要求.</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; funA = (<span class="built_in">int</span> x, <span class="built_in">int</span> y) =&gt; &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lambda 中参数的类型可以注明, 如上面的例子, 也可以省略, 如下面的例子.</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; funB = (x, y) =&gt; &#123; <span class="keyword">return</span> x * y; &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lambda 中的参数, 当且仅当只有一个时, 小括号可以省略.</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; funC = x =&gt; &#123; <span class="keyword">return</span> x * <span class="number">2</span>; &#125;; <span class="comment">// 当且仅当只有一个时, 小括号可以省略.</span></span><br><span class="line"></span><br><span class="line">Func&lt;<span class="built_in">float</span>&gt; funD = () =&gt; &#123; <span class="keyword">return</span> <span class="number">3.1415926f</span>; &#125;; <span class="comment">// 零个参数时, 小括号不可以省略.</span></span><br><span class="line"></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; funE = (x, y, z) =&gt; &#123; <span class="keyword">return</span> x * <span class="number">2</span> + y * <span class="number">3</span> + z * <span class="number">4</span>; &#125;; <span class="comment">// 两个及以上参数时, 小括号不可以省略.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Lambda 中右侧是表达式时, 大括号必须去掉, 并且此时 <font color='red'><strong>return 也必须省略</strong></font>, 因为 return 是语句, 不是表达式.</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; funF = (x, y) =&gt; x * y; <span class="comment">// 大括号和 return 必须同时存在, 或同时去掉.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>大括号存在时, 大括号中只能写 <font color='red'><strong>语句</strong></font>. 此时称为: <strong>Lambda 语句块</strong>. 或者说当书写语句时, 必须用 <font color='red'><strong>语句块符号 { }</strong></font> 括起来.</p>
</li>
<li><p>大括号不存在时, 则只能写 <font color='red'><strong>表达式</strong></font>, 并且 <font color='red'><strong>表达式只能写一句</strong></font> . 此时称为: <strong>Lambda 表达式</strong>.</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">myDelegate = (a, b) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b).ToString();</span><br><span class="line">&#125;; <span class="comment">// Lambda 语句块</span></span><br><span class="line"></span><br><span class="line">Action action = () =&gt; Console.WriteLine(<span class="string">&quot;action&quot;</span>); <span class="comment">// Lambda 表达式</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h1><p>前面讲了委托的四种初始化方式全部都是使用了 <strong><code>=</code></strong> 运算符, 其实委托还可以通过 <strong><code>+= -=</code></strong> 运算符进行注册和取消注册, 而且可以实现多播委托.</p>
<ul>
<li><p>多播委托: <font color='red'><strong>一个委托实例一次性委托多个实例方法, 调用委托时会依次调用所有被委托的方法</strong></font>.</p>
</li>
<li><p><font color='red'><strong>委托不仅仅可以 (取消) 注册方法, 也可以 (取消) 注册委托</strong></font>!</p>
</li>
</ul>
<p>下表是 <strong><code>+</code></strong> 和 <strong><code>-</code></strong> 的运算规则:</p>
<table>
<thead>
<tr>
<th align="left">Expression</th>
<th align="left">Result</th>
</tr>
</thead>
<tbody><tr>
<td align="left">null + d1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">d1 + null</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">d1 + d2</td>
<td align="left">[d1, d2]</td>
</tr>
<tr>
<td align="left">d1 + [d2, d3]</td>
<td align="left">[d1, d2, d3]</td>
</tr>
<tr>
<td align="left">[d1, d2] + [d2, d3]</td>
<td align="left">[d1, d2, d2, d3]</td>
</tr>
<tr>
<td align="left">[d1, d2] - d1</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">[d1, d2] - d2</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">[d1, d2, d1] - d1</td>
<td align="left">[d1, d2]</td>
</tr>
<tr>
<td align="left">[d1, d2, d3] - [d1, d2]</td>
<td align="left">d3</td>
</tr>
<tr>
<td align="left">[d1, d2, d3] - [d2, d1]</td>
<td align="left">[d1, d2, d3]</td>
</tr>
<tr>
<td align="left">[d1, d2, d3, d1, d2] - [d1, d2]</td>
<td align="left">[d1, d2, d3]</td>
</tr>
<tr>
<td align="left">[d1, d2] - [d1, d2]</td>
<td align="left">null</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>委托(四) &quot;委托与事件的区别&quot; 以及 &quot;观察者模式&quot;</title>
    <url>/csharp/csharp_delegate_04.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌴前言"><a href="#🌴前言" class="headerlink" title="🌴前言"></a>🌴前言</h1><p>最开始知道委托和事件是在 SiKi 的 C# 课程上(很抱歉, 大学就只上了 C 语言课, Java 课听了一节...😅), 由于之前没有接触过类似的语法, 又或是学习单片机的时候 C 语言语法在脑海中根深蒂固了 , 听课时就像是在听天书, 再加上之后也没有使用过这方面的语法, 基本全忘记了. 之前一段时间简单的了解了一下委托和事件, 然后网上都是用 &quot;观察者模式&quot; 去讲的...然而文章中连观察者都没有仔细去讲...所以这样更晕了好嘛...😑 于是自己抽时间多看了几篇文章, 做一下总结. 先说一下观察者模式吧, 毕竟委托和事件的区别用观察者去讲真的十分合适!</p>
<h1 id="🍁声明"><a href="#🍁声明" class="headerlink" title="🍁声明"></a>🍁声明</h1><p>阅读下文需要对 &quot;委托&quot; 有基本了解, 如果未达到此基本要求, 请先打怪升级, 达到要求后再来挑战本副本! 推荐练级副本:</p>
<ol>
<li><p><a href="https://kuroha.vip/csharp/csharp_delegate_01.html">委托(一) 委托的基本用法</a></p>
</li>
<li><p><a href="https://kuroha.vip/csharp/csharp_delegate_02.html">委托(二) 委托与回调和回调函数</a></p>
</li>
<li><p><a href="https://kuroha.vip/csharp/csharp_delegate_03.html">委托(三) 委托的初始化</a></p>
</li>
</ol>
<h1 id="👀观察者模式"><a href="#👀观察者模式" class="headerlink" title="👀观察者模式"></a>👀观察者模式</h1><h2 id="模式-是什么"><a href="#模式-是什么" class="headerlink" title="&quot;模式&quot; 是什么?"></a>&quot;模式&quot; 是什么?</h2><ul>
<li>&quot;模式&quot; 这个东西和之前所学的大部分东西都不是一回事, &quot;模式&quot; 是一种套路, 对, 你没有听错, 套路, 或者说模板! 它是走在我们前面的那些码神们常年编写代码所总结出来的一种在特定场合下特别好用的代码模板. 就像是英语作文模板指导我们以怎样的结构去写英语作文一样, &quot;模式&quot; 是指导我们以一种怎样的结构去编写代码, 以达到减小编程时工作量以及减小日后维护成本的效果.</li>
</ul>
<h2 id="观察者模式的内容是什么"><a href="#观察者模式的内容是什么" class="headerlink" title="观察者模式的内容是什么?"></a>观察者模式的内容是什么?</h2><ol>
<li><p>需要描述的是一种 &quot;一对多&quot; 的依赖关系!</p>
</li>
<li><p>当 &quot;一&quot; 的一方状态发生改变时, &quot;多&quot; 的一方中的全部成员都能够收到通知!</p>
</li>
<li><p>&quot;多&quot; 的一方收到通知后, 全部的成员都会自动进行更新操作, 而非被动!</p>
</li>
</ol>
<p>这就是 &quot;观察者模式&quot; 了, &quot;一&quot; 的一方叫做 &quot;被观察者&quot;, &quot;多&quot; 的一方叫做 &quot;观察者&quot;, 也叫做: &quot;发布-订阅模型&quot;, 这时分别叫做 &quot;发布器&quot; 和 &quot;订阅器&quot;.</p>
<ul>
<li>Q: 为什么没有代码?</li>
<li>A: 因为模式只是一种套路, 一种模板, 一种思想, 自然是没有代码的! 只要代码是按照这个模板去编写的, 就可以说使用了 &quot;观察者模式&quot;.</li>
</ul>
<h2 id="观察者模式的代码实现"><a href="#观察者模式的代码实现" class="headerlink" title="观察者模式的代码实现"></a>观察者模式的代码实现</h2><p>接下来就是代码实现环节了, 一共写了 3 种 <strong><code>链表, 委托, 事件</code></strong> 代码实现, 都是使用的 csharp 语言.</p>
<p>Q: 需要记忆的代码是哪个呢?</p>
<p>A: 没有! 对, 就是没有! 真正要记忆的是前面 <strong>观察者模式的内容是什么</strong> 中所提到的 3 点. 看完代码后可不要本末倒置了哦!</p>
<p>下面代码实现的场景就是当被观察者使用 &quot;发令枪&quot; 开枪时, 观察者们全部开跑~</p>
<h3 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 被观察者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher_List</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 保存所有的观察者对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Subscriber_List&gt; subscriberList = <span class="keyword">new</span> List&lt;Subscriber_List&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进入赛道</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnterGame</span>(<span class="params">Subscriber_List subscriber</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            subscriberList.Add(subscriber);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发令枪</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartingGun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;预备~ . . . 砰! \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历所有的观察者 (这一步就是在通知每一个观察者)</span></span><br><span class="line">            <span class="keyword">foreach</span> (Subscriber_List t <span class="keyword">in</span> subscriberList)</span><br><span class="line">            &#123;</span><br><span class="line">                t.Run(); <span class="comment">// 自动更新</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 观察者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subscriber_List</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 运动员姓名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Subscriber_List</span>(<span class="params">Publisher_List publisher, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            publisher.EnterGame(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开跑</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name + <span class="string">&quot; 开跑啦~ \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program_List</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Publisher_List publisherList = <span class="keyword">new</span> Publisher_List();</span><br><span class="line">            <span class="keyword">new</span> Subscriber_List(publisherList, <span class="string">&quot;艾莉&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> Subscriber_List(publisherList, <span class="string">&quot;克里斯&quot;</span>);</span><br><span class="line"></span><br><span class="line">            publisherList.StartingGun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序输出:</span></span><br><span class="line">预备~ . . . 砰!</span><br><span class="line"></span><br><span class="line">艾莉 开跑啦~</span><br><span class="line"></span><br><span class="line">克里斯 开跑啦~</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面就是一个最简单的观察者模式, 使用链表实现.</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">实现方式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1. 一对多</td>
<td align="left">被观察者只有一个实例, 使用链表保存所有的观察者实例</td>
</tr>
<tr>
<td align="left">2. 全部通知</td>
<td align="left">在方法中遍历所有的观察者, 每一个都进行特定的操作</td>
</tr>
<tr>
<td align="left">3. 自动更新</td>
<td align="left">在 &quot;被观察者&quot; 中调用 &quot;观察者&quot; 的方法, 对外界隐藏调用逻辑</td>
</tr>
</tbody></table>
<p>再来看一下 Main 方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Publisher_List publisherList = <span class="keyword">new</span> Publisher_List();</span><br><span class="line">    <span class="keyword">new</span> Subscriber_List(publisherList, <span class="string">&quot;艾莉&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> Subscriber_List(publisherList, <span class="string">&quot;克里斯&quot;</span>);</span><br><span class="line"></span><br><span class="line">    publisherList.StartingGun();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时对外界的 Main 方法而言, 我仅仅开了一下 &quot;发令枪&quot;, 艾莉和克里斯中的 Run 方法就 <font color='red'><strong>自动</strong></font> 被调用了. 如果不这么写, Main 方法就必须先调用发令枪方法, 然后再调用艾莉和克里斯的 Run 方法.</p>
<h3 id="委托实现"><a href="#委托实现" class="headerlink" title="委托实现"></a>委托实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Publisher publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">            <span class="keyword">new</span> Subscriber(publisher, <span class="string">&quot;艾莉&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> Subscriber(publisher, <span class="string">&quot;克里斯&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发令枪</span></span><br><span class="line">            publisher.StartingGun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 被观察者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 委托, 保存所有的观察者</span></span><br><span class="line">        <span class="keyword">public</span> Action PublisherDelegate;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发令枪</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartingGun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;预备~ . . . 砰! \n&quot;</span>);</span><br><span class="line">            PublisherDelegate?.Invoke(); <span class="comment">// 判断 PublisherDelegate 是否是空, 如果不是空, 则调用里面的 Invoke 方法.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 观察者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subscriber</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 运动员姓名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;publisher&quot;&gt;</span>发布器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>订阅器名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Subscriber</span>(<span class="params">Publisher publisher, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            publisher.PublisherDelegate += Run; <span class="comment">// 自动注册</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开跑</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name + <span class="string">&quot; 开跑啦~ \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序输出:</span></span><br><span class="line">预备~ . . . 砰!</span><br><span class="line"></span><br><span class="line">艾莉 开跑啦~</span><br><span class="line"></span><br><span class="line">克里斯 开跑啦~</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用委托实现观察者模式与使用链表时的不同"><a href="#使用委托实现观察者模式与使用链表时的不同" class="headerlink" title="使用委托实现观察者模式与使用链表时的不同"></a>使用委托实现观察者模式与使用链表时的不同</h4><ol>
<li><p>不再使用链表保存所有的观察者, 而是使用委托的多播特性进行保存.</p>
</li>
<li><p>通知所有观察者的步骤不再使用遍历, 而是使用委托的多播特性进行逐个通知.</p>
</li>
<li><p>注册观察者时不再使用链表的 Add() 方法, 而是使用委托的 <strong>+&#x3D;</strong> 和 <strong>-&#x3D;</strong>.</p>
</li>
</ol>
<p>直接使用委托实现观察者模式有几个不安要素:</p>
<ol>
<li><p>如果被观察者 Publisher 中的委托是 public 修饰, 那么外部便可以直接访问, 此时如果外部代码中使用了 <strong>&#x3D;</strong> 进行委托的注册, 那么委托中已有的注册将被全部清空, 这种隐患是十分恐怖的.</p>
</li>
<li><p>如果被观察者 Publisher 中的委托是 public 修饰, 那么外部便可以直接调用此委托, 此时观察者们便无法收到任何通知, 这个隐患同样是致命的.</p>
</li>
</ol>
<p>使用事件实现观察者模式便解决了上面两个致命隐患.</p>
<h3 id="事件实现"><a href="#事件实现" class="headerlink" title="事件实现"></a>事件实现</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Publisher publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">            Subscriber subscriberA = <span class="keyword">new</span> Subscriber(publisher, <span class="string">&quot;艾莉&quot;</span>);</span><br><span class="line">            Subscriber subscriberB = <span class="keyword">new</span> Subscriber(publisher, <span class="string">&quot;克里斯&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发令枪</span></span><br><span class="line">            publisher.StartingGun();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对事件直接赋值 (不允许)</span></span><br><span class="line">            publisher.PublisherEvent = subscriberA.Run;</span><br><span class="line">            <span class="comment">// 对委托直接赋值 (允许)</span></span><br><span class="line">            publisher.PublisherDelegate = subscriberA.Run;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 外部直接调用事件 (不允许)</span></span><br><span class="line">            publisher.PublisherEvent();</span><br><span class="line">            <span class="comment">// 外部直接调用委托 (允许)</span></span><br><span class="line">            publisher.PublisherDelegate();</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 被观察者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Publisher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 事件, 保存所有的观察者</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action PublisherEvent;</span><br><span class="line">        <span class="keyword">public</span> Action PublisherDelegate;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发令枪</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartingGun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;预备~ . . . 砰! \n&quot;</span>);</span><br><span class="line">            PublisherEvent?.Invoke(); <span class="comment">// 判断 PublisherEvent 是否是空, 如果不是空, 则调用里面的 Invoke 方法.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 观察者</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subscriber</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 运动员姓名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;publisher&quot;&gt;</span>发布器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>订阅器名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Subscriber</span>(<span class="params">Publisher publisher, <span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            publisher.PublisherEvent += Run; <span class="comment">// 自动注册</span></span><br><span class="line">            publisher.PublisherEvent = Run;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开跑</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name + <span class="string">&quot; 开跑啦~ \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码直接粘贴到 VS 中其实是报错的, 其中第 18 行, 第 23 行以及第 65 行会报错! 报错信息是一样的:</p>
<p><code>CS0070  事件 &quot;Publisher.PublisherEvent&quot; 只能出现在 += 或 -= 的左边(从类型 &quot;Publisher&quot; 中使用时除外)</code></p>
<p>从这里也就可以得出结论, 委托和事件的不同.</p>
<h1 id="🍀委托和事件的异同"><a href="#🍀委托和事件的异同" class="headerlink" title="🍀委托和事件的异同"></a>🍀委托和事件的异同</h1><ol>
<li><p>一个使用 public 修饰的委托实例, 在声明类的外部可以直接调用. 而事件即使修饰为 public, 也仅能在声明类内部调用, 外部调用时编译器会直接报错, 发现隐患.</p>
</li>
<li><p>委托可以使用 &#x3D; 进行赋值, 但是事件不可以, 无论任何时候, 事件都仅能使用 +&#x3D; 和 -&#x3D; 进行注册, 使用 &#x3D; 时编译器会直接报错, 发现隐患.</p>
</li>
<li><p>除此以外, 委托和事件一致.</p>
</li>
</ol>
<h1 id="🌈参考链接"><a href="#🌈参考链接" class="headerlink" title="🌈参考链接"></a>🌈参考链接</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9kZXNpZ24tcGF0dGVybi9vYnNlcnZlci1wYXR0ZXJuLmh0bWw=">菜鸟教程 - 观察者模式<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXNpZ24tcGF0dGVybnMucmVhZHRoZWRvY3MuaW8vemhfQ04vbGF0ZXN0L2JlaGF2aW9yYWxfcGF0dGVybnMvb2JzZXJ2ZXIuaHRtbA==">Graphic Design Patterns - 观察者模式<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2tsbGRvZy9hcmNoaXZlLzIwMTIvMDEvMTcvMjMyNDIyOC5odG1s">C# 委托与事件区别简单总结<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 中 Thread 和 Foreach</title>
    <url>/csharp/csharp_foreach.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌴前言"><a href="#🌴前言" class="headerlink" title="🌴前言"></a>🌴前言</h1><p>最近一个项目中需要用到多线程, 而在研究多线程的过程中发现了 foreach 的一个特性.</p>
<h1 id="❓问题"><a href="#❓问题" class="headerlink" title="❓问题"></a>❓问题</h1><p>网上有一种说法, 如下代码会出现一个问题, 导致最后输出的结果为: <code>五个 555 字符串</code>.</p>
<p>理由和之前说过的 &quot;闭包和委托&quot; 结合容易引起的问题一样, 下面是一个博主的解释:</p>
<blockquote>
<p>由于被置于 ThreadPool 中的操作时异步的, 还没有来的及执行的时候, inFor 变量已经被循环改变, 等到 ThreadPool 执行的时候, inFor 已经是最后一个值了, 也就是 555, 所以最终的结果是输出了五次 555.</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MultiTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> inFor <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Threading.ThreadPool.QueueUserWorkItem(state =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            DebugUtil.Log(<span class="string">$&quot;&lt;color=&#x27;red&#x27;&gt;<span class="subst">&#123;inFor&#125;</span>&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="✨结论"><a href="#✨结论" class="headerlink" title="✨结论"></a>✨结论</h1><p>而实际经过实验之后发现, 目前 C# 和 Unity 中都不会再出现这种问题, 下面是我实验的代码:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MultiTest</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不使用外部变量</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> inFor <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Threading.ThreadPool.QueueUserWorkItem(state =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            DebugUtil.Log(<span class="string">$&quot;&lt;color=&#x27;red&#x27;&gt;<span class="subst">&#123;inFor&#125;</span>&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用外部变量</span></span><br><span class="line">    <span class="built_in">int</span> outFor;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> inFor <span class="keyword">in</span> list)</span><br><span class="line">    &#123;</span><br><span class="line">        outFor = inFor;</span><br><span class="line">        System.Threading.ThreadPool.QueueUserWorkItem(state =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            DebugUtil.Log(<span class="string">$&quot;&lt;color=&#x27;yellow&#x27;&gt;<span class="subst">&#123;outFor&#125;</span>&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终得到的结果是:</p>
<p><img data-src="/images/csharp/foreach.png" alt="foreach"></p>
<p>可以看到, 当仅使用 foreach 时得到的结果是完全正确的, 只有当使用一个外部变量的时候才会出现闭包机制引发的 Bug, 因此可得出表现上的结论:</p>
<p><font color='red'>foreach 中的临时变量从表现上来看可以认作每次循环后都是一个新的变量</font>.</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 中形形色色的参数</title>
    <url>/csharp/csharp_params.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="必选参-与-可选参-与-不定参"><a href="#必选参-与-可选参-与-不定参" class="headerlink" title="必选参 与 可选参 与 不定参"></a>必选参 与 可选参 与 不定参</h1><p>CSharp 中参数有必选参, 可选参和不定参, 用以实现更加灵活的方法调用.</p>
<h2 id="必选参"><a href="#必选参" class="headerlink" title="必选参"></a>必选参</h2><p>通常用的方法传参就是必选参. 只要方法有参数, 调用这个方法时就必须传参.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>&#123;</span><br><span class="line">    Debug.Log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可选参"><a href="#可选参" class="headerlink" title="可选参"></a>可选参</h2><p>可选参对外表现为: 当外部调用方法时, 参数可以传也可以不传~ 哈哈, 任不任性?</p>
<p>那可选参是怎么编写的呢? <font color='red'>可选参就是给参数一个默认值</font>, 此时参数就变成了可选参. 可选参也是有语法限制的, <font color='red'>可选参必须放到所有必选参的后面, 不定参不属于必选参</font>.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> star = <span class="string">&quot;default value&quot;</span></span>)</span>&#123;</span><br><span class="line">    Debug.Log(str + star);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用具有可选参的方法时, 可以直接和正常的方法一样进行传参, 打算使用默认值的可选参可以直接省略.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">Test(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">Test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>但是这里有一个问题, 可选参的语法规则只限制了可选参必须在必选参的后面, 但是并没有限制可选参的数量, 如果有好多可选参, 而我想要只传递特定的参数的时候, 怎么办呢?</p>
<p>比如下面的方法我想使用 star1 的默认值, star2 我想改为 &quot;, 你早就没了&quot;, 咋传参呢?</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">string</span> str, <span class="built_in">string</span> star1 = <span class="string">&quot;我没带腰带&quot;</span>, <span class="built_in">string</span> star2 = <span class="string">&quot;star2&quot;</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(str + star1 + star2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就得使用可选参的另一种调用方式: <code>参数名: 参数值</code>.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Test(<span class="string">&quot;要不是因为&quot;</span>, star2: <span class="string">&quot;, 你早就没了&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="不定参"><a href="#不定参" class="headerlink" title="不定参"></a>不定参</h2><p>编写程序的时候, 有时会有这样的场景: 我需要写一个工具方法用来处理各种数据, 数据使用参数的形式传入方法, 但是问题在于每次我要传入的数据的数量都是不一致的, 这次可能传入 4 个, 下次可能需要 5 个, 甚至有时需要 10 个也说不定, 那这可咋办呢?</p>
<p>在没有不定参之前, 只能使用数组来传输, 参数为一个数组, 传入数据的时候先将数据整合为一个数组, 然后整体传入, 但是如果我就是想逐个传入呢? 就像 <code>string.Format(&quot;&#123;0&#125;, &#123;1&#125;, &#123;2&#125;&quot;, &quot;AAA&quot;, &quot;BBB&quot;, &quot;CCC&quot;);</code> 一样, 后面的参数数量不确定, 并且传入的时候是逐个传入的.</p>
<p>此时就需要语法糖-不定参啦! 不定参的对外表现就是可以传入<font color='red'>同类型</font>的数据任意多个, 数量是不确定的, 传入的时候参数也是允许逐个传入的.</p>
<p>不定参使用 <code>params</code> 关键字和 <code>数组</code> 实现. 切记必须是 <font color='red'>数组</font> 类型.</p>
<p>即从外部看来, 参数传入时是逐个传入的, 但是实际在传入之后会被整合为一个数组进行处理, 这也就是为什么数量可以不确定, 但类型必须是同类型的原因.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不定参方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseParams</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] stars</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> star <span class="keyword">in</span> stars)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(star);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 (同类型, 数量不定, 可以逐个传入, 可以整体作为数组传入)</span></span><br><span class="line">UseParams();</span><br><span class="line">UseParams(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">UseParams(<span class="string">&quot;AAA&quot;</span>, <span class="string">&quot;BBB&quot;</span>);</span><br><span class="line">UseParams(<span class="string">&quot;AAA&quot;</span>, <span class="string">&quot;BBB&quot;</span>, <span class="string">&quot;CCC&quot;</span>);</span><br><span class="line">UseParams(<span class="keyword">new</span>[]&#123;<span class="string">&quot;AAA&quot;</span>, <span class="string">&quot;BBB&quot;</span>, <span class="string">&quot;CCC&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>另外不定参也有语法要求, 不定参作为参数时, 必须放置在整个参数列表的最后.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="可选参-1"><a href="#可选参-1" class="headerlink" title="可选参:"></a>可选参:</h3><ol>
<li>参数具有默认值.</li>
<li>传参时可传可不传.</li>
<li>可同时定义多个可选参.</li>
<li>可以使用 &quot;参数名: 参数值&quot; 进行指定参数传值.</li>
</ol>
<h3 id="不定参-1"><a href="#不定参-1" class="headerlink" title="不定参"></a>不定参</h3><ol>
<li>参数必须同类型.</li>
<li>参数数量不确定, 且允许逐个传入.</li>
<li>1 个参数列表中不定参最多只能有 1 个.</li>
<li>使用 params 和 [] 实现. (是否仅此一种待考究, 目前暂时认为唯一方式)</li>
</ol>
<h3 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h3><p><font color='red'><strong>( 必选参, 可选参, 不定参 )</strong></font></p>
<h1 id="this-修饰的参数"><a href="#this-修饰的参数" class="headerlink" title="this 修饰的参数"></a>this 修饰的参数</h1><p>无论是带有默认值的可选参还是使用 params 关键字的不定参, 它们的本质还是为了方法的参数服务的, 但是还有一种是使用了 this 关键字进行修饰的参数.</p>
<p>使用 this 修饰更多的是为了类而服务, 目的是为了对类进行方法扩展.</p>
<p>目前理解为: 使用 this 来实现 <font color='red'>扩展方法</font>, 对特定的<font color='red'><strong>非静态类</strong></font>进行行为补充. 切记是非静态类.</p>
<p>比如有一个非静态类已经封装好了, 我们无法去修改类文件, 那么此时想要对其增加行为的话就可以使用这个语法.</p>
<p>下面是一个 Student 类, 这个类文件已经无法查看与修改.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简易类, 举例用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时在另一个地方使用这个类的一个实例, 需要增加一个特定的功能, 就可以这样写:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先为这个 Student 添加想要的功能</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NewAction</span>(<span class="params"><span class="keyword">this</span> Student student, <span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">$&quot;<span class="subst">&#123;student.name&#125;</span> : <span class="subst">&#123;student.id&#125;</span>, <span class="subst">&#123;str&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后就可以使用类的实例直接调用</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student &#123;name = <span class="string">&quot;Kuroha&quot;</span>, id = <span class="string">&quot;0001&quot;</span>&#125;;</span><br><span class="line">student.NewAction(<span class="string">&quot;就是我啦!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>此语法还可以对 CSharp 原始类型进行扩展, 比如 <code>int</code>, <code>string</code> 等. 扩展方法也是具有语法限制的, 都放在总结里面了.</p>
<ol>
<li>使用 this 可以实现特定类型的方法扩展.</li>
<li>this 修饰的参数并不需要主动传参, 这个参数的值就是调用时类实例的值.</li>
<li>扩展方法只能在<font color='red'>非嵌套, 非泛型的静态类</font>内部才能定义.</li>
<li>扩展方法必须是静态方法. (毕竟在静态类中嘛)</li>
<li>调用时必须使用<font color='red'>实例</font>进行调用. (虽然定义的时候是一个静态方法)</li>
<li>this 修饰的参数必须位于参数列表的<font color='red'>第 1 个</font>! (正好和 params 相反)</li>
</ol>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 迭代器</title>
    <url>/csharp/csharp_ienumerator.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌴前言"><a href="#🌴前言" class="headerlink" title="🌴前言"></a>🌴前言</h1><p>在之前的 csharp 学习过程中学习了索引器, 这样我自定义类中的数据也就可以使用方括号的形式进行访问啦, 同时我还看到了一个 &quot;迭代器&quot; 的词汇, 这是啥东西啊? 网上一查, 标志性词汇是 &quot;IEnumerable&quot; 和 &quot;IEnumerator&quot;...这个我熟悉啊, Unity 的协程 &#39;Coroutines&#39; 技术中也使用到了这个词汇, 那赶紧看看其中的知识吧.</p>
<h1 id="🍀C-1-0-中的迭代器"><a href="#🍀C-1-0-中的迭代器" class="headerlink" title="🍀C# 1.0 中的迭代器"></a>🍀C# 1.0 中的迭代器</h1><p>C# 1.0 中, 迭代模式是通过两个接口实现的: <strong>IEnumerable</strong> 和 <strong>IEnumerator</strong>.</p>
<ol>
<li><p>&quot;正确实现了 IEnumerable 接口&quot; 或者 &quot;具有完全符合特征的方法&quot; 的类型可以被迭代访问, 比如 C# 内置的数组, 链表类型, 这些都可以被迭代访问, 它们都实现了 IEnumerable 接口.</p>
<p> <img data-src="/images/csharp/ienumerator.png" alt="内置可被迭代类型"></p>
</li>
</ol>
<p>但是正确实现了 IEnumerable 接口的并不是迭代器, IEnumerable 接口中只有一个需要实现的方法 <strong>GetEnumerator()</strong>, 这个方法作用是会返回一个迭代器, 并不是实现一个迭代器.</p>
<ol>
<li>正确实现了 IEnumerator 接口的类型才是迭代器.</li>
</ol>
<h2 id="C-1-0-中如何自己实现一个可迭代访问的类型"><a href="#C-1-0-中如何自己实现一个可迭代访问的类型" class="headerlink" title="C# 1.0 中如何自己实现一个可迭代访问的类型"></a>C# 1.0 中如何自己实现一个可迭代访问的类型</h2><p>C# 1.0 中, 想要实现一个可以被迭代访问的类型, 只要让这个类型正确实现 IEnumerable 接口即可. IEnumerable 接口中只有一个需要实现的方法 <strong>GetEnumerator()</strong>, 没有参数, 返回值类型是 <code>IEnumerator</code>. 比如实现一个可以迭代访问的 CharList 类型.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 可迭代类型 CharList</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharList</span> : <span class="title">IEnumerable</span> <span class="comment">// 继承接口 IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> charArray;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>枚举数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharList</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        charArray = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> IEnumerable 中的 GetEnumerator 方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CharEnumerator(charArray); <span class="comment">// new 一个迭代器并返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-1-0-中如何自己实现一个迭代器类型"><a href="#C-1-0-中如何自己实现一个迭代器类型" class="headerlink" title="C# 1.0 中如何自己实现一个迭代器类型"></a>C# 1.0 中如何自己实现一个迭代器类型</h2><p>C# 1.0 中, 想要实现一个迭代器类型, 只要让这个类型正确实现 IEnumerator 接口即可. IEnumerator 接口中需要实现的内容有:</p>
<blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerator</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 摘要:</span></span><br><span class="line">   <span class="comment">//     获取集合中位于枚举数当前位置的元素。</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 返回结果:</span></span><br><span class="line">   <span class="comment">//     集合中位于枚举数当前位置的元素。</span></span><br><span class="line">   <span class="built_in">object</span> Current &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 摘要:</span></span><br><span class="line">   <span class="comment">//     将枚举数推进到集合的下一个元素。</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 返回结果:</span></span><br><span class="line">   <span class="comment">//     如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 异常:</span></span><br><span class="line">   <span class="comment">//   T:System.InvalidOperationException:</span></span><br><span class="line">   <span class="comment">//     创建枚举器后，已修改该集合。</span></span><br><span class="line">   <span class="function"><span class="built_in">bool</span> <span class="title">MoveNext</span>()</span>;</span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 摘要:</span></span><br><span class="line">   <span class="comment">//     将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">// 异常:</span></span><br><span class="line">   <span class="comment">//   T:System.InvalidOperationException:</span></span><br><span class="line">   <span class="comment">//     创建枚举器后，已修改该集合。</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>()</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ol>
<li><p>Current 属性. 必须是 public 修饰, 必须返回 object 类型, 必须实现 Get 器, 必须遵守的 Get 器规则: 获取当前索引位置的值.</p>
</li>
<li><p>MoveNext 方法. 必须是 public 修饰, 必须返回 bool 类型. 必须遵守的返回值规则: 如果可以获取下一个值, 返回 true, 如果无法或许下一个值, 则返回 false.</p>
</li>
<li><p>Reset 方法. 必须是 public 修饰, 必须返回 void 类型. 必须遵守的逻辑规则: 将此时的索引位置设置为 <font color='red'><strong>第一个元素之前</strong></font>.</p>
</li>
</ol>
<p>只有同时满足了上面全部要求, 才算是正确实现了一个迭代器.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 迭代器 CharEnumerator</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharEnumerator</span> : <span class="title">IEnumerator</span> <span class="comment">// 继承 IEnumerator 接口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> charArray;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 索引位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> currentIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>枚举数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharEnumerator</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentIndex = <span class="number">-1</span>; <span class="comment">// 初始化索引位置</span></span><br><span class="line">        charArray = str; <span class="comment">// 初始化枚举数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> IEnumerator 中的 Current 属性</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> charArray[currentIndex]; <span class="comment">// 获取当前索引位置的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> IEnumerator 中的 MoveNext 方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果可以获取下一个值, 返回 true, 如果无法或许下一个值, 则返回 false.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ++currentIndex &lt; charArray.Length; <span class="comment">// 如果 &quot;索引位置&quot; 自增后小于枚举数据长度, 说明可以获取下一个值, 返回 true, 否则返回 false.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> IEnumerator 中的 Reset 方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentIndex = <span class="number">-1</span>; <span class="comment">// 将索引位置设置为第一个元素之前</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码段实现了一个最基础的迭代器, 这样 CharList 这个类型便可以使用 foreach 进行迭代访问了.</p>
<h1 id="✨C-2-0-中的迭代器"><a href="#✨C-2-0-中的迭代器" class="headerlink" title="✨C# 2.0 中的迭代器"></a>✨C# 2.0 中的迭代器</h1><p>C# 2.0 中便可以使用 <code>yield return</code> 来简化迭代器的实现. 这样相比 1.0, 我们直接可以省略一个 CharEnumerator 类的实现, 方便了很多.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharList</span> : <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> charArray;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>枚举数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharList</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        charArray = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> IEnumerable 中的 GetEnumerator 方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; charArray.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> charArray[i]; <span class="comment">// 使用 yield return 构造一个迭代器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="🦄迭代器的执行顺序"><a href="#🦄迭代器的执行顺序" class="headerlink" title="🦄迭代器的执行顺序"></a>🦄迭代器的执行顺序</h1><p>将 C# 1.0 迭代器例子补全 (本文最后附有已补全的代码), 并在一个 foreach 中进行逐步调试就可以看到迭代访问时的代码执行顺序.</p>
<p><code>foreach (var item in charList)</code></p>
<ol>
<li><p>charList: 调用 GetEnumerator 方法.</p>
</li>
<li><p>in: 调用 MoveNext 方法.</p>
</li>
<li><p>item: 获取 Current 属性.</p>
</li>
</ol>
<p>但是如果我们没有使用 C# 1.0 提供的形式实现迭代器, 而是使用了 C# 2.0 中的 yield return 实现迭代器, 那么此时迭代器的执行顺序又是什么呢?</p>
<p>我们来做一个例子测试一下, 先创建一个类 <code>CreateEnumerable</code>, 这个类可以返回一个可迭代器类型 <code>IEnumerable&lt;int&gt;</code>, 之后使用 <code>GetEnumerator</code> 方法获取迭代器, 然后使用 while 循环手动调用迭代器的 <code>MoveNext</code> 方法以及 <code>Current</code> 属性, 并输出执行顺序.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">int</span> runIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> Padding = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;\t&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">CreateEnumerable</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : &#123;1&#125;Start of CreateEnumerable&quot;</span>, runIndex, Padding); runIndex++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : &#123;1&#125;\tBefore yield &#123;2&#125;&quot;</span>, runIndex, Padding, i); runIndex++;</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : &#123;1&#125;\tAfter yield&quot;</span>, runIndex, Padding); runIndex++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : &#123;1&#125;Yielding final value&quot;</span>, runIndex, Padding); runIndex++;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : &#123;1&#125;End of CreateEnumerable()&quot;</span>, runIndex, Padding); runIndex++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建一个可以迭代访问的实例</span></span><br><span class="line">            IEnumerable&lt;<span class="built_in">int</span>&gt; iterable = CreateEnumerable();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取这个实例中的迭代器</span></span><br><span class="line">            IEnumerator&lt;<span class="built_in">int</span>&gt; iterator = iterable.GetEnumerator();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : Starting to iterate&quot;</span>, runIndex); runIndex++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : Calling MoveNext()...&quot;</span>, runIndex); runIndex++;</span><br><span class="line">                <span class="built_in">bool</span> result = iterator.MoveNext(); <span class="comment">// 调用迭代器的 MoveNext 方法</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : ...MoveNext result=&#123;1&#125;&quot;</span>, runIndex, result); runIndex++;</span><br><span class="line">                <span class="keyword">if</span> (!result) <span class="keyword">break</span>;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : Fetching Current...&quot;</span>, runIndex); runIndex++;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0,3&#125; : ...Current result=&#123;1&#125;&quot;</span>, runIndex, iterator.Current); runIndex++; <span class="comment">// 获取迭代器的 Current 属性</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="attr">0 :</span> <span class="string">Starting</span> <span class="string">to</span> <span class="string">iterate</span></span><br><span class="line"> <span class="attr">1 :</span> <span class="string">Calling</span> <span class="string">MoveNext()...</span></span><br><span class="line"> <span class="attr">2 :</span>                           <span class="string">Start</span> <span class="string">of</span> <span class="string">CreateEnumerable</span></span><br><span class="line"> <span class="attr">3 :</span>                                   <span class="string">Before</span> <span class="string">yield</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">4 :</span> <span class="string">...MoveNext</span> <span class="string">result=True</span></span><br><span class="line"> <span class="attr">5 :</span> <span class="string">Fetching</span> <span class="string">Current...</span></span><br><span class="line"> <span class="attr">6 :</span> <span class="string">...Current</span> <span class="string">result=0</span></span><br><span class="line"> <span class="attr">7 :</span> <span class="string">Calling</span> <span class="string">MoveNext()...</span></span><br><span class="line"> <span class="attr">8 :</span>                                   <span class="string">After</span> <span class="string">yield</span></span><br><span class="line"> <span class="attr">9 :</span>                                   <span class="string">Before</span> <span class="string">yield</span> <span class="number">1</span></span><br><span class="line"><span class="attr">10 :</span> <span class="string">...MoveNext</span> <span class="string">result=True</span></span><br><span class="line"><span class="attr">11 :</span> <span class="string">Fetching</span> <span class="string">Current...</span></span><br><span class="line"><span class="attr">12 :</span> <span class="string">...Current</span> <span class="string">result=1</span></span><br><span class="line"><span class="attr">13 :</span> <span class="string">Calling</span> <span class="string">MoveNext()...</span></span><br><span class="line"><span class="attr">14 :</span>                                   <span class="string">After</span> <span class="string">yield</span></span><br><span class="line"><span class="attr">15 :</span>                                   <span class="string">Before</span> <span class="string">yield</span> <span class="number">2</span></span><br><span class="line"><span class="attr">16 :</span> <span class="string">...MoveNext</span> <span class="string">result=True</span></span><br><span class="line"><span class="attr">17 :</span> <span class="string">Fetching</span> <span class="string">Current...</span></span><br><span class="line"><span class="attr">18 :</span> <span class="string">...Current</span> <span class="string">result=2</span></span><br><span class="line"><span class="attr">19 :</span> <span class="string">Calling</span> <span class="string">MoveNext()...</span></span><br><span class="line"><span class="attr">20 :</span>                                   <span class="string">After</span> <span class="string">yield</span></span><br><span class="line"><span class="attr">21 :</span>                           <span class="string">Yielding</span> <span class="string">final</span> <span class="string">value</span></span><br><span class="line"><span class="attr">22 :</span> <span class="string">...MoveNext</span> <span class="string">result=True</span></span><br><span class="line"><span class="attr">23 :</span> <span class="string">Fetching</span> <span class="string">Current...</span></span><br><span class="line"><span class="attr">24 :</span> <span class="string">...Current</span> <span class="string">result=-1</span></span><br><span class="line"><span class="attr">25 :</span> <span class="string">Calling</span> <span class="string">MoveNext()...</span></span><br><span class="line"><span class="attr">26 :</span>                           <span class="string">End</span> <span class="string">of</span> <span class="string">CreateEnumerable()</span></span><br><span class="line"><span class="attr">27 :</span> <span class="string">...MoveNext</span> <span class="string">result=False</span></span><br></pre></td></tr></table></figure>

<p>从输出结果中可以看出使用 yield return 所创建的迭代器的运行步骤如下.</p>
<ol>
<li><p>直到第一次执行 <code>MoveNext</code> 方法时, 程序才会进入到 <code>CreateEnumerable</code> 方法中执行.</p>
</li>
<li><p>之后在方法 CreateEnumerable 中, 遇到 <code>yield return</code> 时会跳出方法, 回到之前的 MoveNext 处, 使 MoveNext 返回 <code>true</code>, 并继续向下执行.</p>
</li>
<li><p>直到经由 while 循环再次遇到 MoveNext 方法时, 程序便会再次进入 CreateEnumerable 方法, 并且是从上次跳出方法的位置, 即 yield return 位置处继续向下执行 for 循环.</p>
</li>
<li><p>最后一次执行 MoveNext 方法时, 程序进入 CreateEnumerable 方法, 但是此时 CreateEnumerable 方法中已经没有可执行的 yield return 语句了, 于是运行完 CreateEnumerable 方法的最后一条语句后跳出 CreateEnumerable 方法, 使 MoveNext 返回 <code>false</code>, 并继续向下执行.</p>
</li>
<li><p>遇到 break 跳出 while 循环, 程序结束.</p>
</li>
</ol>
<p>从 CreateEnumerable 内部来看, yield return 相当于暂时退出了方法去执行另一段代码, 另一端代码执行完之后, 再回到 yield return 的位置继续执行.</p>
<h1 id="yield-break-退出迭代器"><a href="#yield-break-退出迭代器" class="headerlink" title="yield break 退出迭代器"></a>yield break 退出迭代器</h1><p>一般情况下, <code>return</code> 的作用是用于返回给调用者方法的结果或者结果一个方法的运行, 并在返回数值或者结束方法运行之前运行 <code>finally</code> 中的语句.</p>
<p>在返回值为 IEnumerable&lt;&gt; 类型的方法中, 如果想快速退出方法, 可以使用 <code>yield break</code>.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">CountWithTimeLimit</span>(<span class="params">DateTime limit</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (DateTime.Now &gt;= limit)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Finally: Stopping&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line">        DateTime stopTime = DateTime.Now.AddSeconds(<span class="number">2</span>); <span class="comment">// 获取 2 秒后的时间</span></span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Start of Main&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> index <span class="keyword">in</span> program.CountWithTimeLimit(stopTime))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\tReceived &#123;0&#125;&quot;</span>, index);</span><br><span class="line"></span><br><span class="line">            System.Threading.Thread.Sleep(<span class="number">300</span>); <span class="comment">// 毫秒</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;End of Main&quot;</span>);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">Start</span> <span class="string">of</span> <span class="string">Main</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">1</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">2</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">3</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">4</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">5</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">6</span></span><br><span class="line">        <span class="string">Received</span> <span class="number">7</span></span><br><span class="line"><span class="attr">Finally:</span> <span class="string">Stopping</span></span><br><span class="line"><span class="string">End</span> <span class="string">of</span> <span class="string">Main</span></span><br></pre></td></tr></table></figure>

<p>可以看出, <code>yield return</code> 只是暂时离开方法, 到另一个位置执行其他的代码, 并不会执行 finally 语句块, 而 <code>yield break</code> 则直接转而执行了 finally 语句块中的语句, 并彻底结束了 foreach 的运行.</p>
<h1 id="🍒参考文献"><a href="#🍒参考文献" class="headerlink" title="🍒参考文献"></a>🍒参考文献</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2lsYmVyMjAxMy9wLzQyOTk1MjkuaHRtbA==">C#迭代器<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="🙄代码"><a href="#🙄代码" class="headerlink" title="🙄代码"></a>🙄代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            CharList charList = <span class="keyword">new</span> CharList(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> charList)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 可迭代类型 CharList</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharList</span> : <span class="title">IEnumerable</span> <span class="comment">// 继承接口 IEnumerable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 枚举数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> charArray;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>枚举数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CharList</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            charArray = str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> IEnumerable 中的 GetEnumerator 方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CharEnumerator(charArray); <span class="comment">// new 一个迭代器并返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 迭代器 CharEnumerator</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharEnumerator</span> : <span class="title">IEnumerator</span> <span class="comment">// 继承 IEnumerator 接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 枚举数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> charArray;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 索引位置</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> currentIndex;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span>枚举数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CharEnumerator</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            currentIndex = <span class="number">-1</span>; <span class="comment">// 初始化索引位置</span></span><br><span class="line">            charArray = str; <span class="comment">// 初始化枚举数据</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> IEnumerator 中的 Current 属性</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> charArray[currentIndex]; <span class="comment">// 获取当前索引位置的值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> IEnumerator 中的 MoveNext 方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果可以获取下一个值, 返回 true, 如果无法或许下一个值, 则返回 false.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ++currentIndex &lt; charArray.Length; <span class="comment">// 如果 &quot;索引位置&quot; 自增后小于枚举数据长度, 说明可以获取下一个值, 返回 true, 否则返回 false.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> IEnumerator 中的 Reset 方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            currentIndex = <span class="number">-1</span>; <span class="comment">// 将索引位置设置为第一个元素之前</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 垃圾回收</title>
    <url>/csharp/csharp_garbagecollect.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌴前言"><a href="#🌴前言" class="headerlink" title="🌴前言"></a>🌴前言</h1><p>网上关于 Garbage Collect 的文章已多如牛毛, 所以这里主要说一下我遇到的问题和 GC 使用方面的一些注意事项以及自己对垃圾回收中几个方法的理解.</p>
<p>[<strong>注</strong>] 以下 GC 的含义均为 : Garbage Collect.</p>
<h1 id="🍀-NET的-GC-机制"><a href="#🍀-NET的-GC-机制" class="headerlink" title="🍀.NET的 GC 机制"></a>🍀.NET的 GC 机制</h1><p>先说一下 .Net 上的 GC 机制:</p>
<ol>
<li><p>GC 并不是能自动释放所有的资源, 它<font color='red'><strong>只能自动释放托管资源</strong></font> .</p>
</li>
<li><p>GC 并不是实时回收内存的, 具体回收内存的时间由 GC 自身的算法控制.</p>
</li>
</ol>
<h1 id="🥝托管资源和非托管资源"><a href="#🥝托管资源和非托管资源" class="headerlink" title="🥝托管资源和非托管资源"></a>🥝托管资源和非托管资源</h1><p>这两个具体怎么定义的没去查, 只说一下 GC 对待他们的区别.</p>
<h2 id="托管资源"><a href="#托管资源" class="headerlink" title="托管资源"></a>托管资源</h2><p><strong>.NET 可以自动释放托管资源并回收其内存, 不需要人工干预</strong>.</p>
<p>这句话的意思就是说当我们写程序时, 创建了一个托管资源, 我们使用了一段时间后就不用了, 此时我们并不需要告诉程序: &quot;这个资源已经用完了, 一会有空了的时候帮我回收一下这些内存, thank you!&quot;, .NET 会自动判断其是否已经不再使用, 如果 .NET 判断其确实已经不再使用了, 便会自动将其占用的内存回收.</p>
<h2 id="非托管资源"><a href="#非托管资源" class="headerlink" title="非托管资源"></a>非托管资源</h2><p><strong>.NET 不会自动回收非托管资源, 如需回收, 需要提前通知</strong>.</p>
<p>常见的非托管资源: 文件, 字体, 窗口, 网络连接, 数据库连接, 画刷, 图标等.</p>
<p>上面那句话的意思就是说当我们写程序时, 创建了一个非托管资源, 我们使用了一段时间后就不用了, 此时我们就必须告诉程序: &quot;这个我用完了, 有空了一定要记得回收一下这块内存哈! thanks!&quot;. 不然的话, 那个非托管资源就会一直被我们的程序占用. 即使每过一段时间 .NET 都会来内存处收垃圾, 但是 .NET 永远也不知道这个资源已经成为垃圾了, 因为我们并没有告诉他.</p>
<p>这就是 .NET 对待两种资源的态度区别.</p>
<h1 id="🌼我们如何告诉-NET-非托管资源已经用完了呢"><a href="#🌼我们如何告诉-NET-非托管资源已经用完了呢" class="headerlink" title="🌼我们如何告诉 .NET 非托管资源已经用完了呢?"></a>🌼我们如何告诉 .NET 非托管资源已经用完了呢?</h1><p>想要给非托管资源打上一个 &quot;可被回收&quot; 标记, 需要使用 Dispose 方法.</p>
<h2 id="显式调用-Dispose-方法"><a href="#显式调用-Dispose-方法" class="headerlink" title="显式调用 Dispose() 方法"></a>显式调用 Dispose() 方法</h2><p>对于实现了 <code>IDisposable</code> 接口的非托管资源, 可以直接调用其中的 <code>Dispose()</code> 方法, 这个方法可以用来告知程序: &quot;这个资源已经用完了, 你抽空安排一下吧!&quot; 😃</p>
<h2 id="使用-using-语句块隐式调用-Dispose-方法"><a href="#使用-using-语句块隐式调用-Dispose-方法" class="headerlink" title="使用 using 语句块隐式调用 Dispose() 方法"></a>使用 using 语句块隐式调用 Dispose() 方法</h2><p>所有实现了 <code>IDisposable</code> 接口的资源都可以放到 <code>using</code> 语句块中进行资源管理, 在 using 中进行声明以及实例化. 以下摘录自 Microsoft Document 中对 using 的介绍.</p>
<blockquote>
<ol>
<li><p>IDisposable 对象的生存期限于单个方法时, 应在 using 语句中声明并实例化它.</p>
</li>
<li><p>using 语句会按照正确的方式调用对象上的 Dispose 方法, 即使 using 语句块中出现了异常, 也能保证 Dispose 被正常调用.</p>
</li>
<li><p>在 using 块中, 对象是只读的并且无法进行修改或重新分配.</p>
</li>
<li><p>不要先实例化资源对象, 然后将变量传递到 using 语句, 而是应该直接在 using 语句中实例化该对象, 并将其范围限制在 using 块中.</p>
</li>
</ol>
</blockquote>
<h1 id="🦄回收内存的非实时性"><a href="#🦄回收内存的非实时性" class="headerlink" title="🦄回收内存的非实时性"></a>🦄回收内存的非实时性</h1><p>GC 一个很大的特点就是内存的回收并不是实时的, 它内部有一套完整的算法会进行智能判断回收的时机. 而且文章上面所提到的各种通知系统资源已使用完毕的方式也仅仅只是告诉系统这个 &quot;非托管资源&quot; 已经成为垃圾了, 可以被回收了. 但是实际上此时这块内存还没有被回收, 具体什么时候回收是由系统决定的.</p>
<h1 id="👀GC-Collect-方法"><a href="#👀GC-Collect-方法" class="headerlink" title="👀GC.Collect() 方法"></a>👀GC.Collect() 方法</h1><p>因此系统提供了一个 GC.Collect() 方法, 这个方法会以系统的 root 为基础层层遍历, 将所有的可回收内存全部回收. 借由此方法, 程序员可以立即回收内存. 但是除非特殊情况, 不要主动调用此方法, 频繁调用会严重影响程序性能. (微软说的~)</p>
<h1 id="🙄我的问题"><a href="#🙄我的问题" class="headerlink" title="🙄我的问题"></a>🙄我的问题</h1><p>当时我遇到的问题是, ASP 程序中需要将数据库中的 240 万条数据导出到一个文件中, 大概 500MB 左右, 而程序是一次性将这全部的 240 万行数据读取出来, 放到一个临时的 DataSet 中, 之后向文件中写入. 但是这个 DataSet 过大, 直接导致内存溢出了......</p>
<p>于是我开始分批次读取, 并且使用 using 语句块进行资源的自动管理, 如下, 外面套了一层 for 循环.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 追加模式写入流, 使用 using 自动管理资源</span></span><br><span class="line"><span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(path, <span class="literal">true</span>, Encoding.GetEncoding(<span class="string">&quot;GB2312&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (DataSet ds = <span class="keyword">new</span> GOOGOSOFT.DATABASE.OracleHelper().GetDataSet(str_sql))</span><br><span class="line">    &#123;</span><br><span class="line">        WriteFileCSV(ds, i, sw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我一共分了 8 个批次查询, 但是当程序循环到第 6 次时, 还是内存溢出了......我当时就很郁闷, 不是都已经使用 using 了吗, 为啥还内存溢出......后来才知道, using 只是会告诉程序资源使用完毕了, 但并不会立即回收那部分内存. 于是在每次开始新一轮循环的时候强制回收一次内存就可以了.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 追加模式写入流, 使用 using 自动释放资源</span></span><br><span class="line"><span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(path, <span class="literal">true</span>, Encoding.GetEncoding(<span class="string">&quot;GB2312&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (DataSet ds = <span class="keyword">new</span> GOOGOSOFT.DATABASE.OracleHelper().GetDataSet(str_sql))</span><br><span class="line">    &#123;</span><br><span class="line">        WriteFileCSV(ds, i, sw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制调用垃圾回收器, 回收上面资源占用的内存</span></span><br><span class="line">GC.Collect();</span><br></pre></td></tr></table></figure>

<p>我觉得释放和回收可以这样理解:</p>
<ol>
<li>释放是指解除对非托管资源的占用和锁定.</li>
</ol>
<p>比如一个文件, 在没有释放资源的时候, 不能对其进行其他操作, 比如删除操作. 释放资源后可以进行删除.</p>
<ol start="2">
<li>回收是指将资源使用的内存进行回收.</li>
</ol>
<p>比如我之前遇到的问题, 释放资源只是将资源打上一个 &quot;可被回收&quot; 的标记等待被 GC 回收, 此时内存还是被占用的, 之后 GC 真正回收内存之后, 内存使用率才会真正降低...</p>
<p>最后还是要在强调一下, 通常情况下, 我们应该避免调用 GC.Collect() 方法, 让垃圾回收器独立运行. 在大多数情况下, 对于执行回收的最佳时机, 垃圾回收器的算法更有优势.</p>
<p>除非在某些特殊情况下, 我们的程序占用了大量的内存, 需要立即释放, 在这种情况下我们才能使用 GC.Collect() 方法手动回收内存.</p>
<h1 id="🐬参考文章"><a href="#🐬参考文章" class="headerlink" title="🐬参考文章"></a>🐬参考文章</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veXVuZmVpZmVpL3AvMzk5NTM0Mi5odG1s">从 C# 垃圾回收机制中挖掘性能优化方案<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvdXNpbmctc3RhdGVtZW50">using 语句<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvdG9waWNzLzM5MDE4MTIwNw==">关于using和System.GC.Collect()对于释放资源的讨论<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMTYwNDgy">.Net中Finalize()和Dispose()有什么区别?<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>存储类型和传递方式</title>
    <url>/csharp/csharp_parameter.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="变量的存储类型"><a href="#变量的存储类型" class="headerlink" title="变量的存储类型"></a>变量的存储类型</h1><p>csharp 中的存储类型有两种, &quot;值存储&quot; 和 &quot;引用存储&quot;.</p>
<ol>
<li><p>引用存储类型是指在堆中存储变量的实际内容, 在栈中存储指向堆中实际内容的指针. 引用储存类型由这两部分组成.</p>
</li>
<li><p>值存储类型则是直接存储变量的实际内容, 不保存指向其的指针, 具体存储位置根据值类型的创建位置而定: 如果值类型是在一个方法中创建的, 那么它将跟随方法被压入栈内存中, 如果值类型是在一个引用类型内部创建的, 那么它将跟随这个引用类型存储在堆内存中.</p>
</li>
</ol>
<h1 id="参数的传递方式"><a href="#参数的传递方式" class="headerlink" title="参数的传递方式"></a>参数的传递方式</h1><p>csharp 中的传递方式有两种, &quot;值传递&quot; 和 &quot;引用传递&quot;.</p>
<ol>
<li><p>引用传递就是指将变量本身直接作为参数传递到方法内部. 比如你买了一支冰激凌, 朋友是只馋猫, 于是你直接把冰激凌送给了她, 她吃完后, 你也就没有冰激凌了...</p>
</li>
<li><p>值传递就是指将变量复制一份, 然后将复制出来的副本传递到方法内部. 就像朋友也想吃的时候, 你去便利店又买了一支一模一样的冰激凌送给了她, 她吃完后, 你的冰激凌还是在自己手中的...自己的是自己的, 她的是她的.</p>
</li>
</ol>
<p><strong>在默认情况下, CLR方法中传递参数的方式都是<font color='red'>值传递</font>! 即使变量采用的是引用存储.</strong></p>
<h1 id="四种-存储-传递"><a href="#四种-存储-传递" class="headerlink" title="四种 &quot;存储--传递&quot;"></a>四种 &quot;存储--传递&quot;</h1><p>2 种存储类型在 2 种传递方式下就会诞生 4 种情况:</p>
<h2 id="值存储-值传递"><a href="#值存储-值传递" class="headerlink" title="值存储--值传递"></a>值存储--值传递</h2><p>将一个值存储变量按照默认的传递方式传递就构成了 &quot;值存储--值传递&quot; 的情况.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> param1 = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> param2 = <span class="number">2</span>;</span><br><span class="line">        program.Edit(param1, param2);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;param1=&#123;0&#125;, param2=&#123;1&#125;&quot;</span>, param1, param2);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Edit</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">int</span> param2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        param1 = <span class="number">3</span>;</span><br><span class="line">        param2 = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中, 最终输出的还是:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">param1=<span class="number">1</span>, param2=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="引用存储-值传递"><a href="#引用存储-值传递" class="headerlink" title="引用存储--值传递"></a>引用存储--值传递</h2><p>将一个引用存储的变量使用默认的传递方式传递就构成了 &quot;引用存储--值传递&quot; 的情况.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">&quot;我是测试字符串!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        program.Edit(str);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;str=&#123;0&#125;&quot;</span>, str);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Edit</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        str = <span class="string">&quot;我被修改了!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中, 最终输出的还是:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">str=我是测试字符串!</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="number">1000</span>, <span class="string">&quot;价值一千元的车&quot;</span>);</span><br><span class="line"></span><br><span class="line">        program.Edit(car);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;price=&#123;0&#125;, name=&#123;1&#125;&quot;</span>, car.price, car.name);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Edit</span>(<span class="params">Car param</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        param = <span class="keyword">new</span> Car(<span class="number">10000</span>, <span class="string">&quot;价值一万元的车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> price;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">string</span> param2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        price = param1;</span><br><span class="line">        name = param2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中, 最终输出的还是:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">price=<span class="number">1000</span>, name=价值一千元的车</span><br></pre></td></tr></table></figure>

<p>第一个例子中 param1 的值是 1, param2 的值是 2, 即使使用了 Edit() 方法进行修改, 这两个变量的值依旧没有变化; 第二个例子中, str 的值也没有发生改变; 第三个例子中, car 指向的是 &quot;价值为一千元的车&quot;, 之后使用了 Edit() 方法进行了修改, 但是 car 指向的还是那辆 &quot;价值为一千元的车&quot;, 对一万元的车视而不见! 由此可见, 值传递之后, 方法中修改的只是变量的副本, 并不会对原变量的值造成任何影响.</p>
<p>[<strong>注</strong>] 第二个例子中的 <strong>car 变量的值</strong>和 car 所指向的 <strong>price 变量的值, name 变量的值</strong>完全是两码事!</p>
<h2 id="值存储-引用传递"><a href="#值存储-引用传递" class="headerlink" title="值存储--引用传递"></a>值存储--引用传递</h2><p>之前提到过, <strong>在默认情况下, CLR方法中传递参数的方式都是<font color='red'>值传递</font>! 即使变量采用的是引用存储!</strong> csharp 既然提供了引用传递方式, 自然有其实现方式. <code>ref, in, out</code> 这三个修饰符就是用于修饰参数的, 3 个修饰符的差异先放一边, 只要知道被它们修饰后的参数将使用 &quot;引用传递&quot; 的方式进行传递就可以了.</p>
<p>当值存储的变量作为参数传递时, 被 <code>ref, out, in</code> 修饰符修饰, 会使用引用传递方式进行传递, 就构成了 &quot;值存储--引用传递&quot; 的情况.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> param1 = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> param2 = <span class="number">2</span>;</span><br><span class="line">        program.Edit(<span class="keyword">ref</span> param1, <span class="keyword">ref</span> param2);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;param1=&#123;0&#125;, param2=&#123;1&#125;&quot;</span>, param1, param2);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Edit</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> param1, <span class="keyword">ref</span> <span class="built_in">int</span> param2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        param1 = <span class="number">3</span>;</span><br><span class="line">        param2 = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中, 最终输出的值就变成了:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">param1=<span class="number">3</span>, param2=<span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="引用存储-引用传递"><a href="#引用存储-引用传递" class="headerlink" title="引用存储--引用传递"></a>引用存储--引用传递</h2><p>当引用存储的变量作为参数传递时, 被 <code>ref, out, in</code> 修饰符修饰, 也会使用引用传递方式进行传递, 就构成了 &quot;引用存储--引用传递&quot; 的情况.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">&quot;我是测试字符串!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        program.Edit(<span class="keyword">ref</span> str);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;str=&#123;0&#125;&quot;</span>, str);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Edit</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        str = <span class="string">&quot;我被修改了!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中, 最终输出的值就变成了:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">str=我被修改了!</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="number">1000</span>, <span class="string">&quot;价值一千元的车&quot;</span>);</span><br><span class="line"></span><br><span class="line">        program.Edit(<span class="keyword">ref</span> car);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;price=&#123;0&#125;, name=&#123;1&#125;&quot;</span>, car.price, car.name);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Edit</span>(<span class="params"><span class="keyword">ref</span> Car param</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        param = <span class="keyword">new</span> Car(<span class="number">10000</span>, <span class="string">&quot;价值一万元的车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> price;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params"><span class="built_in">int</span> param1, <span class="built_in">string</span> param2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        price = param1;</span><br><span class="line">        name = param2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中, 最终输出的值就变成了:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">price=<span class="number">10000</span>, name=价值一万元的车</span><br></pre></td></tr></table></figure>

<p>第一个例子中 param1 的值是 1, param2 的值是 2, 使用了 Edit() 方法修改后, 这两个变量的值就变成了 3 和 4; 第二个例子中, str 的值也被修改为了 &quot;我被修改了!&quot;; 第三个例子中, car 原本指向的是 &quot;价值为一千元的车&quot;, 之后使用了 Edit() 方法进行了修改, car 便指向了 &quot;价值为一万元的车&quot; ! 由此可见, 引用传递之后, 方法中修改的就是原变量的值.</p>
<h1 id="ref-out-in"><a href="#ref-out-in" class="headerlink" title="ref, out, in"></a>ref, out, in</h1><p>这三个关键字都可以实现引用传递, 并且引用传递时, ref 和 out 还要求不仅需要在方法签名中声明参数为哪种引用传递, 在调用方法的时候也<strong>必须添加对应的修饰符</strong>, 从上面引用传递的举例中也可以看出, 在调用方法时, 参数中也必须注明 ref 和 out, 但是这三者有什么区别呢?</p>
<h2 id="什么时候用-ref"><a href="#什么时候用-ref" class="headerlink" title="什么时候用 ref ?"></a>什么时候用 ref ?</h2><p>当你的目的是使用方法处理变量的值的时候, 就可以使用 ref 修饰符了. 因此 ref 有一个这样的语法规则:</p>
<ul>
<li>ref 修饰的参数在传递前必须已经初始化了.</li>
</ul>
<p>很明显, 这条规则进一步强调了 ref 的运用场景是: 我已经有一吨苹果了, 我现在需要将苹果送入造酒工厂, 让造酒工厂帮我处理这么多苹果! 所以前提是我们必须得先有苹果啊! 😅</p>
<h2 id="什么时候用-out"><a href="#什么时候用-out" class="headerlink" title="什么时候用 out ?"></a>什么时候用 out ?</h2><p>当你的目的是使用方法造出一个东西的时候, 就可以使用 out 修饰符了. 因此 out 修饰符就没有必须先初始化的限制. 这也是其使用场景决定的: 比如现在造酒工厂已经把苹果酒制作好了, 那么我只需要将酒带回家就可以了, 并不需要提前准备什么.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        program.Cook(<span class="keyword">out</span> <span class="built_in">string</span> food);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;food=&#123;0&#125;&quot;</span>, food);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Cook</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">string</span> food</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        food = <span class="string">&quot;早餐&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如上面的例子, Cook() 方法中的 food 变量并没有初始化, 依旧可以正常输出:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">food=早餐</span><br></pre></td></tr></table></figure>

<h2 id="in-修饰符又有什么用呢"><a href="#in-修饰符又有什么用呢" class="headerlink" title="in 修饰符又有什么用呢?"></a>in 修饰符又有什么用呢?</h2><p>由上面可以就看出, ref 和 out 已经可以涵盖所有的情况了, 为什么还有一个 in 呢? in 自然也是有它的应用场景的.</p>
<p>某一天你买了一幅名画, 十分贵重, 几乎花光了你至今为止所有的积蓄, 但是你的好朋友也想要看一下, 提出想要拿到自己家中好好观摩两天. 此时你心想, 使用 &quot;值传递&quot; 的方式吧, 就得复制一副相同的画, 虽然朋友也说了就算是复制品也可以, 但是请人再去临摹一份一模一样的, 这个开销太大了(对应程序中传递一个体积很大很大的值存储变量, 比如结构体变量, 复制一份的话, 内存占用就很高), 于是你还是决定直接将原画借给朋友看, 也就是 &quot;ref 引用传递&quot;, 但是心里始终是不放心啊, 万一朋友不小心把画作弄脏了, 弄丢了, 那自己这一辈子岂不凉凉了~</p>
<p>于是在这个场景下就可以使用修饰符 <em>in</em> 了, 使用 in 修饰的引用传递, 在方法中只能使用参数值, 无法修改参数值. 这样就不用担心画作的安全问题了.</p>
<p><img data-src="/images/csharp/parameter.png" alt="in 的作用"></p>
<p>[<strong>注</strong>] ref 和 out 参数在方法调用时必须显式注明 ref 和 out, 否则编译器直接报错! 但是从上图中可以看出, 我在调用 Friend 方法的时候并没有显式注明 in, 也就是说 in 并没有这个要求, 但是还是建议养成注明引用传递的习惯!</p>
<p>由此可见, 在程序中, in 关键字主要用于程序优化, 节省内存. 当然这里说的 in 只是参数修饰符 in, 自然不包括在 foreach 中的 in 啦~</p>
<h1 id="params"><a href="#params" class="headerlink" title="params"></a>params</h1><p>使用 params 关键字可以指定采用数目可变的参数的方法参数, 因此当方法需要的参数个数无法确定的时候, 就可以使用 params 关键字.</p>
<p>params 使用时具有诸多语法限制:</p>
<ol>
<li><p>params 修饰的参数类型必须是<font color='red'><strong>一维数组</strong></font>. 如果 params 修饰的不是一维数组, 直接发生编译错误;</p>
</li>
<li><p>在方法声明中 params 关键字修饰的参数之后不允许有任何其他参数;</p>
</li>
<li><p>在方法声明中只允许有一个 params 关键字.</p>
</li>
</ol>
<p>调用具有 params 修饰参数的方法时，可以传入:</p>
<ol>
<li><p>一维数组元素类型的逗号分隔列表;</p>
</li>
<li><p>指定类型的一维数组;</p>
</li>
<li><p>无参数. 如果未发送任何参数, 则 params 列表长度为零.</p>
</li>
</ol>
<p>[<strong>注</strong>]</p>
<ol>
<li><p>params 修饰的参数类型必须是一维数组, 但是这里的 &quot;一维数组&quot; 指代的并不仅仅是这种简单的一维数组 <code>int[]</code>, 任何类型的一维数组都可以, 包括交错数组: <code>int[][]</code>.</p>
</li>
<li><p>在方法声明中的 params 关键字之后不允许有任何其他参数, 就意味着 params 修饰的参数必须放在参数列表的最后一个, 同时也意味着只允许有一个 params 修饰的参数.</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; appleList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        appleList.Add(<span class="string">&quot;富士苹果&quot;</span>);</span><br><span class="line">        appleList.Add(<span class="string">&quot;红龙苹果&quot;</span>);</span><br><span class="line">        appleList.Add(<span class="string">&quot;香蕉苹果&quot;</span>);</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        appleList.Add(<span class="string">&quot;蜜脆苹果&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span>[] apples = appleList.ToArray();</span><br><span class="line"></span><br><span class="line">        program.Factory();</span><br><span class="line">        program.Factory(<span class="string">&quot;富士苹果&quot;</span>, <span class="string">&quot;红龙苹果&quot;</span>);</span><br><span class="line">        program.Factory(<span class="string">&quot;富士苹果&quot;</span>, <span class="string">&quot;红龙苹果&quot;</span>, <span class="string">&quot;香蕉苹果&quot;</span>, <span class="string">&quot;蜜脆苹果&quot;</span>);</span><br><span class="line">        program.Factory(apples);</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Factory</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] apples</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str_log = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (apples.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> apple <span class="keyword">in</span> apples)</span><br><span class="line">            &#123;</span><br><span class="line">                str_log += apple + <span class="string">&quot;酒! &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            str_log = <span class="string">&quot;请提供原材料!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(str_log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的例子输出的结果就是:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">请提供原材料!</span><br><span class="line">富士苹果酒! 红龙苹果酒!</span><br><span class="line">富士苹果酒! 红龙苹果酒! 香蕉苹果酒! 蜜脆苹果酒!</span><br><span class="line">富士苹果酒! 红龙苹果酒! 香蕉苹果酒! 蜜脆苹果酒!</span><br></pre></td></tr></table></figure>

<p>可以看出调用方法时, 传递不定个数的参数以及一维数组都是可以的!</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvcmVmI3Bhc3NpbmctYW4tYXJndW1lbnQtYnktcmVmZXJlbmNl">Microsoft Docs ref<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vZG90bmV0L2NzaGFycC9sYW5ndWFnZS1yZWZlcmVuY2Uva2V5d29yZHMvcGFyYW1z">Microsoft Docs params<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Clone 慢速 20KB 的终极解决方案</title>
    <url>/git/git_clone_slow.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="省流版"><a href="#省流版" class="headerlink" title="省流版"></a>省流版</h1><ul>
<li>设置 remote 必须使用 https 链接</li>
<li>使用命令指定 git 代理的 IP 和 端口</li>
</ul>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此方案需要代理, 不会有人还没有代理吧? 不会吧不会吧? [赶紧溜....]</p>
<h1 id="查看代理端口"><a href="#查看代理端口" class="headerlink" title="查看代理端口"></a>查看代理端口</h1><p>查看自己的 SS, SSR, Clash 等代理软件的端口, 我这里的是 <kb>1080</kb></p>
<h1 id="设置-git-代理"><a href="#设置-git-代理" class="headerlink" title="设置 git 代理"></a>设置 git 代理</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<h1 id="检查代理是否设置正确"><a href="#检查代理是否设置正确" class="headerlink" title="检查代理是否设置正确"></a>检查代理是否设置正确</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure>

<h1 id="通过-https-链接克隆项目"><a href="#通过-https-链接克隆项目" class="headerlink" title="通过 https 链接克隆项目"></a>通过 https 链接克隆项目</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<p>实验结果最终克隆速度直接跑满带宽, 终于... 可以开始敲代码了, 哈哈哈</p>
<h1 id="最后如果不放心可以把代理关掉"><a href="#最后如果不放心可以把代理关掉" class="headerlink" title="最后如果不放心可以把代理关掉"></a>最后如果不放心可以把代理关掉</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 中使用 Revert 导致的合线问题</title>
    <url>/git/git_revert_error.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><p>首先模拟一下, 当前有一条功能主分支, 叫做 A, 目前 A 的开发进度为 A, A1</p>
<p>现在需要在 A 分支上开发一个次要功能, 于是新建了分支 B, B 开发了一段时间之后, 开发进度为 B, B1, 此时 B 功能开发完成了, 但是出了一个 Bug</p>
<p>之后需要修复 B 分支上的这个 Bug, 于是新建了分支 C, 问题修改进度为: C, C1, C2, Bug 修复完毕</p>
<p>下面是 Git 记录:</p>
<p><img data-src="/images/git/git_revert_1.png" alt="开发记录"></p>
<p>或许这样会看得更清晰一些:</p>
<p><img data-src="/images/git/git_revert_2.png" alt="开发记录"></p>
<p>此时问题已经修复完毕, 分支 C 需要合并到分支 B 中, 但是由于操作失误, 分支 C 直接合并到了分支 A, 并且合线人员看到合错线了, 使用了 <code>Revert</code> 进行了反合线, 如图:</p>
<p><img data-src="/images/git/git_revert_3.png" alt="开发记录"></p>
<p><img data-src="/images/git/git_revert_4.png" alt="开发记录"></p>
<p>之后 C 分支正常往 B 分支合线</p>
<p><img data-src="/images/git/git_revert_5.png" alt="开发记录"></p>
<p>B 分支向 A 分支合线</p>
<p><img data-src="/images/git/git_revert_6.png" alt="开发记录"></p>
<p>至此功能 B 合线完成.</p>
<p>上面这个情景合线后的 A 分支会有问题吗?</p>
<p>答案是会有问题. 分支 A 上面压根就没有任何分支 B 和分支 C 上的内容. 因为之前的 Revert 操作的内容是删除分支 B 和分支 C 的内容, 所以导致 B C 在合线进来之后就又被删除掉了, 导致 A 分支上什么都没有.</p>
<p><img data-src="/images/git/git_revert_7.png" alt="开发记录"></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>方案 1: 直接禁止使用 Revert, 一了百了 ~ 哈哈</p>
</li>
<li><p>方案 2: 执行了 Revert 命令之后再次执行一次 Revert 命令<br>  <img data-src="/images/git/git_revert_8.png" alt="开发记录"></p>
</li>
<li><p>方案 3: 回退到 Revert 之前的结点, 之后强制推送, 就可以恢复到没有执行 Revert 之前的状态<br>  <img data-src="/images/git/git_revert_9.png" alt="开发记录"></p>
</li>
<li><p>方案 4: 回退到 Revert 之前的结点, 新建分支, 之后删除旧的错误分支,也达到了恢复到没有执行 Revert 之前状态的目的</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 中的 Path 类</title>
    <url>/csharp/csharp_path.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><table>
<thead>
<tr>
<th align="left">API</th>
<th align="left">作用</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Path.Combine()</td>
<td align="left">连接多个路径字符串, 自动处理路径分隔符</td>
<td align="left">Path.Combine(&quot;C:\Folder&quot;, &quot;SubFolder&quot;, &quot;file.txt&quot;) &#x2F;&#x2F; C:\Folder\SubFolder\file.txt</td>
</tr>
<tr>
<td align="left">Path.TryJoin()</td>
<td align="left">尝试连接多个路径字符串, 返回 bool 表示是否成功</td>
<td align="left">Path.TryJoin(&quot;C:\Folder&quot;, &quot;file.txt&quot;, out string result) &#x2F;&#x2F; true, result &#x3D; &quot;C:\Folder\file.txt&quot;</td>
</tr>
<tr>
<td align="left">Path.Join()</td>
<td align="left">连接多个路径字符串, 不检查路径是否有效</td>
<td align="left">Path.Join(&quot;C:\Folder&quot;, &quot;SubFolder&quot;, &quot;file.txt&quot;) &#x2F;&#x2F; C:\Folder\SubFolder\file.txt</td>
</tr>
<tr>
<td align="left">Path.ChangeExtension()</td>
<td align="left">更改文件扩展名</td>
<td align="left">Path.ChangeExtension(&quot;file.txt&quot;, &quot;.jpg&quot;) &#x2F;&#x2F; file.jpg</td>
</tr>
<tr>
<td align="left">Path.GetExtension()</td>
<td align="left">获取文件的扩展名</td>
<td align="left">Path.GetExtension(&quot;file.txt&quot;) &#x2F;&#x2F; .txt</td>
</tr>
<tr>
<td align="left">Path.HasExtension()</td>
<td align="left">判断路径是否包含扩展名</td>
<td align="left">Path.HasExtension(&quot;file.txt&quot;) &#x2F;&#x2F; true</td>
</tr>
<tr>
<td align="left">Path.GetDirectoryName()</td>
<td align="left">获取目录部分 (去除文件名)</td>
<td align="left">Path.GetDirectoryName(&quot;C:\Folder\file.txt&quot;) &#x2F;&#x2F; C:\Folder</td>
</tr>
<tr>
<td align="left">Path.GetFileName()</td>
<td align="left">获取文件名 (包含扩展名)</td>
<td align="left">Path.GetFileName(&quot;C:\Folder\file.txt&quot;) &#x2F;&#x2F; file.txt</td>
</tr>
<tr>
<td align="left">Path.GetFileNameWithoutExtension()</td>
<td align="left">获取文件名 (不含扩展名)</td>
<td align="left">Path.GetFileNameWithoutExtension(&quot;C:\Folder\file.txt&quot;) &#x2F;&#x2F; file</td>
</tr>
<tr>
<td align="left">Path.GetTempFileName()</td>
<td align="left">生成一个唯一的临时文件路径 (会创建空文件)</td>
<td align="left">Path.GetTempFileName() &#x2F;&#x2F; C:\Users...\AppData\Local\Temp\tmp1234.tmp</td>
</tr>
<tr>
<td align="left">Path.GetRandomFileName()</td>
<td align="left">生成一个随机文件名 (不会创建文件)</td>
<td align="left">Path.GetRandomFileName() &#x2F;&#x2F; eg. &quot;ax1b2c.tmp&quot;</td>
</tr>
<tr>
<td align="left">Path.GetFullPath()</td>
<td align="left">获取绝对路径</td>
<td align="left">Path.GetFullPath(&quot;file.txt&quot;) &#x2F;&#x2F; C:\CurrentDirectory\file.txt</td>
</tr>
<tr>
<td align="left">Path.GetTempPath()</td>
<td align="left">获取系统的临时文件夹路径</td>
<td align="left">Path.GetTempPath() &#x2F;&#x2F; C:\Users...\AppData\Local\Temp\</td>
</tr>
<tr>
<td align="left">Path.GetRelativePath()</td>
<td align="left">获取相对路径</td>
<td align="left">Path.GetRelativePath(&quot;C:\Folder&quot;, &quot;C:\Folder\SubFolder\file.txt&quot;) &#x2F;&#x2F; SubFolder\file.txt</td>
</tr>
<tr>
<td align="left">Path.GetPathRoot()</td>
<td align="left">获取路径的根目录部分</td>
<td align="left">Path.GetPathRoot(&quot;C:\Folder\file.txt&quot;) &#x2F;&#x2F; C:\</td>
</tr>
<tr>
<td align="left">Path.IsPathRooted()</td>
<td align="left">判断路径是否包含根目录 (绝对路径)</td>
<td align="left">Path.IsPathRooted(&quot;C:\Folder\file.txt&quot;) &#x2F;&#x2F; true</td>
</tr>
<tr>
<td align="left">Path.IsPathFullyQualified()</td>
<td align="left">判断路径是否是完整路径 (不包含相对部分)</td>
<td align="left">Path.IsPathFullyQualified(&quot;C:\Folder\file.txt&quot;) &#x2F;&#x2F; true</td>
</tr>
<tr>
<td align="left">Path.GetInvalidPathChars()</td>
<td align="left">获取路径中无效的字符数组</td>
<td align="left">Path.GetInvalidPathChars()</td>
</tr>
<tr>
<td align="left">Path.GetInvalidFileNameChars()</td>
<td align="left">获取文件名中无效的字符数组</td>
<td align="left">Path.GetInvalidFileNameChars()</td>
</tr>
</tbody></table>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><table>
<thead>
<tr>
<th align="left">API</th>
<th align="left">作用</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Path.PathSeparator</td>
<td align="left">获取环境变量路径分隔符 (Windows ;Linux :)</td>
<td align="left">Path.PathSeparator &#x2F;&#x2F; ;</td>
</tr>
<tr>
<td align="left">Path.DirectorySeparatorChar</td>
<td align="left">获取目录分隔符 (Windows \ Linux &#x2F;)</td>
<td align="left">Path.DirectorySeparatorChar &#x2F;&#x2F; \</td>
</tr>
<tr>
<td align="left">Path.VolumeSeparatorChar</td>
<td align="left">获取磁盘卷分隔符 (Windows : Linux 不存在)</td>
<td align="left">Path.VolumeSeparatorChar &#x2F;&#x2F; :</td>
</tr>
<tr>
<td align="left">Path.AltDirectorySeparatorChar</td>
<td align="left">获取备用的目录分隔符 (Windows &#x2F; 与 \ 等价)</td>
<td align="left">Path.AltDirectorySeparatorChar &#x2F;&#x2F; &#x2F;</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>不同文件间冲突 ? 远端文件冲突描述信息残留 ?</title>
    <url>/git/git_conflict_different_file.html</url>
    <content><![CDATA[<p>合并操作时, 居然不同的文件之间存在冲突 ? ! 不同的文件之间呀 ? 这到底是咋回事 ? ? 到底是道德的沦丧 ? 还是人性的... (啪! 😡 废话真多! 赶紧的!)</p>
<span id="more"></span>

<h1 id="😱问题描述"><a href="#😱问题描述" class="headerlink" title="😱问题描述"></a>😱问题描述</h1><p>先看一下问题的截图, 下面是一次 merge 操作后的结果</p>
<ul>
<li>远程仓库中的资源残留了冲突描述文本</li>
</ul>
<p><img data-src="/images/git/merge_conflict_1.png" alt="远程仓库中的资源残留了冲突描述文本"></p>
<p>是的, 你没有看错, 我也没有撒谎, 这确实是远端仓库中资源的样子, 可以看到, 里面还是残留着冲突描述信息, 但是... 这可能吗 ? ? 😣 <strong>难道是负责合并的人整了什么活 ?</strong> 😒, 遗憾的是经过询问, 人家并没有进行什么特殊的操作, 就是正常 Merge, 正常 resolve conflict, 正常 commit ... 啊这 ... <strong>我不信啊</strong> ! ! !🙄</p>
<h1 id="😟尝试复现问题"><a href="#😟尝试复现问题" class="headerlink" title="😟尝试复现问题"></a>😟尝试复现问题</h1><p>既然要解决问题, 首先自然是尝试复现问题, 但是自己新建一个 Git 仓库无论如何也复现不出问题 😫</p>
<p>可以看下面的截图, 只要存在冲突, 无论使用图形化软件的 fork 还是直接使用 Git 命令都必须先解决冲突才能 commit, 所以究竟怎么做才能将这种带有冲突描述信息的资源提交呢 ?</p>
<ul>
<li>新建项目尝试复现问题, 建立 2 条存在冲突的分支</li>
</ul>
<p><img data-src="/images/git/merge_conflict_2.png" alt="新建项目尝试复现问题"></p>
<ul>
<li>进行合并, 并尝试不解决冲突直接提交, 但是图形化软件 Fork 无法提交</li>
</ul>
<p><img data-src="/images/git/merge_conflict_3.png" alt="图形化软件 Fork 无法提交"></p>
<ul>
<li>进行合并, 并尝试不解决冲突直接提交, 但是即使直接使用命令同样无法提交</li>
</ul>
<p><img data-src="/images/git/merge_conflict_4.png" alt="直接使用命令同样无法提交"></p>
<p>唉... 做不到不解决冲突直接提交, 无论使用什么软件还是直接使用命令, 都不行 😥 暂且记录下这个问题</p>
<ul>
<li>疑惑 1 : 为什么自己新建仓库无法复现问题 ?</li>
</ul>
<h1 id="🧐查找导致问题的提交"><a href="#🧐查找导致问题的提交" class="headerlink" title="🧐查找导致问题的提交"></a>🧐查找导致问题的提交</h1><p>既然自己新建仓库无法复现问题, 那就只能去一步步查找出导致问题的操作</p>
<p>既然是查找提交, 最快的方法自然是针对某一个有问题的文件找出所有的提交历史啦, 以 <strong>Coat_159.FBX.meta</strong> 为例 😈</p>
<ul>
<li>Fork 软件显示的历史</li>
</ul>
<p><img data-src="/images/git/merge_conflict_5.png" alt="Fork 软件显示的历史"></p>
<ul>
<li>GitKraken 软件显示的历史</li>
</ul>
<p><img data-src="/images/git/merge_conflict_6.png" alt="GitKraken 软件显示的历史"></p>
<ul>
<li>Git log 命令显示的历史</li>
</ul>
<p><img data-src="/images/git/merge_conflict_7.png" alt="Git log 命令显示的历史"></p>
<p>从三张截图中可以得出 2 个结论:</p>
<ul>
<li>结论 1 : 文件只有 2 次提交, 分别是 <strong>新增文件</strong> 和 <strong>关闭读写设置</strong>, 并没有冲突描述信息的提交, 考虑到 <code>rebase</code> 操作不会生成新的提交, 所以不会导致此问题, 因此可以断定只有 <code>merge</code> 操作会导致此次问题, 这样后面只要排查合并操作即可</li>
<li>结论 2 : Fork 软件的历史查询真的有问题! 哈哈! GitKraken 显示的历史便没有后面那些乱七八糟的提交, 直接使用 Log 命令显示的历史中也没有后面的提交! (当然这个结论在文章最后会被推翻, 此时先按下不表 😋)</li>
</ul>
<h1 id="🧐查找导致问题的-Merge-操作"><a href="#🧐查找导致问题的-Merge-操作" class="headerlink" title="🧐查找导致问题的 Merge 操作"></a>🧐查找导致问题的 Merge 操作</h1><p>通过 Fork 的 <code>Collapse All Merges (Show First Parent)</code> 功能, 快速对 Merge 进行排查, 最终定位到了导致问题的 Merge 操作</p>
<ul>
<li>导致问题的 Merge 操作</li>
</ul>
<p><img data-src="/images/git/merge_conflict_8.png" alt="导致问题的 Merge 操作"></p>
<p>可以看到 <code>origin/develop</code> 合并到 <code>hotfix/release/v51/1716/1726-merge-dev</code> 时出现了冲突描述文本, 至此终于定位到了有问题的操作, 但是还是没有搞清楚这些冲突描述信息为何会残留 ? 又为何在残留的状态下进行了提交 ? 😭</p>
<h1 id="🤓尝试复现问题"><a href="#🤓尝试复现问题" class="headerlink" title="🤓尝试复现问题"></a>🤓尝试复现问题</h1><p>继续之前的思路, 在此次合并的两条分支处新建新的分支</p>
<ul>
<li>在合并前的提交处新建分支</li>
</ul>
<p><img data-src="/images/git/merge_conflict_9.png" alt="在合并前的提交处新建分支"></p>
<ul>
<li>直接再次发起 Merge</li>
</ul>
<p><img data-src="/images/git/merge_conflict_10.png" alt="在合并前的提交处新建分支"></p>
<p>惊喜 ╰(*°▽°*)╯ ! 提示可以直接合并, 没有任何冲突 💥 那这岂不是说明了就是负责合并的人整活嘛 ! 赶紧合并完, 去找负责人 battle !</p>
<ul>
<li>寄</li>
</ul>
<p><img data-src="/images/git/merge_conflict_11.png" alt="寄"></p>
<p>啥情况 ? ! 不是说没有冲突吗 ? 怎么又出来冲突了 ? 唉, 没办法, 直接进行一个 <code>查看冲突内容</code></p>
<ul>
<li>查看冲突内容</li>
</ul>
<p><img data-src="/images/git/merge_conflict_12.png" alt="查看冲突内容"></p>
<p>果然 ! 就是此次问题中的文件, 使用的例子 <code>Coat_159.FBX.meta</code> 文件还首当其冲, 第一个就是它</p>
<p>那没办法咯, 解决冲突呗, 直接选择 <code>Merge</code></p>
<ul>
<li>抱歉, 无法 Merge</li>
</ul>
<p><img data-src="/images/git/merge_conflict_13.png" alt="抱歉, 无法 Merge"></p>
<p>啊 ? ? ? 啥情况, 没法 Merge ? ? ? 那返回选择 <code>modified</code></p>
<ul>
<li>抱歉, 无法 modified</li>
</ul>
<p><img data-src="/images/git/merge_conflict_14.png" alt="抱歉, 无法 modified"></p>
<p>啊 ? ? ? 啥情况, 无法选择 <code>modified</code> ? ? ? 原来其中一个分支压根没有这个文件啊, 怪不得无法 <code>Merge</code>, 也无法选择 <code>modified</code>, 那只好返回选择 <code>added</code> 咯</p>
<p>好家伙! 明明给我 3 个选项, 我却木的选择, 简直了😒 <code>可以选, 但是没得选</code></p>
<ul>
<li>选择 added 后问题复现</li>
</ul>
<p><img data-src="/images/git/merge_conflict_15.png" alt="选择 added 后问题复现"></p>
<p>啊 ? ? ? 为啥选择 <code>added</code> 后变成这样了 ? ? ? 虽然说问题是复现出来了, 但是不懂的地方更多了 ...</p>
<h1 id="🤔总结问题的复现"><a href="#🤔总结问题的复现" class="headerlink" title="🤔总结问题的复现"></a>🤔总结问题的复现</h1><p>至此已经将整个问题复现了, 但是头脑中产生了更多的问号🤔</p>
<ul>
<li><p>疑惑 2 : 为啥合并前提示没有冲突, 随着合并的进行, 却出现了冲突 ?</p>
</li>
<li><p>疑惑 3 : 为啥 <code>added</code> 的解决方式会错误地解决冲突 ?</p>
</li>
<li><p>疑惑 4 : 为啥文本中明明还存在冲突描述却被 Git 认为冲突解决了 ? 难道冲突的标记不是描述文本吗 ?</p>
</li>
</ul>
<h1 id="🧐思路-1-怀疑图形化软件的问题"><a href="#🧐思路-1-怀疑图形化软件的问题" class="headerlink" title="🧐思路 1 : 怀疑图形化软件的问题"></a>🧐思路 1 : 怀疑图形化软件的问题</h1><p>因为之前的复现使用的是 <code>Fork</code> 软件, 一款 Git 的图形化软件, 方便 Git 的使用, 所以怀疑是软件的问题</p>
<ul>
<li>怀疑 1 : 图形化软件无法正确执行 Merge 操作</li>
<li>怀疑 2 : 图形化软件可以正确执行 Merge 操作, 但是无法正确解决冲突</li>
</ul>
<h2 id="验证怀疑-1-是否正确执行-Merge"><a href="#验证怀疑-1-是否正确执行-Merge" class="headerlink" title="验证怀疑 1 : 是否正确执行 Merge"></a>验证怀疑 1 : 是否正确执行 Merge</h2><p>直接使用命令进行 Merge 操作, 看看结果是否一样</p>
<ul>
<li>即使直接使用命令也一样</li>
</ul>
<p><img data-src="/images/git/merge_conflict_20.png" alt="即使直接使用命令也一样"></p>
<p>直接使用 Merge 命令, 一样出现了冲突, 输入 <code>git status</code> 查看冲突的文件</p>
<ul>
<li>冲突的文件也一样</li>
</ul>
<p><img data-src="/images/git/merge_conflict_21.png" alt="冲突的文件也一样"></p>
<p>查看冲突的文件, 发现也是一样的, 这就推翻了第一个怀疑, 后来想想也是, 图形化软件的本质也是执行命令, 怎么会不一致呢 ?</p>
<h2 id="验证怀疑-2-是否能够正确解决冲突"><a href="#验证怀疑-2-是否能够正确解决冲突" class="headerlink" title="验证怀疑 2 : 是否能够正确解决冲突"></a>验证怀疑 2 : 是否能够正确解决冲突</h2><p>既然 Fork 不行, 那就使用另一款软件 GitKraken 进行合并, 尝试解决冲突</p>
<ul>
<li>同样的问题, 同样的冲突</li>
</ul>
<p><img data-src="/images/git/merge_conflict_16.png" alt="同样的问题, 同样的冲突"></p>
<p>和想的完全一致, 出现了同样的冲突, 但是 GitKraken 中有一个新的选项 : <code>Mark resolved</code> 引起了我的注意, 这不正好就是前面记录下的第 4 点嘛, 难道 <code>冲突是否解决</code> 这点真的有标记位 ? 也就是说可以直接在不更改文件的前提下, 直接将文件标记为 <code>resolved</code>, 从而提交上去 ! 直接来尝试一下</p>
<p>尝试前先来看一下此时 (冲突未解决的时刻) 文件的样子</p>
<ul>
<li>标记前的文件内容</li>
</ul>
<p><img data-src="/images/git/merge_conflict_17.png" alt="标记前的文件内容"></p>
<p>可以看到冲突描述信息都是在的, 没有任何问题!</p>
<p><strong><code>同时可以看到截图的右下角有一个 &#39;在合并编辑器中解析&#39; 的按钮, 这个后面会说, 现在先按下不表 (都 2 个没表的啦 ! 😡)</code></strong></p>
<ul>
<li>真的直接标记为解决了</li>
</ul>
<p><img data-src="/images/git/merge_conflict_18.png" alt="真的直接标记为解决了"></p>
<p>从图中可以看出, 和设想的完全一样, 文件直接被标记成 <code>resolved</code></p>
<p>而且经过对文件前后的比对, 文件并没有变化, 最终得出结论 : 冲突确实被直接标记成了 resolved, 并没有对文件进行任何修改, 甚至文件时间戳都没变, 至此 <code>为啥 &#39;added&#39; 的解决方式会错误的解决冲突 ?</code> 解决, 不是错误的解决了冲突, 而是直接将文件标记为解决, 文件压根没动, 因此冲突描述信息被保留了下来</p>
<p>同时 <code>为啥文本中明明还存在冲突描述却被 Git 认为冲突解决了 ? 难道冲突的标记不是描述文本吗 ?</code> 也得到了验证, 文本描述信息确实不是用来标记冲突是否解决的, 但也带来了新的问题</p>
<ul>
<li>疑惑 5 : 是什么标记了冲突是否解决呢 ?</li>
</ul>
<p>这个问题先不说明, 这里继续之前的思路</p>
<p>看来 GitKraken 也不行, 这里突然想到了刚刚用 VSCode 查看文件的时候, 右下角不是有一个 <code>在合并编辑器中解析</code> 嘛! 对呀, VSCode 也可以解决冲突呀, 直接上 VSCode</p>
<ul>
<li>完美 ! VSCode 永远滴神 !</li>
</ul>
<p><img data-src="/images/git/merge_conflict_19.png" alt="完美 ! VSCode 永远滴神 !"></p>
<p><code>VSCode</code> 完美解决了冲突, 直接点击右下方 <code>完成合并</code>, 提交, 事情解决, 交差 !</p>
<p><strong><code>后来才知道原来这种冲突叫做 &#39;树冲突&#39;, 是不同于 &#39;逻辑冲突&#39; 的, 树冲突目前确实不能通过图形化界面解决, 需要手动解决, 希望后面图形化软件的作者们能解决这个问题</code></strong></p>
<h1 id="😴革命尚未成功-同志仍需努力"><a href="#😴革命尚未成功-同志仍需努力" class="headerlink" title="😴革命尚未成功, 同志仍需努力 !"></a>😴革命尚未成功, 同志仍需努力 !</h1><p>问题虽然解决了, 但是心头还是有很多不明白的关键点, 而且使用 Fork + VSCode 的工作流也跟难让人接受, 总不能合并一次还得用两个软件吧, 而且更多的是使用 Fork 而不是 VSCode, 所以看来还是得找到本质原因啊, 治标不治本是不行滴!</p>
<h1 id="🧐思路-2-用-Rebase-代替-Merge-可行不"><a href="#🧐思路-2-用-Rebase-代替-Merge-可行不" class="headerlink" title="🧐思路 2 : 用 Rebase 代替 Merge 可行不 ?"></a>🧐思路 2 : 用 Rebase 代替 Merge 可行不 ?</h1><p>直接进行试验, 在 Fork 中对分支进行变基</p>
<ul>
<li>成了 !</li>
</ul>
<p><img data-src="/images/git/merge_conflict_22.png" alt="成了 !"></p>
<p>从截图中可以看到, 使用 rebase 操作可以正确得到合并结果, 虽然有冲突, 但是也仅仅只有 1 个, 而且属于 <code>逻辑冲突</code>, 直接解决掉就行了</p>
<ul>
<li>GitKraken 也一样</li>
</ul>
<p><img data-src="/images/git/merge_conflict_23.png" alt="GitKraken 也一样"></p>
<p>reset 回之前的提交, 使用 GitKraken 来一次 rebase 也是同样的结果, 只有一个冲突, 解决后效果也是对的</p>
<h2 id="不使用-rebase-的原因"><a href="#不使用-rebase-的原因" class="headerlink" title="不使用 rebase 的原因"></a>不使用 rebase 的原因</h2><p>但是在大型项目中, 还是使用 merge 更好, 尤其是在有大量开发分支的项目中, 为了记录下每一次的合并的具体信息, 包括: 合并的分支, 合并的时间, 冲突的文件等等, 必须使用 merge, 同时 merge 也不会导致时空错乱的问题, merge 本质上是将提交直接合并, 而 rebase 本质是合并了提交的副本, 导致可能几个月前, 甚至几年前的提交变成了最近的提交... 而 rebase 所带来的 <strong>提交树简洁</strong>, 带来的 <strong>提交树易懂</strong> 的好处实在是微乎其微, 读不懂恰好说明图形化软件做的不好啊, 或者就是你能力不行啊! (开个玩笑, 别打我 😰)</p>
<p>至此, rebase 方案也被否决, 只能再次寻找其他的突破口, 此时我想到了 <code>是什么标记了冲突是否解决呢 ?</code>, 稍微搜索了一番就找到了答案.</p>
<h1 id="😥是什么标记了冲突是否解决呢"><a href="#😥是什么标记了冲突是否解决呢" class="headerlink" title="😥是什么标记了冲突是否解决呢 ?"></a>😥是什么标记了冲突是否解决呢 ?</h1><p>经过 Google 的搜索, 最终定位到了关键字 : <strong><strong>索引</strong></strong>, 不过还是先说明一下冲突描述文本吧</p>
<h2 id="冲突描述文本"><a href="#冲突描述文本" class="headerlink" title="冲突描述文本"></a>冲突描述文本</h2><p>首先 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 确实是用来描述冲突信息的, 但是并不是标记冲突是否解决, 而且这里的冲突描述信息还有好几种, 可以通过设置 <code>merge.conflictStyle</code> 来改变冲突描述文本的样式</p>
<p>这个是默认的样式, 名字就叫做 <code>merge</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Here are lines that are either unchanged from the common</span><br><span class="line">ancestor, or cleanly resolved because only one side changed,</span><br><span class="line">or cleanly resolved because both sides changed the same way.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt</span><br><span class="line">Conflict resolution is hard;</span><br><span class="line">let&#x27;s go shopping.</span><br><span class="line">=======</span><br><span class="line">Git makes conflict resolution easy.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt</span><br><span class="line">And here is another line that is cleanly resolved or unmodified.</span><br></pre></td></tr></table></figure>

<p>下面的是 <code>diff3</code> 样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Here are lines that are either unchanged from the common</span><br><span class="line">ancestor, or cleanly resolved because only one side changed,</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt</span><br><span class="line">or cleanly resolved because both sides changed the same way.</span><br><span class="line">Conflict resolution is hard;</span><br><span class="line">let&#x27;s go shopping.</span><br><span class="line">||||||| base:sample.txt</span><br><span class="line">or cleanly resolved because both sides changed identically.</span><br><span class="line">Conflict resolution is hard.</span><br><span class="line">=======</span><br><span class="line">or cleanly resolved because both sides changed the same way.</span><br><span class="line">Git makes conflict resolution easy.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt</span><br><span class="line">And here is another line that is cleanly resolved or unmodified.</span><br></pre></td></tr></table></figure>

<p>最后的是 <code>zdiff3</code> 样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Here are lines that are either unchanged from the common</span><br><span class="line">ancestor, or cleanly resolved because only one side changed,</span><br><span class="line">or cleanly resolved because both sides changed the same way.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt</span><br><span class="line">Conflict resolution is hard;</span><br><span class="line">let&#x27;s go shopping.</span><br><span class="line">||||||| base:sample.txt</span><br><span class="line">or cleanly resolved because both sides changed identically.</span><br><span class="line">Conflict resolution is hard.</span><br><span class="line">=======</span><br><span class="line">Git makes conflict resolution easy.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt</span><br><span class="line">And here is another line that is cleanly resolved or unmodified.</span><br></pre></td></tr></table></figure>

<p>我查看官方手册中就只有上面 3 种样式, 感兴趣的可以自行查阅, 这是官方手册</p>
<p>以 <code>diff3</code> 为例, 可以通过 <code>git config --global merge.conflictstyle diff3</code> 进行设置</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1tZXJnZS9lbg==">https://git-scm.com/docs/git-merge/en<i class="fa fa-external-link-alt"></i></span></p>
<p><strong><code> 啊啊啊啊 ! 😦 我怎么没早点想到啊! 如果真的使用上述的这种特殊文本来标记冲突是否解决, 那岂不是我这篇博客就提交不上去了, 毕竟博客中有这种文本 ... 😅 啊这... 无语了 ... 😑</code></strong></p>
<h2 id="文件状态的存储库-索引-Index"><a href="#文件状态的存储库-索引-Index" class="headerlink" title="文件状态的存储库 : 索引 (Index)"></a>文件状态的存储库 : 索引 (Index)</h2><p>经过大量搜索后, 我了解到了一件大事, 那就是原来 <code>index</code> 就是 <code>stage area</code>, 也就是 <code>暂存区</code>! ! (早说嘛, 早说暂存区不早就明白了 ? ! 哭了 ...) 暂存区的内容就是存储在 <code>.git/index</code> 文件中的</p>
<p>直接对冲突标记前后的 index 文件进行比较, 左侧是标记解决前的, 右侧是标记解决后的</p>
<ul>
<li>变更1</li>
</ul>
<p><img data-src="/images/git/merge_conflict_24.png" alt="变更1"></p>
<p>变更 1 并没有看到有明显含义的变更, 需要更深一步按照十六进制解读才行</p>
<ul>
<li>变更2</li>
</ul>
<p><img data-src="/images/git/merge_conflict_25.png" alt="变更2"></p>
<p>变更 2 种可以看到标记解读后, 多了一个 <code>REUC</code> 的字符串</p>
<ul>
<li>REUC 释义</li>
</ul>
<p><img data-src="/images/git/merge_conflict_26.png" alt="REUC 释义"></p>
<p>经查阅官方手册, <code>REUC</code> 是用来解决冲突后复原冲突的</p>
<p>由此也可以证明文件的各种状态都是在暂存区, 也就是索引库 <code>.git/index</code> 文件中保存的, 使用 <code>git status</code> 命令也可以看到各个文件的状态, 更详细的可以直接查阅手册</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1zdGF0dXMvZW4=">https://git-scm.com/docs/git-status/en<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>&#39; &#39; &#x3D; unmodified</p>
<p>M &#x3D; modified</p>
<p>T &#x3D; file type changed (regular file, symbolic link or submodule)</p>
<p>A &#x3D; added</p>
<p>D &#x3D; deleted</p>
<p>R &#x3D; renamed</p>
<p>C &#x3D; copied (if config option status. renames is set to &quot;copies&quot;)</p>
<p>U &#x3D; updated but unmerged</p>
</blockquote>
<p>其中 <code>U</code> 就是代表 <strong>未合并</strong> 状态的,  到这里小总结一下</p>
<table>
<thead>
<tr>
<th align="left">问题</th>
<th align="center">状态</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1 为什么自己新建仓库无法复现问题 ?</td>
<td align="center">未解决</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2 为啥合并前提示没有冲突, 随着合并的进行, 却出现了冲突 ?</td>
<td align="center">未解决</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">3 为啥 <code>added</code> 的解决方式会错误的解决冲突 ?</td>
<td align="center">已解决</td>
<td align="left">因为并没有修改文件, 而是直接修改了标记</td>
</tr>
<tr>
<td align="left">4 为啥文本中明明还存在冲突描述却被 Git 认为冲突解决了 ? 难道冲突的标记不是描述文本吗 ?</td>
<td align="center">已解决</td>
<td align="left">冲突描述文本并不是用来标记冲突的</td>
</tr>
<tr>
<td align="left">5 是什么标记了冲突是否解决呢 ?</td>
<td align="center">已解决</td>
<td align="left">在 &quot;.git&#x2F;index&quot; 文件中存储着冲突标记</td>
</tr>
<tr>
<td align="left">6 图形化软件无法正确执行 Merge 操作</td>
<td align="center">已解决</td>
<td align="left">可以正确执行 Merge</td>
</tr>
<tr>
<td align="left">7 图形化软件可以正确执行 Merge 操作, 但是无法正确解决冲突</td>
<td align="center">已解决</td>
<td align="left">对于 &quot;树冲突&quot; 图形化软件确实无法解决<br>需要使用文本工具手动解决</td>
</tr>
</tbody></table>
<h1 id="🧐思路-3-重命名操作"><a href="#🧐思路-3-重命名操作" class="headerlink" title="🧐思路 3 : 重命名操作"></a>🧐思路 3 : 重命名操作</h1><p>上面表格中第 2 个点让我注意到了另一件事, 一件非常非常重要的事, 之前的注意力一直在 <strong>冲突描述文本残留</strong> 上, 却没有注意到 <strong>发生冲突的文件压根不是一个文件呀</strong> !!!</p>
<p>先回到最初的起点</p>
<ul>
<li>最初的起点</li>
</ul>
<p><img data-src="/images/git/merge_conflict_1.png" alt="最初的起点"></p>
<p>回到最初的起点后可以看到发生冲突的文件居然是 <code>Coat_159.FBX.meta</code> 和 <code>HolySword_7_Lobby.fbx.meta</code> 文件, 这压根不是同一个文件啊, 也就是说想要这两个文件冲突, 必然要发生 <strong>重命名操作</strong>, 难道是重命名导致的 ?</p>
<p>再次回到 <code>Coat_159.FBX.meta</code> 的历史记录, 并没有发现重命名的提交</p>
<p><img data-src="/images/git/merge_conflict_6.png" alt="Coat_159.FBX.meta"></p>
<p>切到另一条合并分支, 查看 <code>HolySword_7_Lobby.fbx.meta</code> 的历史记录, 这个记录更少, 只有一次新增</p>
<p><img data-src="/images/git/merge_conflict_27.png" alt="HolySword_7_Lobby.fbx.meta"></p>
<p>这也太难受了 ... 这个思路也行不通吗 ...</p>
<h1 id="🧐思路-4-冲突的识别-重命名的识别-同文件的识别"><a href="#🧐思路-4-冲突的识别-重命名的识别-同文件的识别" class="headerlink" title="🧐思路 4 : 冲突的识别 &#x2F; 重命名的识别 &#x2F; 同文件的识别"></a>🧐思路 4 : 冲突的识别 &#x2F; 重命名的识别 &#x2F; 同文件的识别</h1><p>在检查历史记录并发现并没有重命名的操作之后, 我突然意识到会不会是 Git 主动把这两个文件当成同一个文件了 ? ? ? 这也就引出了关于重命名检测的思考</p>
<ul>
<li>疑惑 6 : Git 是如果识别重命名操作的 ? 对于常见的重命名操作, Git 是如何知道改名后的文件和改名前的文件是同一个文件并将变更类型标记为 &quot;重命名&quot; 的呢 ? 对于两条存在重命名提交的分支, 它们的合并操作中 Git 是如何识别冲突的呢 ?</li>
</ul>
<p>又是一番搜索查阅, 最终在官方手册中找到了答案, Git 冲突的检测确实存在多种情况, 具体取决于使用的合并策略</p>
<h2 id="合并策略"><a href="#合并策略" class="headerlink" title="合并策略"></a>合并策略</h2><p>Git 中的 Merge 还可以设置多种合并策略: <code>ort</code>, <code>recursive</code>, <code>resolve</code>, <code>octopus</code>, <code>ours</code>, <code>subtree</code>, 不同的策略对待文件变更的态度完全不同, 也就导致冲突的不同, 感兴趣的可以直接查阅手册</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1tZXJnZS9lbg==">https://git-scm.com/docs/git-merge/en<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="重命名检测机制"><a href="#重命名检测机制" class="headerlink" title="重命名检测机制"></a>重命名检测机制</h2><p>Git 中有一个 <code>重命名检测机制</code>, 这个机制就是用来检测变更前后名称不一致的文件是否是同一个文件的, 可以使用 <code>--find-renames[=&lt;n&gt;]</code> 开启检测, 也可以使用 <code>--no-renames</code> 关闭检测</p>
<p><img data-src="/images/git/merge_conflict_28.png" alt="--find-renames"></p>
<p>继续翻阅后发现, Git 中的默认设置为开启重命名检测, 并且检测的阈值为 50% : <code>find-renames=50%</code></p>
<p><img data-src="/images/git/merge_conflict_29.png" alt="--find-renames"></p>
<p><code>30%</code> 的含义就是一对 <code>delete</code> &#x2F; <code>add</code> 操作的两个文件之间的有 30% 是一模一样的, 就认为是同一个文件, <code>90%</code> 也就是需要 90% 是一模一样的才会被认为是同一个文件, 那么设置为 <code>100%</code> 就意味着两个文件必须完全一致才会被认为是同一个文件</p>
<h2 id="Unity-meta-文件"><a href="#Unity-meta-文件" class="headerlink" title="Unity meta 文件"></a>Unity meta 文件</h2><p>有了重命名检测机制的理论基础, 再联想到 Unity 的 meta 文件的特点 ... 嗯 ... 🤔 ... 啊 ! 😮 啊 ! ! 😮 啊 ! ! ! 😮 对的对的, 就是这样 !</p>
<p>Unity 的 meta 机制决定了存在大量相似的 meta 文件, 像 <strong>目录</strong>, <strong>配置文本</strong> 等无特殊处理类资源, 以及 <strong>预制体</strong>, <strong>材质球</strong>, <strong>场景</strong> 等复合类资源所序列化的 meta 文件极其相似, 更何况它们同种类资源之间的 meta 文件了, 那更是除了 guid 其他的完全一致 ! 因此非常容易被 Git 识别为相同的文件, 也就是误识别为 <code>重命名</code> 操作</p>
<h3 id="目录序列化出的-meta-文件"><a href="#目录序列化出的-meta-文件" class="headerlink" title="目录序列化出的 meta 文件"></a>目录序列化出的 meta 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 目录 序列化出的 meta 文件</span><br><span class="line">fileFormatVersion: 2</span><br><span class="line">guid: f41c5b2d49a72dc47a07d681a9ba2bf0</span><br><span class="line">folderAsset: yes</span><br><span class="line">DefaultImporter:</span><br><span class="line">  externalObjects: &#123;&#125;</span><br><span class="line">  userData: </span><br><span class="line">  assetBundleName: </span><br><span class="line">  assetBundleVariant: </span><br></pre></td></tr></table></figure>

<h3 id="文本文件序列化出的-meta-文件"><a href="#文本文件序列化出的-meta-文件" class="headerlink" title="文本文件序列化出的 meta 文件"></a>文本文件序列化出的 meta 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文本文件序列化出的 meta 文件</span><br><span class="line">fileFormatVersion: 2</span><br><span class="line">guid: 368f799b221cab84782a3f0ec5d8459c</span><br><span class="line">TextScriptImporter:</span><br><span class="line">  externalObjects: &#123;&#125;</span><br><span class="line">  userData: </span><br><span class="line">  assetBundleName: </span><br><span class="line">  assetBundleVariant: </span><br></pre></td></tr></table></figure>

<h3 id="场景资源序列化出的-meta-文件"><a href="#场景资源序列化出的-meta-文件" class="headerlink" title="场景资源序列化出的 meta 文件"></a>场景资源序列化出的 meta 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 场景资源序列化出的 meta 文件</span><br><span class="line">fileFormatVersion: 2</span><br><span class="line">guid: 62c4bca74e32619458a3997c632ed9e7</span><br><span class="line">DefaultImporter:</span><br><span class="line">  externalObjects: &#123;&#125;</span><br><span class="line">  userData: </span><br><span class="line">  assetBundleName: </span><br><span class="line">  assetBundleVariant: </span><br></pre></td></tr></table></figure>

<h3 id="预制体资源序列化出的-meta-文件"><a href="#预制体资源序列化出的-meta-文件" class="headerlink" title="预制体资源序列化出的 meta 文件"></a>预制体资源序列化出的 meta 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 预制体资源序列化出的 meta 文件</span><br><span class="line">fileFormatVersion: 2</span><br><span class="line">guid: c838f6f228af3d44bb70ab0d05c54fa4</span><br><span class="line">PrefabImporter:</span><br><span class="line">  externalObjects: &#123;&#125;</span><br><span class="line">  userData: </span><br><span class="line">  assetBundleName: </span><br><span class="line">  assetBundleVariant: </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="材质球资源序列化出的-meta-文件"><a href="#材质球资源序列化出的-meta-文件" class="headerlink" title="材质球资源序列化出的 meta 文件"></a>材质球资源序列化出的 meta 文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 材质球资源序列化出的 meta 文件</span><br><span class="line">fileFormatVersion: 2</span><br><span class="line">guid: 6493dc037fa3ed14f83f9cbd0228376c</span><br><span class="line">NativeFormatImporter:</span><br><span class="line">  externalObjects: &#123;&#125;</span><br><span class="line">  mainObjectFileID: 0</span><br><span class="line">  userData: </span><br><span class="line">  assetBundleName: </span><br><span class="line">  assetBundleVariant: </span><br></pre></td></tr></table></figure>

<p>上面几种的 meta 文件是不是几乎一致 ?</p>
<p>同样, 对于具有复杂导入设置的图片资源, 即使所序列化得到的 meta 文件很复杂, 但是大量的图片的导入设置都是一模一样的, 是的, 一模一样的导入设置, 这也就导致了序列化出来的 meta 相似度更高 !</p>
<p>随便从项目中找了两张, 就发现仅仅只有 guid 不同, 在如此大量的文本总量下, 这至少得是 90% 的相似度了吧 😨</p>
<p><img data-src="/images/git/merge_conflict_30.png" alt="图片资源"></p>
<p>同样的模型也是一样, 在一致的导入设置下, 如果都是使用了同一套骨骼, 也不导入内嵌材质球, 那不同的地方少之又少, 基本就只剩下 guid 了 !</p>
<p>比较两个简单模型之间的不同, 发现仅仅只有 guid 和内嵌材质球的名字不同而已, 这也应该达到  90% 的相似度了吧 😨 </p>
<p><img data-src="/images/git/merge_conflict_31.png" alt="模型资源简单"></p>
<p>对于更复杂的模型, 也只是增加了<strong>内嵌材质球的名字</strong> (前提是开启了内嵌材质球导入) 以及<strong>骨骼的名字</strong> 等几处不同而已, 相似度还是很高 !</p>
<p><img data-src="/images/git/merge_conflict_32.png" alt="模型资源复杂"></p>
<h1 id="😀问题解决"><a href="#😀问题解决" class="headerlink" title="😀问题解决"></a>😀问题解决</h1><p>直接设置重命名检测的阈值为 <strong>100%</strong>, 这样就必须完全一致才会认为是同文件</p>
<p>直接使用命令进行合并 <code>git merge -s ort -X find-renames=100%</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS E:\Sausage_Release\Assets\Art&gt; git merge -s ort -X find-renames=100% MergeTest/Old_Develop</span><br></pre></td></tr></table></figure>

<ul>
<li>完美合并 !</li>
</ul>
<p><img data-src="/images/git/merge_conflict_33.png" alt="完美合并"></p>
<p>完美的合并, 没有发生任何冲突 ! ! ! 完美 ! 收工 ! 🤔 啊来 ? 我是不是漏了什么 ? 突然有点感觉不对劲 ...</p>
<p>啊 ! Σ(っ °Д °;)っ 想起来了, 是最开始遇到的问题, 没想到最后的时候解决的是最开始的问题😂, 这里总结一下</p>
<table>
<thead>
<tr>
<th align="left">问题</th>
<th align="center">状态</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1 为什么自己新建仓库无法复现问题 ?</td>
<td align="center">已解决</td>
<td align="left">因为不是 Unity 项目, 且变更简单, 没有复杂的 delete&#x2F;add 操作, 无法触发重命名检测机制</td>
</tr>
<tr>
<td align="left">2 为啥合并前提示没有冲突, 随着合并的进行, 却出现了冲突 ?</td>
<td align="center">已解决</td>
<td align="left">Unity 的 meta 文件机制和 Git 重命名检查机制共同作用导致</td>
</tr>
<tr>
<td align="left">3 为啥 <code>added</code> 的解决方式会错误的解决冲突 ?</td>
<td align="center">已解决</td>
<td align="left">因为并没有修改文件, 而是直接修改了标记</td>
</tr>
<tr>
<td align="left">4 为啥文本中明明还存在冲突描述却被 Git 认为冲突解决了 ?<br>难道冲突的标记不是描述文本吗 ?</td>
<td align="center">已解决</td>
<td align="left">冲突描述文本确实不是用来标记冲突的</td>
</tr>
<tr>
<td align="left">5 是什么标记了冲突是否解决呢 ?</td>
<td align="center">已解决</td>
<td align="left">在 &quot;.git&#x2F;index&quot; 文件中存储着冲突标记</td>
</tr>
<tr>
<td align="left">6 图形化软件无法正确执行 Merge 操作</td>
<td align="center">已解决</td>
<td align="left">可以正确执行 Merge</td>
</tr>
<tr>
<td align="left">7 图形化软件可以正确执行 Merge 操作, 但是无法正确解决冲突</td>
<td align="center">已解决</td>
<td align="left">对于 &quot;树冲突&quot; 图形化软件确实无法解决<br>需要使用文本工具手动解决</td>
</tr>
<tr>
<td align="left">8 Git 是如果识别重命名操作的 ?<br>对于重命名操作, Git 是如何知道改名后的文件和改名前的文件是同一个文件呢 ?<br>对于两条存在重命名提交的分支, 它们的合并操作中 Git 是如何识别冲突的呢 ?</td>
<td align="center">已解决</td>
<td align="left">多种合并策略以及重命名检测机制</td>
</tr>
</tbody></table>
<p>至此全部的疑问都得到了解答, 舒服 ~</p>
<h1 id="🤡关于-Fork-历史记录显示错误的解释"><a href="#🤡关于-Fork-历史记录显示错误的解释" class="headerlink" title="🤡关于 Fork 历史记录显示错误的解释"></a>🤡关于 Fork 历史记录显示错误的解释</h1><p>经过此次问题的处理, 我查阅了大量 Git 官方的手册, 于是也试着从手册中寻找答案, 果然, <code>Git log</code> 命令中同样存在参数控制, <code>--follow</code> 参数便可以得到和 Fork 软件中一样的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--follow</span><br><span class="line">    Continue listing the history of a file beyond renames (works only for a single file).</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/git/merge_conflict_34.png" alt="历史记录"></p>
<p>看, 是不是和 Fork 中显示的历史记录一致了 !</p>
<p><code>[注意] 了解 Git 设计思想的应该都知道, Git 是不会保存任何文件名称变更的, tree 只会保存名称, blob 只会保存内容, 因此 Git 中甚至没有 diff 的概念, 所以强烈建议禁止使用 --follow, 在没有 diff 概念的 Git 中重命名的检测完全没有意义!</code> 即使是两个内容完全一致的文件, 背后的操作也不一定是重命名! 想要了解更多的内容就得去了解 Git 设计之初的思想了, 这里就不展开了, 感兴趣的话可以直接找后面的参考链接阅读.</p>
<h1 id="🦄总结"><a href="#🦄总结" class="headerlink" title="🦄总结"></a>🦄总结</h1><p>此次问题本质上来说就是由于 <strong>Unity 的 meta 文件机制</strong> 和 <strong>Git 重命名检查机制</strong> 共同作用所导致的 <code>树冲突</code> 无法自动合并, 想要解决此问题, 由于 meta 文件无法改变, 那么只能改变重命名检测机制了</p>
<h2 id="使用设置-diff-renameLimit"><a href="#使用设置-diff-renameLimit" class="headerlink" title="使用设置 diff.renameLimit"></a>使用设置 diff.renameLimit</h2><p><code>git config diff.renameLimit 1</code></p>
<p>限制 diff 时重命名检测的文件数量为 1, 不建议使用, 可能会导致签出, 提交等操作时无法识别任何重命名操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The number of files to consider in the exhaustive portion of copy/rename detection;</span><br><span class="line">equivalent to the git diff option -l.</span><br><span class="line">If not set, the default value is currently 1000.</span><br><span class="line">This setting has no effect if rename detection is turned off.</span><br></pre></td></tr></table></figure>

<h2 id="使用设置-merge-renameLimit"><a href="#使用设置-merge-renameLimit" class="headerlink" title="使用设置 merge.renameLimit"></a>使用设置 merge.renameLimit</h2><p><code>git config merge.renameLimit 1</code></p>
<p>限制 merge 时重命名检测的文件数量为 1, 不建议使用, 真正的重命名操作也不会被识别到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The number of files to consider in the exhaustive portion of rename detection during a merge.</span><br><span class="line">If not specified, defaults to the value of diff.renameLimit.</span><br><span class="line">If neither merge.renameLimit nor diff.renameLimit are specified, currently defaults to 7000.</span><br><span class="line">This setting has no effect if rename detection is turned off.</span><br></pre></td></tr></table></figure>

<h2 id="使用参数-find-renames-建议使用"><a href="#使用参数-find-renames-建议使用" class="headerlink" title="使用参数 find-renames[&#x3D;&lt;n&gt;] (建议使用)"></a>使用参数 find-renames[&#x3D;&lt;n&gt;] (建议使用)</h2><p><code>git merge -s ort -X find-renames=100% &lt;branch&gt;</code></p>
<p>设置只有文件完全一致时才会识别为重命名操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Turn on rename detection, optionally setting the similarity threshold.</span><br><span class="line">This is the default.</span><br><span class="line">This overrides the merge.renames configuration variable.</span><br></pre></td></tr></table></figure>

<h1 id="👀问题原理解析"><a href="#👀问题原理解析" class="headerlink" title="👀问题原理解析"></a>👀问题原理解析</h1><p>想要解析问题背后的原理, 就必须先解释什么是 <code>树冲突</code>, 树冲突是 SVN 类版本控制系统的一种冲突类型, SVN 冲突包括 <code>内容冲突</code> 和 <code>树冲突</code>, 虽然树冲突是 SVN 中的概念, 但是 Git 中同样存在树冲突</p>
<p>这次问题的冲突类型就是树冲突, 最常见的树冲突就是同一个文件, 在 A 分支删除或者新增, 在 B 分支修改, 此时将 A 和 B 合并, 这就产生了树冲突 ... 甚至 B 分支不做任何变更, 也会导致树冲突, 回顾一下此次合并时的冲突</p>
<p><img data-src="/images/git/merge_conflict_12.png" alt="合并时的冲突"></p>
<p>可以看到恰好就是一条分支新增文件, 另一条分支修改文件, 导致了典型的树冲突, 那么为什么会导致树冲突呢?</p>
<p>很好理解, 通过分别切换到两条分支上发现, 这两个文件 <code>Coat_159.FBX.meta</code> 和 <code>HolySword_7_Lobby.fbx.meta</code> 分别在两条分支上, 这里简称为 <code>C</code> 和 <code>H</code>, 一条分支是对 C 的新增和修改, 另一条是对 H 的新增, 汇总到最终的合并上, 只看最后的提交就是一条分支是对 C 的修改, 另一条是对 H 的新增, 但是由于 Git 将这两个文件识别为了同一个文件, 于是就变成了两条分支, 一条是对文件的修改, 一条是对文件的新增, 于是出现了树冲突!</p>
<h1 id="📕参考链接"><a href="#📕参考链接" class="headerlink" title="📕参考链接"></a>📕参考链接</h1><ul>
<li>官方手册<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1tZXJnZS9lbg==">https://git-scm.com/docs/git-merge/en<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1kaWZmL2Vu">https://git-scm.com/docs/git-diff/en<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2luZGV4LWZvcm1hdA==">https://git-scm.com/docs/index-format<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1zdGF0dXMvZW4=">https://git-scm.com/docs/git-status/en<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC11cGRhdGUtaW5kZXgvZW4=">https://git-scm.com/docs/git-update-index/en<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1sb2cvZW4=">https://git-scm.com/docs/git-log/en<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jb25maWcvZW4=">https://git-scm.com/docs/git-config/en<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>Git 社区手册<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRib29rLmxpdWh1aTk5OC5jb20v">https://gitbook.liuhui998.com/<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>深入 Git 索引<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly91bnRpdGxlZC5wdy9zb2Z0d2FyZS8xMTc2Lmh0bWw=">https://untitled.pw/software/1176.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>Git 权威指南<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cud29ybGRoZWxsby5uZXQvZ290Z2l0LzAzLWdpdC1oYXJtb255LzAyMC1jb25mbGljdC5odG1s">https://www.worldhello.net/gotgit/03-git-harmony/020-conflict.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
<li>深入理解 Git<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly90YW9zaHUuaW4vZ2l0L2dpdC1pbnRlcm5hbC5odG1s">https://taoshu.in/git/git-internal.html<i class="fa fa-external-link-alt"></i></span></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Unity 中实现 Android 分享文本、图片、文件功能</title>
    <url>/unity/unity_android_share.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🥦前言"><a href="#🥦前言" class="headerlink" title="🥦前言"></a>🥦前言</h1><p>本人对于安卓开发是完完全全的新手, 什么 <code>file://</code> 什么 <code>content://</code> 都是第一次听说, 因为本文也是针对完全新手的小白</p>
<h1 id="🎈使用-Asset-Store-插件实现分享功能"><a href="#🎈使用-Asset-Store-插件实现分享功能" class="headerlink" title="🎈使用 Asset Store 插件实现分享功能"></a>🎈使用 Asset Store 插件实现分享功能</h1><p>既然是实现自己从未接触过领域的功能, 首先想到的就是尝试使用插件, 但是 ...</p>
<p>商店中并没有免费且好用的分享插件, 基本都是收费的, 而且还很贵, 都在 25 美元以上! 于是只好自己想办法编写功能</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3NldHN0b3JlLnVuaXR5LmNvbS9wYWNrYWdlcy90b29scy9pbnRlZ3JhdGlvbi9uYXRpdmUtc2NyZWVuLXNoYXJlLTEwNTA3NA==">Native Screen Share<i class="fa fa-external-link-alt"></i></span> : $25</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3NldHN0b3JlLnVuaXR5LmNvbS9wYWNrYWdlcy90b29scy9pbnRlZ3JhdGlvbi9uYXRpdmUtc2hhcmUtc2NyZWVuc2hvdC1pb3MtYW5kLWFuZHJvaWQtMTU0NjM5">Native Share Screenshot (iOS and Android)<i class="fa fa-external-link-alt"></i></span> : $20</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3NldHN0b3JlLnVuaXR5LmNvbS9wYWNrYWdlcy90b29scy9pbnRlZ3JhdGlvbi9uYXRpdmUtc2NyZWVuLXNoYXJlLXRyeS1pdC0xMDUwNjk=">Native Screen Share - Try It<i class="fa fa-external-link-alt"></i></span> : Free, 好像不兼容 Android 7.0, 而且已经是 2019 年的了</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3NldHN0b3JlLnVuaXR5LmNvbS9wYWNrYWdlcy90b29scy9pbnRlZ3JhdGlvbi9uYXRpdmUtd2ViLXNjcmVlbi1jYXB0dXJlLXNhdmUtYW5kLXNoYXJlLTI4NzEwNw==">Native Web Screen Capture, Save, and Share<i class="fa fa-external-link-alt"></i></span> : $45</li>
</ul>
<p>但是有一个很不错的导入导出功能的插件, 注意, 导入导出功能和分享功能可不是不一回事哦！</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3NldHN0b3JlLnVuaXR5LmNvbS9wYWNrYWdlcy90b29scy9pbnRlZ3JhdGlvbi9uYXRpdmUtZmlsZS1waWNrZXItZm9yLWFuZHJvaWQtaW9zLTE3MzIzOA==">Native File Picker for Android &amp; iOS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hc3NldHN0b3JlLnVuaXR5LmNvbS9wYWNrYWdlcy90b29scy9ndWkvcnVudGltZS1maWxlLWJyb3dzZXItMTEzMDA2">Runtime File Browser<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="🥝使用原生安卓包"><a href="#🥝使用原生安卓包" class="headerlink" title="🥝使用原生安卓包"></a>🥝使用原生安卓包</h1><p>Unity 支持直接引用 AAR 文件 (Android Archive)</p>
<p>可以看下官方对于 Unity 如何进行 Android 开发的说明</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tLzYwMDAuMC9Eb2N1bWVudGF0aW9uL01hbnVhbC9hbmRyb2lkLmh0bWw=">官方手册<i class="fa fa-external-link-alt"></i></span></p>
<p>当然这份说明大而全, 我们这里只需要看 Unity 如何引用 Android 原生代码的部分即可</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tLzYwMDAuMC9Eb2N1bWVudGF0aW9uL01hbnVhbC9QbHVnaW5zRm9yQW5kcm9pZC5odG1s">如何引用原生代码<i class="fa fa-external-link-alt"></i></span></p>
<p>从这个页面中 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tLzYwMDAuMC9Eb2N1bWVudGF0aW9uL01hbnVhbC9hbmRyb2lkLXBsdWdpbi10eXBlcy5odG1s">Android plug-in types<i class="fa fa-external-link-alt"></i></span> 可以看出, Unity 支持很多种引用原生代码的方式</p>
<ul>
<li>引用 <code>Android Library Projects</code></li>
<li>引用 <code>Android Archive plug-ins</code> 也就是 AAR 包</li>
<li>引用 <code>JAR plug-ins</code> 也就是 jar 包</li>
<li>引用 <code>Native plug-ins for Android</code> 我未涉足过此领域, 猜测应该是用 C++ 写的包</li>
<li>引用 <code>Java and Kotlin source plug-ins</code> 也就是直接的 java 代码文件和 kotlin 代码文件</li>
</ul>
<p>我这次使用的就是 AAR 包的方式, 使用 Java 编写代码, 打包为 AAR 供 Unity 调用即可</p>
<h1 id="🍀关于安卓分享的说明"><a href="#🍀关于安卓分享的说明" class="headerlink" title="🍀关于安卓分享的说明"></a>🍀关于安卓分享的说明</h1><p>在 Android 7.0 之前, 应用可以使用 <code>file://URI</code> 的方式将自己的文件共享给其他应用访问。</p>
<p>然而从 Android 7.0 开始, 为了进一步提高私有目录的安全性, Google 不再允许通过 <code>file://URI</code> 的形式直接共享文件给其他应用, 否则会触发 <code>FileUriExposedException</code> 异常, 导致应用崩溃</p>
<p>那么, 如果我现在想要实现文件分享功能, 该怎么办？在 Android 7.0 及以上, 是否还有办法安全地进行文件共享？</p>
<h1 id="🌴FileProvider"><a href="#🌴FileProvider" class="headerlink" title="🌴FileProvider"></a>🌴FileProvider</h1><p>在 Android 7.0 进行更加严格地权限管理的同时, Google 提供了 FileProvider 机制, 这个机制允许应用通过 <code>content://</code> 方式安全地共享文件, 并通过 <code>grantUriPermissions</code> 机制控制文件访问权限</p>
<p>有了上面的理论基础, 下面开始分步骤讲解操作</p>
<h1 id="🍓创建一个-Android-项目"><a href="#🍓创建一个-Android-项目" class="headerlink" title="🍓创建一个 Android 项目"></a>🍓创建一个 Android 项目</h1><p>打开 Android Studio, 点击 <code>New Project</code>, 此时需要选择一个项目模板, 直接选择 <code>No Activity</code></p>
<p>之后需要填写工程信息</p>
<h2 id="Name-Unity-Plugin-Android"><a href="#Name-Unity-Plugin-Android" class="headerlink" title="Name: Unity-Plugin-Android"></a>Name: Unity-Plugin-Android</h2><p>工程名字我写的是 <code>Unity-Plugin-Android</code>, 表示这是我给 Unity 用的 Android 插件, 之所以这样命名是因为我所有的项目都是这样命名的</p>
<h2 id="Package-name-com-kuroha-unity-plugin-android"><a href="#Package-name-com-kuroha-unity-plugin-android" class="headerlink" title="Package name: com.kuroha.unity_plugin_android"></a>Package name: com.kuroha.unity_plugin_android</h2><p>这里的包名不需要和 Unity 中打包时的包名一致, 可以按照自己的规则编写即可</p>
<p>比如我的 Unity 项目包名是 <code>com.kuroha.swordrequiem</code></p>
<p>这里我填写的则是 <code>com.kuroha.unity_plugin_android</code></p>
<h2 id="Save-location-F-Unity-Plugin-Android"><a href="#Save-location-F-Unity-Plugin-Android" class="headerlink" title="Save location: F:\Unity-Plugin-Android"></a>Save location: F:\Unity-Plugin-Android</h2><p>填写工程文件的存放目录, 因为我整个 F 盘都是用来放置工程的, 于是我直接放在了 <code>F:\Unity-Plugin-Android</code> 中</p>
<h2 id="Language-Java"><a href="#Language-Java" class="headerlink" title="Language: Java"></a>Language: Java</h2><p>编程语言, 我从来没有学习过 Kotlin, 所以选择了 Java</p>
<h2 id="Minimum-SDK-API-24"><a href="#Minimum-SDK-API-24" class="headerlink" title="Minimum SDK: API 24"></a>Minimum SDK: API 24</h2><p>重点来了, 这里需要设置最小的 API 版本, 这个数字必须和 Unity 中的 <code>Minimum API Level</code> 保持一致! 否则会打包失败!</p>
<p>我当时的情况是, Unity 设置了 23, 插件设置了 24, 打包时报错了, 因为不清楚是否只是这里的数字比 Unity 的小即可还是必须保持一致, 强烈建议保持一致! 更省心!</p>
<p>另外因为后面要用的 <code>FileProvider</code> 是 Android 7.0 推出的, 因为建议这里选择 24, Unity 中的 Minimum API Level 也设置为 24</p>
<h2 id="Build-configuration-language-Kotlin-DSL"><a href="#Build-configuration-language-Kotlin-DSL" class="headerlink" title="Build configuration language: Kotlin DSL"></a>Build configuration language: Kotlin DSL</h2><p>这个选项我了解的并不深, 于是选择了推荐的选项, 即 Kotlin DSL, 后面的 <code>[Recommended]</code> 就是推荐的意思</p>
<h1 id="🌱调整项目目录的显示模式"><a href="#🌱调整项目目录的显示模式" class="headerlink" title="🌱调整项目目录的显示模式"></a>🌱调整项目目录的显示模式</h1><p>前面新建完成 Android 工程后, Android Studio 中可以看到一个空的 Android 项目</p>
<p>左侧文件目录的默认显示模式是 : <code>Android</code>, 这个显示的其实是项目的逻辑结构, 并不是实际的文件结构, 因此对于新手而言, 还是切换到 <code>Project</code> 模式更好一些.</p>
<p>切换到 <code>Project</code> 模式后, 仅有 <code>Android</code>, <code>External Libraries</code>, <code>Scratches and Consoles</code> 三项.</p>
<h1 id="🌳下载-SDK-NDK"><a href="#🌳下载-SDK-NDK" class="headerlink" title="🌳下载 SDK, NDK"></a>🌳下载 SDK, NDK</h1><p>据 Android Studio 官方说明, 会在首次构建时自动下载安装</p>
<blockquote>
<p>自动安装 NDK 和 CMake<br>Android Gradle 插件 4.2.0 及更高版本可在您首次构建项目时自动安装所需的 NDK 和 CMake，前提是您已预先接受其二者的许可。<br>安装 NDK 和 CMake<br>当您安装 NDK 时，Android Studio 会选择可用的最新 NDK 版本。对于大多数项目，安装此默认版本的 NDK 已经足够。</p>
</blockquote>
<p>所以我们来执行一次构建, 打开主菜单中的 <code>Build</code> 菜单, 第一个选项就是 <code>Make Project</code>, 点击这个选项会直接开始构建, 触发下载 SDK</p>
<p>需要等待一段时间, 还挺长的, 我等了接近一个小时吧.</p>
<p>不仅仅是构建需要下载 SDK, 接下来我们要需要的使用 <code>File/New/New Module...</code> 选项, 同样需要 SDK, 所以乖乖等资源下载完吧, 不然 <code>File/New/New Module...</code> 选项直接是灰色的, 根本点不了...</p>
<h1 id="🍨新建-Module"><a href="#🍨新建-Module" class="headerlink" title="🍨新建 Module"></a>🍨新建 Module</h1><p>资源下载完成后, 就可以点击 <code>File/New/New Module...</code> 选项了.</p>
<p>点击后首先需要选择 Module 的模板, 这里我们选择安卓原生库, 即 <code>Android Native Library</code>, 之后填写 Module 的具体信息</p>
<h2 id="Module-name-Android-Library"><a href="#Module-name-Android-Library" class="headerlink" title="Module name: Android-Library"></a>Module name: Android-Library</h2><p>设置一下模块名称, 我填写了 Android-Library</p>
<h2 id="Package-name-com-kuroha-android-library"><a href="#Package-name-com-kuroha-android-library" class="headerlink" title="Package name: com.kuroha.android_library"></a>Package name: com.kuroha.android_library</h2><p>使用了自动生成的 com.kuroha.android_library</p>
<h2 id="Language-Java-1"><a href="#Language-Java-1" class="headerlink" title="Language: Java"></a>Language: Java</h2><p>选择 Java 作为编程语言</p>
<h2 id="C-Standard-Toolchain-Default"><a href="#C-Standard-Toolchain-Default" class="headerlink" title="C++ Standard: Toolchain Default"></a>C++ Standard: Toolchain Default</h2><p>我选择了让工具链自动使用默认值</p>
<h2 id="Minimum-SDK-24"><a href="#Minimum-SDK-24" class="headerlink" title="Minimum SDK: 24"></a>Minimum SDK: 24</h2><p>必须和 Unity 中的 <code>Minimum API Level</code> 保持一致! 否则会打包失败!</p>
<p>建议这里选择 24, Unity 中的 Minimum API Level 也设置为 24</p>
<h2 id="Build-configuration-language-Kotlin-DSL-1"><a href="#Build-configuration-language-Kotlin-DSL-1" class="headerlink" title="Build configuration language: Kotlin DSL"></a>Build configuration language: Kotlin DSL</h2><p>同样使用推荐设置</p>
<h1 id="🍉配置-FileProvider"><a href="#🍉配置-FileProvider" class="headerlink" title="🍉配置 FileProvider"></a>🍉配置 FileProvider</h1><p>模块建好后, 在工程目录下可以直接找到模块的文件夹, 比如我的就是 Android-Library 文件夹, 如果你找不到说明你的目录显示模式不对, 默认是 Android 模式, 改为 Project 模式就可以看到了</p>
<h2 id="AndroidManifest"><a href="#AndroidManifest" class="headerlink" title="AndroidManifest"></a>AndroidManifest</h2><p>那么先来配置一下 FileProvider, 将模块目录中的 <code>/src/main/AndroidManifest.xml</code> 文件改为以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;applicationId&#125;.file_provider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">&quot;@xml/file_path&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时最后一行的 <code>@xml/file_path</code> 会是红色的, 因为我们还没有新建对应的 <code>file_path</code> 文件</p>
<h2 id="file-path"><a href="#file-path" class="headerlink" title="file_path"></a>file_path</h2><p>在模块目录中新建以下文件 <code>/src/main/res/xml/file_path.xml</code>, 如果中间某个层级没有, 直接新建对应名称的层级即可</p>
<p>这里的文件名其实就是前面 <code>/src/main/AndroidManifest.xml</code> 文件中最后写的那句 <code>android:resource=&quot;@xml/file_path&quot;</code></p>
<p>file_path 文件新建成功后, 粘贴以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache-path</span> <span class="attr">name</span>=<span class="string">&quot;cache&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;external&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-files-path</span> <span class="attr">name</span>=<span class="string">&quot;external_file_path&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-cache-path</span> <span class="attr">name</span>=<span class="string">&quot;external_cache_path&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到此 FileProvider 就配置完成了, 是不是很简单, 此时再回去看 AndroidManifest 文件就会发现最后那里不会再变红了. 接下来就需要开始写代码了</p>
<h1 id="🍇使用-Java-编写分享逻辑"><a href="#🍇使用-Java-编写分享逻辑" class="headerlink" title="🍇使用 Java 编写分享逻辑"></a>🍇使用 Java 编写分享逻辑</h1><p>以我项目中的模块为例, 我模块中已经新建好了一个 <code>\src\main\java\com\kuroha\android_library\NativeLib.java</code> 文件</p>
<p>找到这个 Java 文件, 修改其中的内容为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroha.android_library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.core.content.FileProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShareUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ShareFile</span><span class="params">(Context context, String filePath, String title)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authority</span> <span class="operator">=</span> context.getPackageName() + <span class="string">&quot;.file_provider&quot;</span>;</span><br><span class="line">            <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> FileProvider.getUriForFile(context, authority, file);</span><br><span class="line"></span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_SEND);</span><br><span class="line">            intent.setType(<span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">            intent.putExtra(Intent.EXTRA_STREAM, uri);</span><br><span class="line">            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line"></span><br><span class="line">            <span class="type">Intent</span> <span class="variable">chooser</span> <span class="operator">=</span> Intent.createChooser(intent, title);</span><br><span class="line">            context.startActivity(chooser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 Java 中要求<strong>类名必须和文件名一致</strong>, 所以要么你修改类名为它默认提供的 NativeLib, 要么将文件重命名为 ShareUtil, 重命名这种操作总归不用再教了吧...</p>
<p>至此就已经完成了, 直接构建, 在模块目录中就可以看到打包的 AAR 包了, 我的是: <code>/build/outputs/aar/Android-Library-debug.aar</code></p>
<p>为什么带一个 <code>debug</code> 呢, 是因为我们的项目是 debug 项目, 你改为 release 项目, 那么后面就是跟着一个 release 了, 不过 release 项目需要提供签名, 比较麻烦不是吗, 所以看你自己的选择啦 ~ 设置为 debug 和 release 都可以, 反正这个包不是直接暴露给玩家的, 只是我们自己内部使用罢了</p>
<h1 id="🍒Unity-引用-AAR-包"><a href="#🍒Unity-引用-AAR-包" class="headerlink" title="🍒Unity 引用 AAR 包"></a>🍒Unity 引用 AAR 包</h1><p>据 Unity 官方的使用说明, 只要将打包的 AAR 包放到 Unity 项目内的 Assets 目录内的任意目录即可, 不再要求不许放在 Plugins 文件夹内, 因此我放在了自己的游戏框架目录内, 这样可以重复使用嘛</p>
<p>这里是官方说明: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tLzYwMDAuMC9Eb2N1bWVudGF0aW9uL01hbnVhbC9hbmRyb2lkLWFhci1pbXBvcnQuaHRtbA==">Import an Android Archive plug-in<i class="fa fa-external-link-alt"></i></span></p>
<p>我也直接把链接内的内容贴在下面:</p>
<blockquote>
<h2 id="Import-an-Android-Archive-plug-in"><a href="#Import-an-Android-Archive-plug-in" class="headerlink" title="Import an Android Archive plug-in"></a>Import an Android Archive plug-in</h2><p>This page describes how to import an Android Archive (AAR) plug-in into your Unity Project.</p>
<ol>
<li>Copy the AAR file to your Unity Project’s Assets folder.</li>
<li>Select the AAR in Unity and view it in the Inspector.</li>
<li>In the Select platforms for plugin section, select Android.</li>
<li>Select Apply.</li>
</ol>
</blockquote>
<p>在 Unity 中新建一个脚本 <code>FileUtilAndroid.cs</code></p>
<p>复制粘贴以下内容, 其中命名空间之类的按照自己项目的要求改一下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Kuroha.Utility</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">FileUtilAndroid</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> isProcessing;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AndroidJavaClass intentClass;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AndroidJavaObject intentObject;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AndroidJavaClass unityClass;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AndroidJavaClass shareUtilClass;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分享一段文本</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;shareTitle&quot;&gt;</span>分享页面的标题<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;shareMessage&quot;&gt;</span>要分享的文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;shareSubject&quot;&gt;</span>要分享的主题<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功标志<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShareText</span>(<span class="params"><span class="built_in">string</span> shareTitle, <span class="built_in">string</span> shareMessage, <span class="built_in">string</span> shareSubject</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProcessing)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            isProcessing = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            unityClass ??= <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>);</span><br><span class="line">            intentClass ??= <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;android.content.Intent&quot;</span>);</span><br><span class="line">            intentObject ??= <span class="keyword">new</span> AndroidJavaObject(<span class="string">&quot;android.content.Intent&quot;</span>);</span><br><span class="line"></span><br><span class="line">            intentObject.Call&lt;AndroidJavaObject&gt;(<span class="string">&quot;setAction&quot;</span>, intentClass.GetStatic&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;ACTION_SEND&quot;</span>));</span><br><span class="line">            intentObject.Call&lt;AndroidJavaObject&gt;(<span class="string">&quot;setType&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            intentObject.Call&lt;AndroidJavaObject&gt;(<span class="string">&quot;putExtra&quot;</span>, intentClass.GetStatic&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;EXTRA_SUBJECT&quot;</span>), shareSubject);</span><br><span class="line">            intentObject.Call&lt;AndroidJavaObject&gt;(<span class="string">&quot;putExtra&quot;</span>, intentClass.GetStatic&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;EXTRA_TEXT&quot;</span>), shareMessage);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> currentActivity = unityClass.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> chooser = intentClass.CallStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;createChooser&quot;</span>, intentObject, shareTitle);</span><br><span class="line">            currentActivity.Call(<span class="string">&quot;startActivity&quot;</span>, chooser);</span><br><span class="line"></span><br><span class="line">            isProcessing = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分享一个文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;shareTitle&quot;&gt;</span>分享页面的标题<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filePath&quot;&gt;</span>要分享的文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功标志<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShareFile</span>(<span class="params"><span class="built_in">string</span> shareTitle, <span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isProcessing)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            isProcessing = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            unityClass ??= <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>);</span><br><span class="line">            shareUtilClass ??= <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.kuroha.android_library.ShareUtil&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> currentActivity = unityClass.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>);</span><br><span class="line">            shareUtilClass.CallStatic(<span class="string">&quot;ShareFile&quot;</span>, currentActivity, filePath, shareTitle);</span><br><span class="line"></span><br><span class="line">            isProcessing = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面就包含了如何分享文本和文件的代码, 分享图片也属于分享文件</p>
<p>那么如何使用这两个 API 呢 ? 下面分别下一个调用的例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShareText</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    FileUtilAndroid.ShareText(<span class="string">&quot;测试分享文本&quot;</span>, <span class="string">&quot;成功了!&quot;</span>, <span class="string">&quot;分享主题&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">ShareFile</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> path = <span class="string">$&quot;<span class="subst">&#123;UnityEngine.Application.persistentDataPath&#125;</span>/123.txt&quot;</span>;</span><br><span class="line">    File.WriteAllText(path, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    FileUtilAndroid.ShareFile(<span class="string">&quot;测试分享文件&quot;</span>, path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此, 教程结束!</p>
<h1 id="🍈附录"><a href="#🍈附录" class="headerlink" title="🍈附录"></a>🍈附录</h1><h2 id="Android-Studio-简体中文汉化包"><a href="#Android-Studio-简体中文汉化包" class="headerlink" title="Android Studio 简体中文汉化包"></a>Android Studio 简体中文汉化包</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvbGx5dS9BbmRyb2lkU3R1ZGlvQ2hpbmVzZUxhbmd1YWdlUGFjaz90YWI9cmVhZG1lLW92LWZpbGU=">简体中文汉化包<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 中自定义程序集的使用以及程序集的划分</title>
    <url>/unity/unity_asmdef.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h1><p>先引用一下官方自己对自定义程序集的解释, 官方手册中的说明已经非常详细了, 下面是手册链接</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL01hbnVhbC9TY3JpcHRDb21waWxhdGlvbkFzc2VtYmx5RGVmaW5pdGlvbkZpbGVzLmh0bWw=">Assembly<i class="fa fa-external-link-alt"></i></span></p>
<p>手册上已经有的我就不重复赘述了, 说明一下我在使用过程中的一些经验</p>
<h1 id="程序集的划分"><a href="#程序集的划分" class="headerlink" title="程序集的划分"></a>程序集的划分</h1><p>程序集划分为: <code>预定义程序集</code> 和 <code>预编译程序集</code> 和 <code>自定义程序集</code></p>
<h2 id="预定义程序集-Predefined-assembly"><a href="#预定义程序集-Predefined-assembly" class="headerlink" title="预定义程序集 (Predefined assembly)"></a>预定义程序集 (Predefined assembly)</h2><p>预定义程序集指的是 Unity 引擎自己预先定义好的一些程序集, 比如项目代码会生成的 <code>Assembly-CSharp</code> 和 <code>Assembly-CSharp-Editor</code>, 还有引擎程序集, 比如 <code>UnityEngine</code>, <code>UnityEditor</code> 等</p>
<h2 id="预编译程序集-Precompiled-assembly"><a href="#预编译程序集-Precompiled-assembly" class="headerlink" title="预编译程序集 (Precompiled assembly)"></a>预编译程序集 (Precompiled assembly)</h2><p>手册原文解释</p>
<blockquote>
<p>A precompiled assembly is a library compiled outside your Unity Project.</p>
</blockquote>
<p>很字面意思, 即在 Unity 项目外预先编译好的程序集, 例如 <code>DoTween.dll</code></p>
<h2 id="自定义程序集-Project-assembly"><a href="#自定义程序集-Project-assembly" class="headerlink" title="自定义程序集 (Project assembly)"></a>自定义程序集 (Project assembly)</h2><p>只有使用 <strong>自定义程序集文件</strong> 所定义的程序集才是自定义程序集, 在官方手册中被称为 <code>Project assembly</code></p>
<h1 id="为什么要使用自定义程序集"><a href="#为什么要使用自定义程序集" class="headerlink" title="为什么要使用自定义程序集"></a>为什么要使用自定义程序集</h1><h2 id="🐔原因一-可以非常有效且明确地划分代码之间的依赖关系"><a href="#🐔原因一-可以非常有效且明确地划分代码之间的依赖关系" class="headerlink" title="🐔原因一 : 可以非常有效且明确地划分代码之间的依赖关系"></a>🐔原因一 : 可以非常有效且明确地划分代码之间的依赖关系</h2><p>不使用自定义程序集划分, 代码会被编译到 <code>Assembly-CSharp.dll</code> 中, 所有的代码都在一个程序集中 (不考虑编辑器代码, 不要鸡蛋里挑骨头), 那么所有的代码之间都可以相互引用, 并且没有任何限制, 在如今 IDE 都可以自动补全命名空间的情况下, 使用命名空间来区分完全不现实, 命名空间目前基本就一个作用了, 让类的命名不再那么小心翼翼, 可以使用重名类, 不在一个空间下就行了</p>
<p>使用自定义程序集来手动划分代码所属程序集, 解开 <code>游戏框架</code> - <code>逻辑模块</code> - <code>插件</code> - <code>开发库</code> 之间的耦合; 同时因为程序集之间如果不明确引用的话, 在代码中是无法使用的, 可以有效防止新手程序员乱写, 这种规范性问题如果仅仅靠程序员的能力来自觉维护是不可能的</p>
<h2 id="🦄原因二-方便实现逻辑的热更新"><a href="#🦄原因二-方便实现逻辑的热更新" class="headerlink" title="🦄原因二 : 方便实现逻辑的热更新"></a>🦄原因二 : 方便实现逻辑的热更新</h2><p>可以手动划分出热更程序集, 用于热更新</p>
<h2 id="👽原因三-开发时加快代码编译速度"><a href="#👽原因三-开发时加快代码编译速度" class="headerlink" title="👽原因三 : 开发时加快代码编译速度"></a>👽原因三 : 开发时加快代码编译速度</h2><p>这个是手册中就提到的事情, 通过有效划分程序集, 可以实现当修改了上层程序集的代码时, 编译时只会重新编译代码所属的程序集, 节省编译时间, 当然这一点的实现需要合理的程序集划分, 因为当程序集重新编译时, 引用了此程序集的程序集也需要重新编译</p>
<p>以下面的图为例, 当仅仅修改了 <code>main.dll</code> 中的代码时, 那么只有 <code>main.dll</code> 会进行重新编译</p>
<p>但是如果修改了 <code>Library.dll</code> 中的代码, 那么 <code>Main.dll</code>, <code>Stuff.dll</code>, <code>Library.dll</code> 三个程序集都需要重新编译, 因此合理的程序集划分非常重要</p>
<p><img data-src="/images/unity/asmdef1.png" alt="程序集划分"></p>
<h1 id="如何划分程序集"><a href="#如何划分程序集" class="headerlink" title="如何划分程序集"></a>如何划分程序集</h1><p>程序集的划分要参考上面所说的 3 个目的去划分, 都需要结合实际项目说明, 这里举例子的话就只说明一些最基本的划分底限, 也就是绝对需要遵守的规则</p>
<ul>
<li><font color=red><strong>不使用 Assembly-CSharp 程序集</strong></font></li>
</ul>
<p>这里的意思并不是说要删除掉这个程序集, 而是需要控制项目中的代码全部使用自定义程序集来划分, 任何项目代码都不许被编译到主程序集中.</p>
<p>这里的项目代码指的也只是项目开发中自己所编写的代码, 像很多插件库, 他们一般有自己的程序集划分, 但是也可能没有啊, 这部分代码并不是我们自己开发的, 我们可以自己去给他划分程序集, 也可以不划分, 可以大致参考手册图片中的划分方式划分即可. (当然这个图也就仅供参考了)</p>
<ul>
<li><font color=red><strong>库, 框架, 工具集, 逻辑模块都需要单独设立程序集</strong></font></li>
</ul>
<p>开发时使用的开发库需要有自己的程序集, 包括框架, 工具集, 各个逻辑模块都需要有自己的程序集, 具体的划分就需要按照项目自己制定了</p>
<h1 id="程序集文件的选项解释"><a href="#程序集文件的选项解释" class="headerlink" title="程序集文件的选项解释"></a>程序集文件的选项解释</h1><p>对 Unity 中程序集文件各个选项的进一步解释, 补充手册的不足, 下文中的 <code>此程序集</code> 都是指这个选项所归属的程序集</p>
<h2 id="Allow-unsafe-Code"><a href="#Allow-unsafe-Code" class="headerlink" title="Allow &#39;unsafe&#39; Code"></a>Allow &#39;unsafe&#39; Code</h2><p>字面意思, 允许使用 &#39;unsafe&#39;, 不解释, 用到就勾, 用不到就不勾.</p>
<p><font color=red><strong>Allow &#39;unsafe&#39; Code : 按需设置, 基本用不到</strong></font></p>
<h2 id="Auto-Referenced"><a href="#Auto-Referenced" class="headerlink" title="Auto Referenced"></a>Auto Referenced</h2><p>这个是手册里面的解释</p>
<blockquote>
<p>Specify whether the predefined assemblies should reference this Project assembly.</p>
</blockquote>
<p>新手可能看起来有点晕, 我直接说明效果, 勾选选项后, 在 <code>Assembly-CSharp.dll</code> 中的代码才能引用此程序集中的代码, 不勾选的话是无法引用此程序集代码的</p>
<p>这对于一些老项目而言非常有用, 因为老项目的代码基本都是在 <code>Assembly-CSharp.dll</code> 中, 这时候独立出来的一些自定义程序集就必须都勾选此选项, 让主程序集能够引用自己.</p>
<p>而新项目如果根据上面的程序集划分准则划分程序集的话, 则不要勾选此选项, 而是在需要引用此程序集的地方手动设置引用</p>
<p><font color=red><strong>Auto Referenced : 旧项目推荐勾选, 方便省事</strong></font></p>
<p><font color=red><strong>Auto Referenced : 新项目一律不勾选</strong></font></p>
<h2 id="No-Engine-References"><a href="#No-Engine-References" class="headerlink" title="No Engine References"></a>No Engine References</h2><p>字面意思, 如果程序集中的代码完全不需要使用 <code>UnityEditor</code> 和 <code>UnityEngine</code> 等引擎相关代码, 那就可以勾选</p>
<p><font color=red><strong>No Engine References : 按需设置</strong></font></p>
<h2 id="Root-Namespace"><a href="#Root-Namespace" class="headerlink" title="Root Namespace"></a>Root Namespace</h2><p>设置根命名空间的, 这个选项极其具有误导性, 上面的选项都是优化程序集设置的, 设置后或多或少都会对程序集造成影响, 但是这个选项不会, 是的, 你没有看错, <strong>这个选项不会对程序集造成任何影响! 这个选项不会对程序集造成任何影响! 这个选项不会对程序集造成任何影响!</strong></p>
<p>这个选项的作用只是为了方便程序编写代码, 设置此选项后, 在此目录下新建代码文件, Unity 引擎会自动在代码中生成命名空间的代码, 仅此而已.</p>
<p>另外说明一下, 这个只是一个代码自动生成的辅助功能, 不要以为这里设置了命名空间, 代码中就不需要写了, 不是的, 代码中自动生成的那行 namespace 可不能删除哦.</p>
<p>最后再说一下, 只有通过 Unity 创建代码文件的时候才会生效, <strong>在 IDE 中此设置并没有效果</strong>!</p>
<p><font color=red><strong>Root Namespace : 无所谓, 看你心情</strong></font></p>
<h2 id="Assembly-Definition-References"><a href="#Assembly-Definition-References" class="headerlink" title="Assembly Definition References"></a>Assembly Definition References</h2><p>这个列表即设置此程序集需要引用的其他程序集, 包括<code>预定义程序集</code>和<code>其他自定义程序集</code>, 而预编译程序集的引用不在这里设置, 而是下面的 <code>Override References</code> 中设置</p>
<p><font color=red><strong>Assembly Definition Referencess : 按需设置</strong></font></p>
<h2 id="Override-References"><a href="#Override-References" class="headerlink" title="Override References"></a>Override References</h2><p>这个是对预编译程序集 (Precompiled assembly) 引用的设置, 不勾选的话, 此程序集会引用全部的预编译程序集, 勾选后则需要手动设置</p>
<p><font color=red><strong>Override References : 旧项目推荐不勾选, 方便省事</strong></font></p>
<p><font color=red><strong>Override References : 新项目一律勾选</strong></font></p>
<h2 id="Platforms"><a href="#Platforms" class="headerlink" title="Platforms"></a>Platforms</h2><p>字面意思, 程序集的平台兼容性设置, 可以设置程序集仅在哪些平台上编译</p>
<p><font color=red><strong>Platforms : 按需设置</strong></font></p>
<h2 id="Define-Constraints"><a href="#Define-Constraints" class="headerlink" title="Define Constraints"></a>Define Constraints</h2><p>这个也很好理解, 宏控制, 代码编写中也经常使用类似的功能, 很有用.</p>
<p>比如你写了一个库, 这个库可能只有在满足了某种条件下才能使用, 此时就可以使用宏来控制此程序集是否编译, 如果项目中没有此宏, 程序集是不会编译的, 可以放心大胆的放到项目中</p>
<p><font color=red><strong>Define Constraints : 按需设置</strong></font></p>
<h1 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h1><p>设置程序集引用关系的时候, 一定要避循环引用, 即 <code>A 引用 B, B 引用 A</code></p>
<p>前面说过, 程序集重新编译时, 引用此程序集的程序集也会被触发重新编译, 那么 A 重新编译时, 触发了 B 重新编译, 然后 B 的重新编译又触发了 A 重新编译... 编译器: ? ? ? 你 TM 在搞我 ? ? ?</p>
<p>不过设置了循环引用后, 引擎也会报错的, 所以注意一下就好</p>
<h1 id="设置举例"><a href="#设置举例" class="headerlink" title="设置举例"></a>设置举例</h1><p><img data-src="/images/unity/asmdef2.png" alt="程序集划分"></p>
<p><img data-src="/images/unity/asmdef3.png" alt="程序集划分"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 和 Fork</title>
    <url>/git/git_learn.html</url>
    <content><![CDATA[<span id="more"></span>

<p>推荐一个 Git 的学习网站, 以游戏的方式来学习 Git. <span class="exturl" data-url="aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcvP2xvY2FsZT16aF9DTg==">点我<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="用户信息-Windows"><a href="#用户信息-Windows" class="headerlink" title="用户信息 (Windows)"></a>用户信息 (Windows)</h1><p>Windows 系统的用户文件夹下有一个 <strong>.gitconfig</strong> 文件, 这个文件中存储了 git 的全局设置, 包括提交时的用户名以及邮件地址, 还可以设置一些 git 长命令的别名, 用于简化操作.</p>
<p>Git 版本库中每一个 commit 节点都有一个提交者, 这个提交者<strong>默认</strong>就是用户文件夹下 <strong>.gitconfig</strong> 文件中配置的用户名和邮件地址. 但是如果不同的仓库需要不同的提交者怎么办呢?</p>
<p>Git 版本库在所使用的提交者信息有 3 个层级, 分别是: <strong>仓库级 local</strong>, <strong>全局级 global</strong>, <strong>系统级 system</strong>.</p>
<h2 id="系统级用户信息"><a href="#系统级用户信息" class="headerlink" title="系统级用户信息"></a>系统级用户信息</h2><p>系统级的配置文件是 <strong>Git安装目录&#x2F;etc&#x2F;gitconfig</strong> 文件, 这个文件中的配置优先级最低, 会被另外两个配置文件中的配置所覆盖.</p>
<h2 id="全局级用户信息"><a href="#全局级用户信息" class="headerlink" title="全局级用户信息"></a>全局级用户信息</h2><p>全局级的配置文件是 <strong>用户文件夹&#x2F;.gitconfig</strong> 文件, 这是一个隐藏文件, 其中最重要的设置就是保存了默认的用户信息. 由于这里保存的是默认信息, 因此除非配置错误, 否则不要修改 <strong>.gitconfig</strong> 中的配置.</p>
<h2 id="仓库级用户信息"><a href="#仓库级用户信息" class="headerlink" title="仓库级用户信息"></a>仓库级用户信息</h2><p>仓库级的配置文件是 <strong>仓库文件夹&#x2F;.get&#x2F;config</strong> 文件. 只要在这个文件中给你再次配置一个 <strong>[user]</strong> 信息便可以实现不同的仓库使用不同的提交者信息.</p>
<h1 id="Git-版本控制结构"><a href="#Git-版本控制结构" class="headerlink" title="Git 版本控制结构"></a>Git 版本控制结构</h1><p>Git 在实现版本控制时的结构如下图:</p>
<p><img data-src="/images/git/file-struct.png" alt="文件结构"></p>
<p>其中的 <strong>Repository</strong>, <strong>Index</strong>, <strong>Workspace</strong> 为本地文件, <strong>Remote</strong> 是远程文件.</p>
<p>在克隆远程仓库之后的整个文件夹就是我们的仓库目录, 其中除了 .git 文件夹以外的文件及文件夹称为工作区, 默认情况下, 同目录下的 .git 文件夹保存了这个仓库的版本提交信息.</p>
<p>图中各个图标的解释:</p>
<ul>
<li>workspace: 工作区, 我们实质的项目文件.</li>
<li>Repository: 本地的版本控制信息. 位于 .git 文件夹中, 其中保存了从开始进行版本控制以来所有的提交记录, 后面的暂存区也在这个文件夹中.</li>
<li>Index: 暂存区, 我们所有改动在提交之前都必须先放到暂存区中. 也在 .git 文件夹中. Fork 软件中的 Stage 命令就是将改动保存到暂存区.</li>
<li>Remote: 远程服务器上的文件.</li>
</ul>
<h1 id="branch-name-和-HEAD"><a href="#branch-name-和-HEAD" class="headerlink" title="branch-name 和 HEAD"></a>branch-name 和 HEAD</h1><p>branch-name 和 HEAD 都不是提交信息, 这两个都只是一个游标, 它们指向特定的节点.</p>
<p><strong>HEAD</strong> 也称作 <strong>current branch</strong>, 是一个<strong>指向当前工作区所处位置</strong>的游标, 主要由 <code>checkout</code> 命令控制, HEAD 不仅可以指向分支名, 也可以直接指向某个提交节点.</p>
<p>在签出本地仓库中的一个分支时, HEAD 便会指向这个分支名, 比如签出了 bugFix 分支, 则: <strong>HEAD-&gt;bugFix-&gt;bugFix-commit</strong>.</p>
<p>在签出远程仓库中的一个分支时, HEAD 会变成<strong>分离状态</strong>, 比如签出了 bugFix 分支, 则: <strong>HEAD-&gt;bugFix-commit</strong>. 这样是为了保证用户必须在自己新建的本地分支上工作, 不能直接在远程分支上进行修改和提交, 生成 commit 节点.</p>
<h1 id="Git-GitHub-和-GitLab"><a href="#Git-GitHub-和-GitLab" class="headerlink" title="Git, GitHub 和 GitLab"></a>Git, GitHub 和 GitLab</h1><p>Git 是一个分布式版本控制工具, 一个仓库所有的提交记录全部保存在 <strong>.git</strong> 文件夹中. 随着项目的开发, .git 文件夹的体积会越来越大.</p>
<p>GitHub 是一个注重点为 <strong>开源</strong> 的代码托管网站, 他的特点就是仅支持 Git 作为版本控制工具, 并且提供了很多 Git 相关的便利操作, GitHub 和 Git 是完全不同的两个事物. 由于 GitHub 的注重点为开源, 因为对于开发闭源软件的团队而言, GitHub 就不适用了.</p>
<p>GitLab 是一个面向企业团队的代码托管网站, 和 GitHub 非常相似, 最大的不同就是 GitLab 上的仓库是隐私的(现在 GitHub 也可以创建私有仓库了😂), 而且提供了更好的隐私权限管理工具, 适合公司的内部团队使用.</p>
<h2 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h2><ul>
<li><code>git init</code>: 创建一个初始的 git 版本库 (git 仓库).</li>
<li><code>git add</code>: 将当前的改动提交至暂存区 (暂存区一般称为: <strong>stage</strong> 或 <strong>index</strong>).</li>
<li><code>git commit</code>: 提交到本地版本库, 提交后会在本地版本库中会新增一个节点.</li>
<li><code>git branch new-branch-name</code>: 在当前位置新建一个分支, 但是并不会立即签出到新的分支上.</li>
<li><code>git branch new-branch-name HEAD-position</code> : 在指定位置新建一个分支, 不会立即签出到新的分支上.</li>
<li><code>git branch -f branch-name HEAD-position</code>: 强制修改特定分支到指定的 HEAD 位置. 不会修改节点信息, 只会修改分支名 (<strong>分支名是一个游标</strong>).</li>
<li><code>git checkout branch-name</code>: 签出到特定分支上, 修改 HEAD 指向指定的分支名.</li>
<li><code>git checkout -b new-branch-name</code>: 在当前位置新建一个分支, 并签出到这个新分支上.</li>
<li><code>git checkout -b new-branch-name HEAD-position</code>: 在指定的位置新建一个分支, 并签出到这个新分支上.</li>
<li><code>git merge branch-name</code>: 将特定分支<strong>归并</strong>到当前分支中, 合并分支的一种方式, 提交树中会有明显的合并痕迹. <strong>归并模式</strong></li>
<li><code>git rebase branch-name</code>: 将当前分支<strong>移动</strong>到特定分支中, 合并分支的另一种方式, 由于是直接移动, 所以被合并的分支会消失. <strong>移动模式</strong></li>
<li><code>git rebase branch-name-a branch-name-b</code>: 将分支 b <strong>移动</strong>到分支 a 中.</li>
<li><code>git reset branch-name^</code>: 将当前分支撤销一步提交, 具有 3 种撤销方式. <font color='red'>仅对本地有效</font> [<strong>推荐使用</strong>]</li>
<li><code>git revert branch-name</code>: 将当前分支撤销一步提交. <font color='red'>本地和远程都有效</font> [<strong>不推荐使用</strong>]</li>
</ul>
<h2 id="相对引用-HEAD-position"><a href="#相对引用-HEAD-position" class="headerlink" title="相对引用 (HEAD-position)"></a>相对引用 (HEAD-position)</h2><ul>
<li><code>git checkout branch-name^/~number</code>: 相对引用.<ul>
<li><code>git checkout main^</code> : 将 HEAD 修改为 main 分支回退 1 次后的节点.</li>
<li><code>git checkout bugFix~4</code> : 将 HEAD 修改为 bugFix 分支回退 4 次后的节点.</li>
<li><code>git checkout HEAD^</code> : 将 HEAD 回退 1 次. <font color='red'>HEAD 必须大写</font></li>
<li><code>git checkout HEAD~4</code> : 将 HEAD 回退 4 次.</li>
</ul>
</li>
</ul>
<h1 id="图形客户端-Fork"><a href="#图形客户端-Fork" class="headerlink" title="图形客户端 Fork"></a>图形客户端 Fork</h1><h2 id="用户信息设置"><a href="#用户信息设置" class="headerlink" title="用户信息设置"></a>用户信息设置</h2><p>在仓库名的右侧有一个设置按钮, 可以对自己提交时的用户信息进行设置.</p>
<p><img data-src="/images/git/account-1.png" alt="用户信息"></p>
<p>勾选 <strong>Use global git credentials</strong> 时会使用全局级设置, 在需要单独设置用户信息时, 需要取消勾选并设置自己的用户信息.</p>
<p><img data-src="/images/git/account-2.png" alt="用户信息"></p>
<h2 id="添加本地仓库"><a href="#添加本地仓库" class="headerlink" title="添加本地仓库"></a>添加本地仓库</h2><p>如果本地已经有仓库了, 可以将仓库直接添加到 Fork 中. 点击 <code>File-&gt;New Tab</code>, 打开一个新的标签页, 或者直接点击标签栏最右侧的 <strong>+</strong> 号也可以创建新 Tab 页.</p>
<p><img data-src="/images/git/local-repositories-1.png" alt="本地仓库"></p>
<p>将自己本地的仓库文件夹 (<strong>内部有一个 .git 文件夹的文件夹</strong>) 直接拖到 <strong>Repositories</strong> 处即可添加本地仓库. 另外还可以在 <strong>Repositories</strong> 处, 右键&#x3D;&gt;新建文件夹, 进行仓库的整理和归类. 双击添加的仓库即可打开仓库.</p>
<h2 id="多工作区"><a href="#多工作区" class="headerlink" title="多工作区"></a>多工作区</h2><p>在 Fork 中每一个标签页 (Tab) 就是一个仓库的信息, 可以在一个窗口中打开多个仓库, 这样上方就会同时出现多个 Tab 页.</p>
<p><img data-src="/images/git/tabs-workspace-1.png" alt="多标签页"></p>
<p>但是不同的工作内容 (修复 Bug; 新增功能; 修改美术或音频资源) 可能需要用到不同的仓库, 不同的分支, 此时多标签页已经无法满足要求了.</p>
<p>这个时候可以使用多工作区来解决. 在软件的右上角有一个 <strong>Workspaces</strong> 按钮可以对工作区进行设置. 这个按钮上显示的文字是当前工作区的名称.</p>
<p><img data-src="/images/git/tabs-workspace-2.png" alt="多工作区"></p>
<p>可以理解为一个窗口一个工作区, 不同的工作区中可以放不同的标签页, 并且可以很方便的来回切换. 具体的自己去配置一下试试吧.</p>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>在仓库的下方有 <strong>Branches</strong> 和 <strong>Remotes</strong>, Branches 里面的是本地仓库的分支情况, Remotes 则是远程仓库中的分支情况.</p>
<p><img data-src="/images/git/remote-repositories-1.png" alt="远程仓库"></p>
<p>Remotes 中可以配置多个远端仓库, 虽然只能同时引用其中的一个, 但是可以随时修改引用哪一个仓库. 这个引用 git 中叫做<strong>追踪关系(tracking)</strong>.</p>
<p>在 <strong>Remotes</strong> 上右键, <strong>Add New Remote</strong>, 填入远程仓库的名称以及网络地址即可.</p>
<p><img data-src="/images/git/remote-repositories-2.png" alt="远程仓库"></p>
<p>本地的版本库信息 (也就是提交记录) 保存在本地仓库的 .git 文件夹内, 同样远端仓库的版本库信息保存在远端服务器的 .git 文件夹内. 添加远端服务器之后需要使用 <strong>Fetch</strong> 命令来拉取远程仓库中的版本信息, 拉取完之后就可以展开看到目前远端仓库中所有的分支了, 没有拉取的时候是没有左侧的三角号的, 也不能点击. 后面会说明 Fetch 命令, 当然你可以现在就跳转: <a href="#command-fetch">Fetch 命令</a></p>
<h2 id="Quick-Lunch"><a href="#Quick-Lunch" class="headerlink" title="Quick Lunch"></a>Quick Lunch</h2><p>说一下上方的几个按钮, 首先是 Quick Launch, 这是一个快速操作入口, 点击后会弹出一个窗口, 里面有很多常用的操作可以快速执行, 找不到需要的操作时可以进行搜索.</p>
<p><span id='command-fetch'></span></p>
<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><p>场景 1: 我们在刚来公司的时候克隆 (clone) 了远端仓库的所有内容, 此时我们本地仓库和远程仓库是一模一样的, 然后我们找到需要工作的分支, 新建分支开始工作, 工作了一周之后, 我们本地的 .git 版本库中新增了很多我们自己的提交, 但是你会发现整个的提交树中并没有这一周内其他人的提交情况, 因为其他人的提交情况全部保存在他们自己的电脑上或者他们 push 到了远端的 .git 文件夹内.</p>
<p>场景 2: 我们在 Fork 上新加了一个远程仓库, 但是这个仓库的提交信息却没有任何显示, 怎么都找不到, 明明远程是有提交信息的.</p>
<p>这时候就需要使用 <strong>fetch</strong> 了, 这个命令可以将远程仓库中的提交记录拉取到本地, 这样我们也就可以看到其他人的工作情况了. 在 Fork 软件中点击 Fetch, 选择要拉取哪个仓库的信息, 之后拉取即可.</p>
<p>fetch 命令完成了很重要的两步:</p>
<ul>
<li>从远程仓库下载本地仓库中缺失的提交记录</li>
<li>更新提交树中的远程分支游标</li>
</ul>
<p>[<strong>注</strong>]</p>
<ul>
<li><p>Fork 的默认配置中会自动进行 Fetch, 每次在打开一个标签页或者切换标签页的时候都会自动 Fetch, 我这里是选择了关闭这个自动 Fetch, 因为他让我失去了一部分掌控感, 还是自己需要 Fetch 的时候手动去 Fetch 一下更有实感! 😂</p>
<p>  <img data-src="/images/git/auto-fetch-1.png" alt="自动-Fetch"></p>
</li>
<li><p>fetch 只是拉取一遍提交记录, 也就是软件界面中间部分的提交树信息, 所以一般在需要查看目前仓库的提交情况时使用这个命令, 另外因为 fetch 不会对文件做任何的改动, 所以基本上来说这个按钮可以随便点. 当设置了多个远程仓库的时候, 点击 fetch 需要选择拉取的仓库.</p>
</li>
</ul>
<h2 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h2><p>pull 也是拉取远端服务器的数据, 和 fetch 不同的是, pull 在拉取之后会将刚刚拉取的节点合并到当前签出的分支上. 等于先执行 fetch 命令, 之后执行 merge 命令.</p>
<p>应用场景: 我们签出了远程分支 origin&#x2F;feature, 一周后在本地进行了一次提交, 但是在这一周内 origin&#x2F;feature 分支在远程仓库上进行了新的提交, 此时就需要先拉取远程仓库的提交, 之后再将刚刚拉取的远程节点合并到我们的本地分支上. 要实现这个效果可以先执行 fetch 命令, 之后执行 merge 或者 rebase 命令, 也可以直接执行 pull 命令.</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">等效命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pull</td>
<td align="left">fetch + merge</td>
</tr>
<tr>
<td align="left">pull --rebase</td>
<td align="left">fetch + rebase</td>
</tr>
</tbody></table>
<h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><p>Push 和 Pull 相反, Push 是将本地 .git 文件夹中的提交记录上传到远程服务器中. 比如要修改一个 Bug, 我们先找到 Bug 存在的分支, 之后新建一个分支开始工作, 工作过程中产生了很多的提交, 这些新的提交信息我们在本地都是可以清楚的看到的, 但是远程服务器中是没有这些提交信息的, 甚至连我们新建的那个分支都没有... 此时我们就可以使用 Push 命令将我们的工作情况上传上去. 第一次提交时由于我们是新建的分支, 远程版本库是没有的, 因此提交的时候软件会默认在远程版本库上新建一条同名的分支, 这是 Git 的默认操作, 我们不需要进行额外操作. 此时他人使用 Fetch 命令就可以看到我们的提交记录了.</p>
<p>push 默认上传的时当前签出的分支, 可以使用参数将指定的分支进行上传.</p>
<ul>
<li><code>push remote-repository-name branch-name</code> : 将本地的 branch-name 分支上传到远程的 branch-name 分支. 此时本地分支和远程分支同名.</li>
<li><code>push remote-repository-name local-branch-name:remote-branch-name</code> : 将本地的 local-branch-name 分支上传到远程的 remote-branch-name 分支. 此时本地分支和远程分支不同名, 并且 local-branch-name 也可以直接写一个节点. 记得本地位置和远程分支之间必须使用冒号 : 连接.</li>
<li><code>push remote-repository-name :remote-branch-name</code> : 本地分支参数省略时, 此命令的效果是<strong>删除远程的 remote-branch-name 分支</strong>.</li>
</ul>
<h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>Checkout 是签出操作, 将当前仓库中的所有文件变成指定分支中的样子. 一旦签出, 我们的工作区就和分支中的完全相同, 因此在切换分支的时候必须对当前分支上所作的变动全部保存或者直接提交.</p>
<h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><p>cherry-pick 命令可以选择性地将提交树上其他分支的提交记录<strong>复制</strong>过来追加到 HEAD 上, 需要知道节点的 hash 值.</p>
<p><code>cherry-pick node1-hash [node2-hash] [node3-hash]</code> : 将节点 1 2 3 转移到当前分支上.</p>
<p>[<strong>注</strong>] <font color='red'>未合并的节点所作的改变将被丢弃</font>.</p>
<p>在命令行中 cherry-pick 是这样使用的, 但是在 Fork 软件中怎么使用呢?</p>
<p>场景想象: 我们在自己的工作分支上工作, 其中做了 5 次提交: a, b c d e, 这些提交中的 a, c, e 是真正有效的提交, 虽然 b, d 两次提交也作出了修改, 但是 b 中的修改全部都是 Debug 时用的测试代码, d 中的提交也全部都是 Print 时输出信息用的代码. 这些代码不需要合并到主分支上, 就是说这两次提交需要舍弃, 那么此时就可以使用 cherry-pick 了.</p>
<p>首先将工作分支上的改动全部<strong>提交</strong>, 之后签出到要合并的<strong>主分支</strong>上, 如 develop 分支, 之后<strong>同时选中</strong>需要合并的 a, c, e 节点, 右键, 选择<strong>Cherry-pick...</strong> 就可以将 a, c, e <strong>复制</strong>到主分支上了. 由于 cherry-pick 是复制操, 所以我们自己的工作分支还是保持不变的, 后面可以选择是否进行删除操作.</p>
<h2 id="rebase-interactive"><a href="#rebase-interactive" class="headerlink" title="rebase interactive"></a>rebase interactive</h2><p>命令格式: <code>git rebase -i HEAD-position</code></p>
<p>直译为: <strong>交互式 rebase</strong>, 使用此命令会打开 UI 界面, 对指定范围的节点进行自定义操作, 下图中是所有可以做的操作.</p>
<p><img data-src="/images/git/rebase-interactive-1.png" alt="交互式 rebase"></p>
<p>和 cherry-pick 一样, 被舍弃 (Drop) 的节点中所做的改变也会被舍弃.</p>
<p><code>git rebase -i HEAD~4</code> : 对当前节点以及前面的 3 个节点 (共 4 个节点) 进行自定义操作. 由于是<strong>移动</strong>模式, 所以被修改的节点会在原分支消失, 直接被移动到了主分支.</p>
<h2 id="tags-describe"><a href="#tags-describe" class="headerlink" title="tags &amp;&amp; describe"></a>tags &amp;&amp; describe</h2><p>Git 中有一个标签功能 (<strong>里程碑</strong>功能). 标签(里程碑)的作用就是一个不可变的永久指针, 它指向最初定义它的位置. 当发布了一个全新版本, 或者进行了一个大型重构等都可以使用标签对那次重大提交打一个 &quot;标记&quot;.</p>
<p><code>git tag tag-name node-name</code> : 在指定的节点上新建一个标签(里程碑).</p>
<p>标签(里程碑)主要是用来定位, 可以使用 <code>git describe</code> 命令来进行定位, 命令返回的格式为: <strong>[tag-name]-[step-number]-[position-hash]</strong>.</p>
<ul>
<li><code>git describe</code> : 距离当前最近的里程碑到当前位置的提交次数. 假设当前节点 hash 为 c2, 是 v1 版本提交了 12 次后的结果, 则此命令返回: v1-12-c2.</li>
<li><code>git describe main</code> : 距离 main 分支最近的里程碑到 main 分支的提交次数. 假设 main 分支 hash 为 c3, 是 v2 版本提交了 5 次后的结果, 则此命令返回: v2-5-c3.</li>
<li><code>git describe develop</code> : 距离 develop 分支最近的里程碑到 develop 分支的提交次数. 假设 develop 分支 hash 为 c6, 是 v4 版本提交了 7 次后的结果, 则此命令返回: v4-7-c6.</li>
</ul>
<h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><h2 id="如何消除冗余提交-Squash-Reset"><a href="#如何消除冗余提交-Squash-Reset" class="headerlink" title="如何消除冗余提交 Squash &amp;&amp; Reset"></a>如何消除冗余提交 Squash &amp;&amp; Reset</h2><p>情景: 在工作时由于进行了多次不必要的提交, 所以提交树上产生了很多冗余的提交, 这对于强迫症来讲是坚决不能忍受的. 比如下图中在编写 Git 博客的时候产生了多次添加图片的冗余提交.</p>
<p><img data-src="/images/git/git-squash-1.png" alt="冗余提交"></p>
<ul>
<li>方案1: 仅适应于本地仓库中的冗余提交, 一旦提交已经 Push 到了服务器上就不推荐使用这个方案了, 虽然理论上行得通, 但是容易出现冲突. 这个方案的想法是使用 Fork 上的 Squash (直译: <strong>压扁</strong>) 来压缩提交数量. 首先将目前工作区所有的改动保存并提交, 之后<strong>同时选中</strong>所有需要压缩的节点 (顺序选择, 不要挑着选, 不然可能会有冲突), 右键, 选择: <strong>Squash into Parent...</strong>, 在弹出的窗口中会出现操作的详情, 窗口左下角默认会勾选备份, 确认无误后就可以点击右下方 Rebase 压缩提交记录了.</li>
</ul>
<p>[<strong>注</strong>] 这个操作需要对操作树中的节点具有很强的掌控感, 节点选择多了一个都会导致后期合并起来出问题, 强烈建议使用此操作之前找个空仓库多练习几次.</p>
<ul>
<li>方案2: 仅适应于本地或者 Push 到服务器但是还没有合并的情况. 应该说<font color='red'>任何已经合并到主分支的提交都不能由非管理员进行回退!</font> 方案 2 的想法就是使用 Reset 回退提交. Reset 的回退有 3 种方式, 每个对应的参数以及效果见下图.</li>
</ul>
<p><img data-src="/images/git/reset-commit-1.png" alt="回退提交"></p>
<p>使用 Reset 回退之后 Push 到远端时默认会报错, 因为将一个旧的提交去覆盖新的提交肯定不行, 此时就需要使用 <strong>强制提交</strong>, 强制覆盖掉远端的提交记录.</p>
<h2 id="如何避免产生冗余提交-commit-amend"><a href="#如何避免产生冗余提交-commit-amend" class="headerlink" title="如何避免产生冗余提交 commit --amend"></a>如何避免产生冗余提交 commit --amend</h2><ol>
<li><p>第一种方案: <code>git commit –amend</code> 命令在提交时不会生成新的提交记录, 而是直接修改当前 HEAD 指向的节点, 这样就不会产生冗余的提交记录了, 但是 Fork 软件中好像没有这个功能. (我没有找到)</p>
</li>
<li><p>第二种方案: 使用 Reset 命令先消除之前的无意义提交再重新提交, 回退时使用 Soft 方式即可. 完全掌控的情况下使用默认的 Mixed 方式也可以.</p>
</li>
<li><p>第三种方案: 使用 Stash 功能.(<strong>推荐</strong>)</p>
<ul>
<li>适用情景: 当前我们在 A 分支上正在非常聚精会神加高度专注地实现一个屌炸天的模块, 思如泉涌, 简直键盘如飞地在编写代码~~~~然后这时, 收到一封邮件反馈出一个 bug, 非常严重, 必须马上解决, 优先级为 0 !!! 于是, 我们需要立即签出到 B 分支上 checkout 新的分支进行工作, 但是我们那个屌炸天的功能还没完成怎么办? 如果直接提交的话就会出现一个无意义的提交啊!! 咋整??</li>
<li>使用 stash 命令. Stash 命令用来保存当前工作进度, 会把暂存区和工作区的改动保存起来, 在提交树中会显示为一个抽屉(?或者箱子?), <strong>不会生成 commit 节点</strong>.</li>
</ul>
</li>
</ol>
<h2 id="如何修改之前提交的同时避免产生冗余提交"><a href="#如何修改之前提交的同时避免产生冗余提交" class="headerlink" title="如何修改之前提交的同时避免产生冗余提交"></a>如何修改之前提交的同时避免产生冗余提交</h2><p>场景: 当前在工作分支上有 3 次提交: a, b, c, 其中 b 提交仅仅只是提交了一个美术素材, 但是现在需要修改这个美术素材的分辨率, 怎么办? 虽然可以直接在当前位置修改然后再创建一个提交 d, 但是这样提交就乱套了.</p>
<ol>
<li><p>第一种方案: 使用 <code>rebase -i</code> 来调整 a, b, c 的提交顺序为: a, c, b, 之后使用 <code>commit --amend</code> 修改 b 提交, 最后再次使用 <code>rebase -i</code> 把提交顺序换回去. 但是这个方案中 rebase 很容易产生冲突, 所以弃用.</p>
</li>
<li><p>第二种方案: 首先使用 <code>cherry-pick</code> 将 b 单独取出来到一个新分支上, 之后在新分支上对 b 进行修改, 提交后为 b2, 然后将 b2, c 这两个提交  <code>cherry-pick</code> 到另一个新分支上, 之后使用这个新分支继续工作, 这样可以保证不会产生冲突. 最后那两个旧分支可以删除.</p>
</li>
</ol>
<h2 id="使用-merge-还是-rebase"><a href="#使用-merge-还是-rebase" class="headerlink" title="使用 merge 还是 rebase"></a>使用 merge 还是 rebase</h2><p>先看一下 rebase 和 merge 相比时, rebase 的优缺点:</p>
<ul>
<li><p>rebase 的优点: rebase 使提交树变得很干净, 所有的提交都在一条线上, 不会保留工作时的分支记录.</p>
</li>
<li><p>rebase 的缺点: rebase 修改了提交树的历史, 比如, commit A 可以被 rebase 到 B 之后, 从提交树中看的话 A 中的工作是在 B 之后进行的, 但是实际上是在 B 之前.</p>
</li>
</ul>
<p>因此如果没有这方面的规定的话, 使用 merge 还是 rebase 取决于个人爱好, 如果你喜欢保留所有的提交历史, 这样从提交树中看来浏览整个项目的发展历程, 那么你自然需要使用 merge, 如果你不喜欢那些历史性的分支, 而是喜欢看到一颗非常干净的提交树, 那么你自然需要使用 rebase. 这东西仁者见仁, 智者见智.</p>
<h2 id="如何有效避免-git-文件体积增大"><a href="#如何有效避免-git-文件体积增大" class="headerlink" title="如何有效避免 .git 文件体积增大"></a>如何有效避免 .git 文件体积增大</h2><p>首先最重要的就是必须设置 .gitignore 文件, 这个是提交前必做的事项, 项目中全部的临时文件都不能上传到 Git 上, 其他的就是一句话概括: <font color='red'><strong>禁止提交大文件</strong></font>!</p>
<p>当然这也太笼统了, 哈哈!</p>
<p>Git 最害怕的就是无法进行内容修改比对的文件, 比如图片, 音频文件, 这些文件一旦修改了, Git 只能重新保存一份新的数据, 无法像文本文件, 代码文件那样仅保存改动信息, 因此这些文件如果提交到了 Git 上则需要确保不能进行频繁修改. 规避掉这一点就能有效避免 .git 文件夹体积过大.</p>
<h2 id="如何让-Git-识别文件名称的大小写变化"><a href="#如何让-Git-识别文件名称的大小写变化" class="headerlink" title="如何让 Git 识别文件名称的大小写变化"></a>如何让 Git 识别文件名称的大小写变化</h2><p>Git 默认不区分文件名大小变化.</p>
<p>首先我们创建一个文件叫 readme.txt, 编辑内容, 之后提交, 推送到远程仓库.</p>
<p>然后我们在本地修改文件名为 Readme.txt, 之后再次提交, 但是此时会发现 Git 检测不到任何变化.</p>
<p>原因是 Git 默认对于文件名大小写是不敏感的, 所以当我们仅修改了文件名的大小写时, Git 并没有检测到任何改动.</p>
<p>解决方案: 在仓库目录中打开 Git 终端, 输入 <code>git config core.ignorecase false</code>, 回车即可.</p>
<p>执行完之后在仓库级别的 (不明白看文章开头) 配置文件中就会多一行配置</p>
<p><img data-src="/images/git/ignore_case.png" alt="ignoreCase"></p>
<p>这样 Git 就可以不会再忽略大小写改动了.</p>
<h2 id="为什么-Git-中文件的修改纪录会发生跳跃-为什么本次的修改不是以上次的结果为基准"><a href="#为什么-Git-中文件的修改纪录会发生跳跃-为什么本次的修改不是以上次的结果为基准" class="headerlink" title="为什么 Git 中文件的修改纪录会发生跳跃 ? 为什么本次的修改不是以上次的结果为基准 ?"></a>为什么 Git 中文件的修改纪录会发生跳跃 ? 为什么本次的修改不是以上次的结果为基准 ?</h2><p>一句话描述就是发生了<strong>舍弃</strong>操作, 把一部分修改舍弃了</p>
<p>进行变基或者合并操作时, 修改的内容产生了冲突, 在解决冲突的时候直接舍弃掉了某一方的修改, 这样查看修改记录时就会发现出现了跳跃</p>
<h1 id="为什么文件中会残留冲突描述文本"><a href="#为什么文件中会残留冲突描述文本" class="headerlink" title="为什么文件中会残留冲突描述文本 ?"></a>为什么文件中会残留冲突描述文本 ?</h1><p>这 TMD 绝对是某些人用了什么诡异的操作, 没有按照正规的变基流程进行变基, 怒!!!</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 中的坐标系</title>
    <url>/unity/unity_coordinate_system.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在制作魔剑镇魂曲的 TileMap 时用到了各种坐标系之间的转换, 当时被整得云里雾里的, 现在来回顾一下. 游戏中我只用到了笛卡尔坐标系, 没有用到极坐标系, 后面就直接简称为坐标系了.</p>
<h1 id="坐标系与坐标"><a href="#坐标系与坐标" class="headerlink" title="坐标系与坐标"></a>坐标系与坐标</h1><ul>
<li><p>首先需要强调一下坐标系和坐标完全不是一回事, 文章中有很多地方涉及到坐标系和坐标, 为了避免混淆, 一定要在脑海中清晰地区分两者. 坐标系是一个系统, 而坐标只是一个表示位置的数字.</p>
</li>
<li><p>坐标是不可能独立存在的, 它必须依存于某个坐标系, 因此很多时候我们就直接简称为某某坐标. 比如在屏幕坐标系中一个点的坐标简称为 &quot;屏幕坐标&quot;, 在世界坐标系中一个点的坐标简称为 &quot;世界坐标&quot;.</p>
</li>
</ul>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>Unity 中的坐标大致分为 4 种:</p>
<table>
<thead>
<tr>
<th align="left">坐标</th>
<th align="left">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="left">世界坐标</td>
<td align="left">World Point</td>
</tr>
<tr>
<td align="left">本地坐标</td>
<td align="left">Local Point</td>
</tr>
<tr>
<td align="left">屏幕坐标</td>
<td align="left">Screen Point</td>
</tr>
<tr>
<td align="left">视图坐标</td>
<td align="left">View Point</td>
</tr>
</tbody></table>
<h1 id="世界坐标-World-Point"><a href="#世界坐标-World-Point" class="headerlink" title="世界坐标 (World Point)"></a>世界坐标 (World Point)</h1><ul>
<li><p>Unity 中有一个覆盖全部游戏物体的坐标系, 所有的游戏物体都靠这个坐标系来确定自身在游戏世界中的准确位置, 这个坐标系就是世界坐标系. 有时为了明显和 &quot;局部坐标系&quot; 相对应也被称为 &quot;全局坐标系&quot;. 在世界坐标系中得出的点的坐标称为世界坐标 (World Point).</p>
</li>
<li><p>但是遗憾的是在游戏物体 Inspector 面板中, Transform 处显示的 Position 是<font color='red'><strong>在父物体坐标系中的坐标</strong></font>, 而不是在世界坐标系中的坐标. 只有当物体没有父物体的时候, Transform 处显示的 Position 才是在世界坐标系中的坐标.</p>
</li>
<li><p>但是在脚本中, 使用 transform.position 获取的却是游戏物体的世界坐标.</p>
</li>
</ul>
<h1 id="本地坐标-Local-Point"><a href="#本地坐标-Local-Point" class="headerlink" title="本地坐标 (Local Point)"></a>本地坐标 (Local Point)</h1><ul>
<li><p>Unity 中每个游戏物体都有其自身坐标系, 其子物体便是使用这个坐标系来确定与父物体的相对位置关系. 在父物体坐标系下得出的点的坐标称为本地坐标 (Local Point).</p>
</li>
<li><p>由于本地坐标系和物体绑定, 因此当游戏物体进行旋转, 移动的时候, 坐标系也会进行相应的旋转和移动. 但是本地坐标却有一个特点: <font color='red'><strong>不变性</strong></font>. 当游戏物体进行旋转, 移动的时候, 其子物体的本地坐标是不变的, 即子物体相对于自身的相对位置不会改变, 因此子物体会跟随其父物体旋转, 移动.</p>
</li>
<li><p>Unity 中模型 Mesh 保存的顶点坐标均为本地坐标, 因为本地坐标的不变性, 即使物体进行旋转或者移动, 也不会影响顶点的坐标.</p>
</li>
<li><p>在脚本中使用 transform.position 获取的是游戏物体的世界坐标, 使用 transform.localPosition 获取的便是游戏物体的本地坐标. 但是当物体没有父物体的时候,  transform.localPosition 获取的也是世界坐标.</p>
</li>
</ul>
<h1 id="屏幕坐标-Screen-Point"><a href="#屏幕坐标-Screen-Point" class="headerlink" title="屏幕坐标 (Screen Point)"></a>屏幕坐标 (Screen Point)</h1><ul>
<li><p>屏幕坐标系是基于游戏窗口建立的坐标系.</p>
</li>
<li><p>屏幕坐标系以像素为单位, 窗口的左下角坐标为 (0, 0), 右上角坐标为窗口大小. 脚本中可以通过 (Screen.width, Screen.height) 来获取窗口大小.</p>
</li>
<li><p>脚本中使用 Input.mousePosition 可以获得鼠标坐标, 这个坐标便是基于屏幕坐标系计算得来的. 另外使用 Input.GetTouch(0).position 可以获得单个手指触摸屏幕时手指的坐标, 这个坐标也是基于屏幕坐标系计算得来的.</p>
</li>
<li><p>需要注意的是屏幕坐标不是根据玩家显示器的大小建立的坐标系, 而是以游戏窗口建立的坐标系, 比如玩家屏幕为: 1920 X 1080, 但是游戏窗口是: 800 X 600, 那么右上角的坐标是 (800, 600).</p>
</li>
</ul>
<h1 id="视图坐标-View-Point"><a href="#视图坐标-View-Point" class="headerlink" title="视图坐标 (View Point)"></a>视图坐标 (View Point)</h1><ul>
<li><p>摄像机预览窗口显示的画面, 也是基于游戏窗口建立的坐标系.</p>
</li>
<li><p>视图坐标系的大小为单位 1, 窗口的左下角坐标为 (0, 0), 右上角坐标为 (1, 1).</p>
</li>
<li><p>屏幕坐标单位化后得到的就是视图坐标.</p>
</li>
</ul>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NTM2NTUxL2FydGljbGUvZGV0YWlscy85MDI2OTkwOA==">Unity中屏幕坐标、视口坐标和世界坐标、局部坐标与其之间的相互转换<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL2xpdXFpbmd3ZW4ubWUvMjAxNy8wNy8zMS91bmRlcnN0YW5kaW5nLWNvb3JkaW5hdGUtc3lzdGVtLWluLXVuaXR5M2Qv">理解Unity3D中的四种坐标体系<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 的特殊食用方法</title>
    <url>/unity/unity_cracker.html</url>
    <content><![CDATA[<span id="more"></span>

<p>我必须立刻开始使用 Unity 2019.4.37f1 !!!</p>
<h1 id="🍆-传送门"><a href="#🍆-传送门" class="headerlink" title="🍆 传送门"></a>🍆 传送门</h1><p>Unity 的特殊使用方法就是这个网站提供的, 直接点击一下传送门就可以传送过去, 这里是传送门 🛸 <span class="exturl" data-url="aHR0cHM6Ly9hcHBuZWUuY29tL3VuaXR5Lw==">Appnee<i class="fa fa-external-link-alt"></i></span></p>
<p>如果你觉得网站上那各个版本密密麻麻的使用说明看得很头疼, 或者你想站在我的肩膀上不踩坑, 那就继续往下看吧.</p>
<h1 id="🍄-愉快食用-Unity-2019-4-37f1"><a href="#🍄-愉快食用-Unity-2019-4-37f1" class="headerlink" title="🍄 愉快食用 Unity 2019.4.37f1"></a>🍄 愉快食用 Unity 2019.4.37f1</h1><h2 id="🌴-料理前准备-非必选"><a href="#🌴-料理前准备-非必选" class="headerlink" title="🌴 料理前准备 [非必选]"></a>🌴 料理前准备 [非必选]</h2><p>下面的步骤全部是为新食客准备的, 如果你是一位经验丰富的老美食家, 完全可以自己选择准备哪些东西.</p>
<ul>
<li><p>删除以下 Unity 缓存文件</p>
<p>  <code>C:\Users\(用户名)\AppData\Local\Unity\</code></p>
<p>  <code>C:\Users\(用户名)\AppData\LocalLow\Unity\</code></p>
<p>  <code>C:\Users\(用户名)\AppData\Roaming\Unity\</code></p>
</li>
<li><p>删除以下 Unity Hub 缓存文件</p>
<p>  <code>C:\Users\(用户名)\AppData\Roaming\UnityHub\</code></p>
</li>
<li><p>删除所有与 Unity 相关的注册表项</p>
<p>  <code>HKEY_CURRENT_USER\Software\Unity\UnityEditor\</code></p>
<p>  <code>HKEY_CURRENT_USER\Software\Unity\</code></p>
</li>
</ul>
<h2 id="🍖-食材采集"><a href="#🍖-食材采集" class="headerlink" title="🍖 食材采集"></a>🍖 食材采集</h2><p>先来采集一下食材</p>
<p>主食系列: <a href="https://unity3d.com/get-unity/download/archive"><strong>Unity 2019.4.37f1</strong></a> 自己选择需要的主食采集即可</p>
<p>辅料: <a href="http://kuroha.ysepan.com/"><strong>Unity Hub 3.0.1</strong></a></p>
<p>采集完之后直接放到锅里, 但是先不要食用, 后面还有其他的料理步骤</p>
<h2 id="🍳-料理主食"><a href="#🍳-料理主食" class="headerlink" title="🍳 料理主食"></a>🍳 料理主食</h2><p>先领一下料理包, 拿到 <a href="http://kuroha.ysepan.com/"><strong>料理包</strong></a> 之后开始料理</p>
<ul>
<li><p>准备</p>
<ul>
<li>备份 2019.4.37f1\Editor\Unity.exe 文件</li>
</ul>
</li>
<li><p>处理</p>
<ul>
<li>删除整个 <font color='red'><strong>2019.4.37f1\Editor\Data\Resources\Licensing</strong></font> 文件夹</li>
</ul>
</li>
<li><p>料理</p>
<ul>
<li><p>使用料理包中的 <font color='red'><strong>Unity.exe</strong></font> 替换 2019.4.37f1\Editor\Unity.exe</p>
</li>
<li><p>将 <font color='red'><strong>Unity_lic.ulf</strong></font> 复制到 C:\ProgramData\Unity\ 中. [<strong>可能需要手动创建 Unity 文件夹</strong>]</p>
</li>
</ul>
</li>
</ul>
<p>到这里主食就料理完成了, 可以直接食用, 但是为了更好地食用, 我们来处理一下辅料.</p>
<h2 id="🥦-料理辅料"><a href="#🥦-料理辅料" class="headerlink" title="🥦 料理辅料"></a>🥦 料理辅料</h2><p>辅料的料理包和主食的料理包放在一起, 可以直接找到.</p>
<ul>
<li><p>处理</p>
<ul>
<li><p>将 <strong>Unity Hub\Frameworks\LicensingClient\Unity.Licensing.Client.exe</strong> 重命名为 <strong>Unity.Licensing.Client.exe.back</strong></p>
<blockquote>
<p><font color='red'><strong>[注]</strong></font> 辅料从 3.0.0 开始, 在料理前需要先重命名 <font color='red'><strong>Unity.Licensing.Client.exe</strong></font> 文件, 同时由于删除 <strong>LicensingClient</strong> 文件夹或 <strong>Frameworks</strong> 文件夹会导致另一个补丁软件的 patch 按钮不显示, 因此这里最好的做法是重命名文件, 而不是直接删除目录, 虽然我们要达到的效果都是<strong>让此程序无法运行</strong></p>
</blockquote>
</li>
</ul>
</li>
<li><p>料理</p>
<ul>
<li>将料理包中的 <font color='red'><strong>app.asar</strong></font> 文件复制到 Unity Hub\resources\ 目录下并覆盖</li>
</ul>
</li>
</ul>
<p>到这里辅料也就料理完成了, 可以直接食用.</p>
<h1 id="🌿-食用前的注意事项"><a href="#🌿-食用前的注意事项" class="headerlink" title="🌿 食用前的注意事项"></a>🌿 食用前的注意事项</h1><h2 id="🍴-如何匿名食用"><a href="#🍴-如何匿名食用" class="headerlink" title="🍴 如何匿名食用"></a>🍴 如何匿名食用</h2><p>如果食用前被保安拦住了, 需要提供一下身份该怎么办呢?</p>
<ul>
<li><p>先<font color='red'><strong>退出去</strong></font>. 总不能在人家明目张胆地造假吧 ? !</p>
</li>
<li><p>找到 <code>C:\Users\[用户名]\AppData\Roaming\UnityHub\firstTimeOpenKey.json</code>, 将里面的内容改为 <code>false</code> 之后, 就可以匿名食用了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>战棋游戏中使用 Flood Fill 算法计算行动范围</title>
    <url>/unity/unity_floodfill.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>文章中的项目是使用 Unity 创建的 2D 游戏项目, 代码是基于 <code>Microsoft Visual Studio</code> 编写, 使用的编程语言是 <code>csharp</code>.</p>
<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>Flood Fill 算法翻译为中文可以叫: &quot;洪水填充&quot; 算法.</p>
<p>从起始位置开始, 不断向外围进行检测, 就像从中心一点向外不断蔓延的洪水一般.</p>
<p>话说这个蔓延方式也不像洪水啊, 不应该是核弹爆炸嘛~ 今天又是核平的一天呐~ 😅</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>Flood Fill 算法的基本原理是基于一个待检查队列, 这个队列中存放接下来待检查的结点, 首先取出待检查队列中一个结点, 检查其坐标周围的四个结点,</p>
<p><img data-src="/images/unity/floodfill01.png" alt="Flood Fill 1"></p>
<p>将这个四个结点中满足条件的结点添加到待检查队列, 之后从待检查队列中取出下一个待检查结点以同样的规则进行检查, 再将满足条件的结点添加到待检查队列, 如此反复,</p>
<p><img data-src="/images/unity/floodfill02.png" alt="Flood Fill 2"></p>
<p>直到将待检查队列中的结点全部检查完毕!</p>
<h1 id="定义待检查队列中的结点类型"><a href="#定义待检查队列中的结点类型" class="headerlink" title="定义待检查队列中的结点类型"></a>定义待检查队列中的结点类型</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Data Struct 范围结点</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DS_FloodFill_Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 结点的 X 坐标</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> positionX;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 结点的 Y 坐标</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> positionY;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 到达此结点时剩余的步数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> overStep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义两个 int 字段存储结点的坐标, 再定义一个 overStep, 表示从起始坐标到达此结点所在坐标时剩余的步数.</p>
<h1 id="创建算法类"><a href="#创建算法类" class="headerlink" title="创建算法类"></a>创建算法类</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 算法类: Flood Fill</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 洪水填充</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AR_FloodFill</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 算法具体内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="创建算法需要的临时变量"><a href="#创建算法需要的临时变量" class="headerlink" title="创建算法需要的临时变量"></a>创建算法需要的临时变量</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 地图数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> EM_Terrain[,] map;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1. 检查过的格子</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2. 可行动范围 (无其他数据)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span>[,] flagChecked;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 可行动范围 (有其他数据)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;DS_FloodFill_Node&gt; range = <span class="keyword">new</span> List&lt;DS_FloodFill_Node&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1. 循环检查游标, 指明列表中 &quot;当前待检查结点&quot; 的位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2. 循环检查次数计数器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">int</span> checkIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 是否无视地形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isIgnoreTerrain;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>map 是整张地图的数据, 虽然这里只是一个枚举数组, 但是项目中有一个字典变量, 通过这个枚举值便可以查到特定的地形类型所对应的全部数据, 包含地形名称, 地形提供的闪避率, 防御力, 攻击力, 生命回复等等. 全部的数据结构牵扯的东西比较多, 这里就不列出了.</p>
</li>
<li><p>flagChecked 用来标记算法在循环过程中哪些坐标已经被检查通过了, 这样可以避免重复检查. 另外, flagChecked 使用的存储方式是二维数组, 它是将检查过的位置标记在相应的坐标处, 且只标记通过的位置, 即 flagChecked 的值就是最终的行动范围, 但是它不附带其他的数据.</p>
</li>
<li><p>range 记录的也是被检查通过的结点, 但是它会将全部信息进行保存.</p>
</li>
<li><p>checkIndex 是待检查队列的游标, 表示当前检查到什么位置了.</p>
</li>
<li><p>isIgnoreTerrain 标识是否无视地形, 用于区分检测的是移动范围还是攻击范围.</p>
</li>
</ul>
<h1 id="实现-Flood-Fill-算法"><a href="#实现-Flood-Fill-算法" class="headerlink" title="实现 Flood Fill 算法"></a>实现 Flood Fill 算法</h1><h2 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 洪水填充算法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;map&quot;&gt;</span>地图数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;startPositionX&quot;&gt;</span>人物坐标 X<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;startPositionY&quot;&gt;</span>人物坐标 Y<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;minRange&quot;&gt;</span>最小直接行动范围<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;maxRange&quot;&gt;</span>最大直接行动范围<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;isIgnoreTerrain&quot;&gt;</span>是否无视地形<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>可行动范围<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span>[,] FloodFill(EM_Terrain[,] map, <span class="built_in">int</span> startPositionX, <span class="built_in">int</span> startPositionY, <span class="built_in">int</span> minRange, <span class="built_in">int</span> maxRange, <span class="built_in">bool</span> isIgnoreTerrain)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 地图</span></span><br><span class="line">    <span class="keyword">this</span>.map = map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否无视地形</span></span><br><span class="line">    <span class="keyword">this</span>.isIgnoreTerrain = isIgnoreTerrain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化存放已检查格子的数组</span></span><br><span class="line">    flagChecked = <span class="keyword">new</span> <span class="built_in">bool</span>[map.GetLength(<span class="number">0</span>), map.GetLength(<span class="number">1</span>)];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; flagChecked.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; flagChecked.GetLength(<span class="number">1</span>); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            flagChecked[i, j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将起点存入 可行动范围</span></span><br><span class="line">    DS_FloodFill_Node startPosition = <span class="keyword">new</span> DS_FloodFill_Node</span><br><span class="line">    &#123;</span><br><span class="line">        positionX = startPositionX,</span><br><span class="line">        positionY = startPositionY,</span><br><span class="line">        overStep = maxRange,</span><br><span class="line">    &#125;;</span><br><span class="line">    range.Add(startPosition);</span><br><span class="line">    flagChecked[startPositionX, startPositionY] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扫描地图上特定坐标周围的格子, 计算行动范围</span></span><br><span class="line">    ScanMap(checkIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否去除起始坐标</span></span><br><span class="line">    RemoveMinRange(minRange);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">return</span> flagChecked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法做的事情不多 (读者: 整个 Flood Fill 算法做的事情也不多好吧! !), 首先初始化算法需要的数据, 之后将初始位置存入待检查队列等待第一次检查, 记得同时更新 range 和 flagChecked 的值, 然后便可以使用 ScanMap() 方法检查整张地图了, 最后判断一下是否需要移除起始坐标, 像使用物品是可以对自己使用的, 但是移动的时候原地移动是不算真正移动了的, 攻击也同样不能攻击自己, 最后将计算好的范围返回外部, 由外部进行处理.</p>
<h2 id="ScanMap-方法"><a href="#ScanMap-方法" class="headerlink" title="ScanMap 方法"></a>ScanMap 方法</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 扫描地图上特定坐标周围的格子, 计算行动范围</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;checkIndex&quot;&gt;</span>特定坐标的索引<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ScanMap</span>(<span class="params"><span class="built_in">int</span> checkIndex</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 只要还没有将所有的可移动范围检测完, 就继续检测</span></span><br><span class="line">    <span class="keyword">while</span> (checkIndex &lt; range.Count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> positionX = range[checkIndex].positionX;</span><br><span class="line">        <span class="built_in">int</span> positionY = range[checkIndex].positionY;</span><br><span class="line">        <span class="built_in">int</span> overStep = range[checkIndex].overStep;</span><br><span class="line"></span><br><span class="line">        CheckMapPos(positionX, positionY + <span class="number">1</span>, overStep);</span><br><span class="line">        CheckMapPos(positionX - <span class="number">1</span>, positionY, overStep);</span><br><span class="line">        CheckMapPos(positionX, positionY - <span class="number">1</span>, overStep);</span><br><span class="line">        CheckMapPos(positionX + <span class="number">1</span>, positionY, overStep);</span><br><span class="line"></span><br><span class="line">        checkIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ScanMap() 方法就是一个循环, 针对当前坐标计算出周围坐标, 然后使用 CheckMapPos() 方法检测特定坐标.</p>
<h2 id="CheckMapPos-方法"><a href="#CheckMapPos-方法" class="headerlink" title="CheckMapPos() 方法"></a>CheckMapPos() 方法</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 检查地图上特定坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;positionX&quot;&gt;</span>特定坐标 X 轴<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;positionY&quot;&gt;</span>特定坐标 Y 轴<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;overStep&quot;&gt;</span>剩余步数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckMapPos</span>(<span class="params"><span class="built_in">int</span> positionX, <span class="built_in">int</span> positionY, <span class="built_in">int</span> overStep</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判断是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (positionX &lt; <span class="number">0</span> || positionX &gt;= map.GetLength(<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (positionY &lt; <span class="number">0</span> || positionY &gt;= map.GetLength(<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否可以到达当前单元格</span></span><br><span class="line">    overStep = isIgnoreTerrain ? overStep - <span class="number">1</span> : overStep - AD_Terrain.AD_Terrains[map[positionX, positionY]].BaseStepCost;</span><br><span class="line">    <span class="keyword">if</span> (overStep &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前单元格已经在行动范围内了</span></span><br><span class="line">    <span class="keyword">if</span> (flagChecked[positionX, positionY])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> checkedRangeDataIndex = GetCheckedRangeDataIndex(positionX, positionY);</span><br><span class="line">        <span class="keyword">if</span> (overStep &gt; range[checkedRangeDataIndex].overStep)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 更新在行动范围内的数据</span></span><br><span class="line">            DS_FloodFill_Node updatePosition = <span class="keyword">new</span> DS_FloodFill_Node</span><br><span class="line">            &#123;</span><br><span class="line">                positionX = positionX,</span><br><span class="line">                positionY = positionY,</span><br><span class="line">                overStep = overStep,</span><br><span class="line">            &#125;;</span><br><span class="line">            range[checkedRangeDataIndex] = updatePosition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 如果当前单元格没有在行动范围内</span></span><br><span class="line">    &#123;</span><br><span class="line">        DS_FloodFill_Node currentPosition = <span class="keyword">new</span> DS_FloodFill_Node</span><br><span class="line">        &#123;</span><br><span class="line">            positionX = positionX,</span><br><span class="line">            positionY = positionY,</span><br><span class="line">            overStep = overStep,</span><br><span class="line">        &#125;;</span><br><span class="line">        range.Add(currentPosition);</span><br><span class="line">        flagChecked[positionX, positionY] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CheckMapPos() 方法的重点就是退出条件.</p>
<h3 id="退出条件"><a href="#退出条件" class="headerlink" title="退出条件"></a>退出条件</h3><ol>
<li>是否越界</li>
</ol>
<p>由于我项目中地图的坐标是从 (0, 0) 开始设计的, 所以这里的越界判断自然就是这样的写法啦~</p>
<ol start="2">
<li>是否可以到达当前坐标</li>
</ol>
<p>这里的判断使用了 &#39;isIgnoreTerrain&#39; 变量, 当无视地形时, 每移动一个位置消耗的步数为 1, 用于使用物品以及攻击范围的计算, 不无视地形时, 每移动一个位置消耗的步数需要根据地形类型进行判断, 用于计算移动范围.</p>
<p>[<strong>注</strong>] 另一个需要注意的是 overStep, 里面保存的值不一定是最大剩余步数.</p>
<p>这个问题是计算行动范围时会遇到的特殊情况. 由于每个坐标消耗的步数不同, 所以经常会出现这种情况:</p>
<p><img data-src="/images/unity/floodfill03.png" alt="Flood Fill 3"></p>
<p>假设行动步数为 10 步, 翻越城镇城墙消耗 5 步, 进入城镇消耗 1 步, 那么:</p>
<p>路线1首先检测到了城镇入口, 到达时剩余步数为: 4;</p>
<p>路线2之后检测到了城镇入口, 到达时剩余步数为: 6;</p>
<p>于是单独写一个 if 进行判断, 如果结点已经检查过了, 那么比较两次路线的剩余步数, 并更新为大的剩余步数. 当然这个地方不写 (上面代码段中的最后一个 if else 逻辑) 也已经可以充分的实现计算行动范围了.</p>
<h2 id="独立方法"><a href="#独立方法" class="headerlink" title="独立方法"></a>独立方法</h2><p>最后便是提取出来的独立方法.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 得到已经检查过的结点</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;positionX&quot;&gt;</span>特定坐标 X 轴<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;positionY&quot;&gt;</span>特定坐标 Y 轴<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>结点索引<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetCheckedRangeDataIndex</span>(<span class="params"><span class="built_in">int</span> positionX, <span class="built_in">int</span> positionY</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 已经检查过的就不用比较了, 因为已经检查过的剩余步数肯定已经最大了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = checkIndex + <span class="number">1</span>; i &lt; range.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (range[i].positionX == positionX &amp;&amp;</span><br><span class="line">            range[i].positionY == positionY)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除小于最小范围的非法坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;minRange&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RemoveMinRange</span>(<span class="params"><span class="built_in">int</span> minRange</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 记录下起始位置坐标</span></span><br><span class="line">    <span class="built_in">int</span> startPositionX = range[<span class="number">0</span>].positionX;</span><br><span class="line">    <span class="built_in">int</span> startPositionY = range[<span class="number">0</span>].positionY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minRange &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; range.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.Abs(startPositionX - range[i].positionX) + Math.Abs(startPositionY - range[i].positionY) &lt; minRange)</span><br><span class="line">            &#123;</span><br><span class="line">                flagChecked[range[i].positionX, range[i].positionY] = <span class="literal">false</span>;</span><br><span class="line">                range.RemoveAt(i);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样最终返回的 bool 数组便是可行动的范围!</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><span class="exturl" data-url="aHR0cHM6Ly9pdHV1ei5jb20vMjAxOS8wOS8yMS9maXJlLWVtYmxlbS1wYXRoLw==">cocos creator 实现战棋类游戏移动范围效果<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建自定义瓦片</title>
    <url>/unity/unity_customize_tile.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="选用待继承的瓦片"><a href="#选用待继承的瓦片" class="headerlink" title="选用待继承的瓦片"></a>选用待继承的瓦片</h1><p>编写自定义瓦片其实就是通过继承 Unity 原有瓦片, 并添加新数据来创建自己的瓦片, 因此首先需要选用待继承的瓦片, 这个根据项目的需要选择即可.</p>
<p>如果瓦片需要播放动画, 便需要继承动画瓦片, 需要使用预制体就继承预制体瓦片, 需要使用普通瓦片, 随机瓦片, 规则瓦片时都可以继承自规则瓦片.</p>
<h1 id="添加自定义数据"><a href="#添加自定义数据" class="headerlink" title="添加自定义数据"></a>添加自定义数据</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 魔剑镇魂曲瓦片, 继承自 RuleTile</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;New Sword Requiem Tile.asset&quot;</span>, menuName = <span class="string">&quot;Sword Requiem Tile&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SwordRequiemTile</span> : <span class="title">RuleTile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举: 地形类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> EM_Terrain defaultTerrainType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是我自定义的 <code>Sword Requiem Tile</code>, 只添加了一个简单的枚举类型数据.</p>
<ul>
<li><p>Serializable: 标记此类可以被序列化.</p>
</li>
<li><p>CreateAssetMenu: 标记此脚本可以在资源菜单中直接创建, 创建的默认文件为: <code>New Sword Requiem Tile.asset</code>, 菜单项的路径为: <code>Sword Requiem Tile</code>.</p>
</li>
<li><p>SwordRequiemTile: 继承自规则瓦片的自定义瓦片的类型名称.</p>
</li>
<li><p>defaultTerrainType: 自定义数据-默认地形类型.</p>
</li>
</ul>
<p>[<strong>注</strong>] 这个地方有一个挺大的坑, 可以看到我这里的自定义数据使用的是 &#39;字段&#39; 而非 &#39;属性&#39;, 因为使用属性, Inspector 面板中便无法持久保存瓦片属性.</p>
<p>表现在项目中就是, 首先创建枚举, &#39;森林&#39; 的枚举值为 0, &#39;断层&#39; 为 1, 我创建了一个 Sword Requiem Tile, 默认地形类型自动初始化为 &#39;森林&#39;, 然后修改瓦片的地形类型为 &#39;断层&#39;, 之后绘制地形, 运行游戏, 发现一切正常, 但是一旦关闭 Unity, 再次打开时所有瓦片的自定义数据全部会被重置为 &#39;森林&#39;, 即默认值, 想想这个多可怕!</p>
<p>以上情况不知道是不是我自己的失误, 总之这里使用原始的字段不会有任何问题.</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Tile</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/unity/unity_closure.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>之前在学习委托事件的时候了解了一下闭包, 没想到后来在游戏制作中就犯了一个闭包的错误.</p>
<p>使用的是 Unity 引擎, 先看一个 Start 方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    GameObject gameObject;</span><br><span class="line">    characterPackage = characterDataScript.characterData.Package;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; characterPackage.Count; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 生成菜单项, 并设置父物体</span></span><br><span class="line">        gameObject = Instantiate(itemMenuItemPrefab, itemMenuItemParent.transform);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改菜单项的名称</span></span><br><span class="line">        gameObject.name = index.ToString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改菜单项的图标</span></span><br><span class="line">        gameObject.transform.Find(<span class="string">&quot;Icon&quot;</span>).Find(<span class="string">&quot;Image&quot;</span>).GetComponent&lt;Image&gt;().sprite = characterPackage[index].Icon;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改菜单项的文本</span></span><br><span class="line">        gameObject.transform.Find(<span class="string">&quot;Name&quot;</span>).Find(<span class="string">&quot;Text&quot;</span>).GetComponent&lt;Text&gt;().text = characterPackage[index].Name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给菜单项的按钮注册事件, [UnityAction: 一个无参的委托, 返回值无所谓]</span></span><br><span class="line">        gameObject.GetComponent&lt;Button&gt;().onClick.AddListener(() =&gt; Event_ItemSelected(gameObject));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行步骤:</p>
<ol>
<li>新建一个菜单项, 用 gameObject 保存.</li>
<li>修改菜单项各项属性. 其中名称属性就是遍历索引 index 的值, 即第一个菜单项的名称是 0, 第二个是 1, 第十个是 9 等等;</li>
<li>给菜单项上的按钮注册事件, 事件的参数为 gameObject, 即将菜单项自身作为参数传递到方法中.</li>
</ol>
<p>那么问题来了, 假设有 4 个菜单项, 那么在事件 <code>Event_ItemSelected</code> 中输出按钮的名称的话, 依次点击菜单项会输出什么呢?</p>
<p>不是很了解闭包的人应该会说出这个答案: <code>0, 1, 2, 3</code>, 而正确的答案是: <code>3, 3, 3, 3</code>!</p>
<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包?"></a>什么是闭包?</h2><p>在上面的代码段中, <code>gameObject</code> 变量是在 Start 方法中定义的, 那么按理来说只要出了 Start 方法, gameObject 变量就不存在了. 但是我们在按钮的 <code>Event_ItemSelected</code> 事件中却又访问了变量 gameObject, 这种现象就是闭包.</p>
<p>当一个变量脱离了其自身的作用域后, 根据上下文关系继续在某些方法或者类中发挥作用的现象就是闭包. 或者说闭包可以让变量脱离其作用域继续发挥作用.</p>
<h2 id="答案解析"><a href="#答案解析" class="headerlink" title="答案解析"></a>答案解析</h2><p>在上面的代码中, 每次循环都会创建一个菜单项, 并将 gameObject 变量作为参数绑定事件, 所以最后的结果就是 菜单项 0, 菜单项 1, 菜单项 2, 菜单项 3 都使用了 gameObject 变量作为参数, 而 gameObject 是一个变量啊, 不是一个常量, 创建菜单项 0 的时候, gameObject 确实是菜单项 0, 但是等到了创建菜单项 3 的时候, gameObject 也就变成菜单项 3 了, 因此调用事件的瞬间, 使用的也是那个瞬间的 gameObject 值, 也就是 3.</p>
<h2 id="纠正"><a href="#纠正" class="headerlink" title="纠正"></a>纠正</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    characterPackage = characterDataScript.characterData.Package;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; characterPackage.Count; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 生成菜单项, 并设置父物体</span></span><br><span class="line">        GameObject gameObject = Instantiate(itemMenuItemPrefab, itemMenuItemParent.transform);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改菜单项的名称</span></span><br><span class="line">        gameObject.name = index.ToString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改菜单项的图标</span></span><br><span class="line">        gameObject.transform.Find(<span class="string">&quot;Icon&quot;</span>).Find(<span class="string">&quot;Image&quot;</span>).GetComponent&lt;Image&gt;().sprite = characterPackage[index].Icon;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改菜单项的文本</span></span><br><span class="line">        gameObject.transform.Find(<span class="string">&quot;Name&quot;</span>).Find(<span class="string">&quot;Text&quot;</span>).GetComponent&lt;Text&gt;().text = characterPackage[index].Name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给菜单项的按钮注册事件, [UnityAction: 一个无参的委托, 返回值无所谓]</span></span><br><span class="line">        gameObject.GetComponent&lt;Button&gt;().onClick.AddListener(() =&gt; Event_ItemSelected(gameObject));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用这段代码就可以纠正那个错误, 两段代码只有一个区别, 就是 gameObject 变量定义的位置不同. 一个在 for 循环外, 一个在 for 循环内.</p>
<ol>
<li><p>在 for 循环<strong>外部</strong>定义时, 每一个菜单项使用的都是同一个 gameObject;</p>
</li>
<li><p>在 for 循环<strong>内部</strong>定义时, 每一次循环都会重新定义一个 gameObject, 每一个菜单项之间使用的都是不同的 gameObject;</p>
</li>
</ol>
<p><img data-src="/images/unity/closure.png" alt="closure"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Unity 中导入模型材质球的最优雅姿势</title>
    <url>/unity/unity_model_importer.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🥦Model-Importer-前言"><a href="#🥦Model-Importer-前言" class="headerlink" title="🥦Model Importer 前言"></a>🥦Model Importer 前言</h1><p>对于项目中模型的材质球导入问题一直没有明确的规范, 导致这块美术资源的处理要么依赖出问题, 分包出问题, 资源加载卡顿, 要么产生的额外材质球导致版本管理异常, 到处充斥着 Unity 拉的屎, 这里一坨, 那里一坨, 对于我这种强迫症晚期患者而言, 每每看见一坨坨的屎, 上班的心情都没有了~</p>
<p>想起来自己曾经处理过这个问题, 但是当时的思路还是模模糊糊的, 处于一种总感觉哪里有问题却又说不上来的状态, 于是趁最近几天的空闲时间, 再次把这个问题捡起来, 彻底把坑填上!</p>
<p>先来看一下官方对模型导入材质球的说明: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tLzYwMDAuMS9Eb2N1bWVudGF0aW9uL01hbnVhbC9GQlhJbXBvcnRlci1NYXRlcmlhbHMuaHRtbA==">跳转官方手册 Materials tab<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="🎈Material-Tab-解析"><a href="#🎈Material-Tab-解析" class="headerlink" title="🎈Material Tab 解析"></a>🎈Material Tab 解析</h1><p>先来彻底解析一下 Model Importer 的 Material 页面</p>
<p><img data-src="/images/unity/importer_material_1.png" alt="Material Tab"></p>
<p>这个页面就是控制 Unity 如何生成材质球的, 生成材质球的模式有 3 种: <code>None</code> <code>Standard (Legacy)</code> <code>Import via MaterialDescription</code> 下面来逐一说明</p>
<h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><p>此模式下 Unity 将不参考任何模型数据, 而是直接引用 Unity 标准材质球, 原文是 &quot;Unity&#39;s default diffuse Material&quot;</p>
<h2 id="Standard-Legacy"><a href="#Standard-Legacy" class="headerlink" title="Standard (Legacy)"></a>Standard (Legacy)</h2><p>此模式下 Unity 将使用一组默认规则生成材质球, 即规则固定, 不支持自定义, 同时标准模式也不支持复杂的材质球</p>
<p>比如 <code>Arnold Material</code> <code>Physical Material</code> <code>HDRP Material</code> 等</p>
<h2 id="Import-via-MaterialDescription"><a href="#Import-via-MaterialDescription" class="headerlink" title="Import via MaterialDescription"></a>Import via MaterialDescription</h2><p>此模式下 Unity 将使用 FBX 文件中嵌入的材质描述来生成材质, 相比标准模式, 此模式可以提供更准确的结果并支持更广泛的材质类型</p>
<h1 id="🍸三种模式的总结"><a href="#🍸三种模式的总结" class="headerlink" title="🍸三种模式的总结"></a>🍸三种模式的总结</h1><p><code>None</code> 模式下会引用标准材质球, 并且无法移除, 因此不满足要求</p>
<p><code>Standard (Legacy)</code> 模式下会按默认规则生成材质球, 但是可以移除, 因此可以使用此模式</p>
<p><code>Import via MaterialDescription</code> 模式下会按模型内的材质描述信息生成材质球, 但目前项目中的模型都没有使用材质描述, 因此不适用</p>
<p>下面来详细说明一下 <code>Standard (Legacy)</code> 模式, <code>Import via MaterialDescription</code> 模式就不讲解了, 感兴趣的可以自行查阅资料 (我才不会说我也不知道呢(●ˇ∀ˇ●))</p>
<h1 id="🍀Standard-Legacy"><a href="#🍀Standard-Legacy" class="headerlink" title="🍀Standard (Legacy)"></a>🍀Standard (Legacy)</h1><ul>
<li><strong>sRGB Albedo Colors</strong></li>
</ul>
<p>此选项控制使用伽马空间还是线性空间</p>
<p>说实话我并没有图形学相关知识, 我感觉这个选项技美人员肯定知道怎么设置, 交给专业人士了! 我们来看其他选项</p>
<ul>
<li><strong>Location</strong></li>
</ul>
<p>重点来了 <code>Location</code> 选项, 这个选项用来控制 Unity 生成材质球的位置, 有 2 种选择</p>
<p><code>Use External Materials (Legacy)</code> 和 <code>Use Embedded Materials</code> 我来逐个说明</p>
<h1 id="🍇Use-External-Materials-Legacy"><a href="#🍇Use-External-Materials-Legacy" class="headerlink" title="🍇Use External Materials (Legacy)"></a>🍇Use External Materials (Legacy)</h1><p><img data-src="/images/unity/importer_material_2.png" alt="Use External Materials (Legacy)"></p>
<p>这个选项下, Unity 会尝试查找已有的材质球资源, 查找时按照 <code>Naming</code> 和 <code>Search</code> 配置的查找方式进行查找 (查找方式的配置在本文最后)</p>
<p>那如果找不到会怎么样呢? 会 <strong>使用默认规则新建材质球资源并放置于同级的 Materials 文件夹中</strong></p>
<p>上图中可以看到, 模型 Model Demo 同级目录中有一个 Materials 文件夹, 里面存放的就是 Unity 在标准模式下生成的材质球</p>
<h1 id="🍉-External-模式总结"><a href="#🍉-External-模式总结" class="headerlink" title="🍉 External 模式总结"></a>🍉 External 模式总结</h1><p><code>优先尝试搜寻外部材质球, 搜寻不到则按默认规则新建材质球</code></p>
<blockquote>
<p>只有当模型和材质球具有强制要求的命名规则, 并且强绑定, 材质球不会复用的情况下才推荐 Use External Materials (Legacy) 设置</p>
<p>否则一旦 Unity 找不到对应的材质球便会新建 Materials 文件夹以及对应的材质球资源, 但是没有哪个项目会使用 Unity 生成的默认材质球的, 这部分默认材质球很显然是多余的资源!</p>
<p>因此<strong>不推荐</strong>!</p>
</blockquote>
<p>接下来看另一个选项</p>
<h1 id="🍒Use-Embedded-Materials"><a href="#🍒Use-Embedded-Materials" class="headerlink" title="🍒Use Embedded Materials"></a>🍒Use Embedded Materials</h1><p><img data-src="/images/unity/importer_material_3.png" alt="Use Embedded Materials"></p>
<p>这个选项下, Unity 会直接使用默认规则新建材质球资源</p>
<p>但是和上一个选项不同的是不再放置于同级的 Materials 文件夹中, 而是直接作为模型的 SubAsset</p>
<p>从上图中可以很明显地看到生成了 <code>01 - Default</code> <code>02 - Default</code> <code>03 - Default</code> 三个材质球, 并且是作为模型内嵌资源的形式</p>
<p>但是作为内嵌资源的方式有很大的弊端, 那就是无法修改材质球的参数, 为了解决这个问题, Unity 提供了 <code>资源导出</code> 功能</p>
<h2 id="资源导出功能"><a href="#资源导出功能" class="headerlink" title="资源导出功能"></a>资源导出功能</h2><ul>
<li>Extract Materials</li>
</ul>
<p>提取 Unity 使用默认规则新建的作为模型 SubAsset 资源的材质球资源到指定的目录中</p>
<ul>
<li>Extract Textures</li>
</ul>
<p>提取 Unity 使用默认规则新建的作为模型 SubAsset 资源的贴图资源到指定的目录中</p>
<p>使用上述两按钮便可以导出 Unity 创建的材质球和贴图, 并且会将导出信息记录在 meta 文件的 <code>externalObjects</code> 字段中</p>
<p>导出时无法指定某一个材质球或纹理单独导出, 只能导出全部的材质球或者全部的纹理</p>
<p>每一条导出信息都由以下信息构成, 其中最关键的就是 <code>name</code> 信息, 只有名称和模型中记录的名称完全匹配的信息才视为一条正确的导出信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">first:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">UnityEngine:Material</span></span><br><span class="line">    <span class="attr">assembly:</span> <span class="string">UnityEngine.CoreModule</span></span><br><span class="line">    <span class="attr">name:</span> <span class="number">01</span> <span class="bullet">-</span> <span class="string">Default</span></span><br><span class="line">  <span class="attr">second:</span> &#123;<span class="attr">fileID:</span> <span class="number">2100000</span>, <span class="attr">guid:</span> <span class="string">6ec473d8d7e6a0f4b98313871e38903d</span>, <span class="attr">type:</span> <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>但是资源导出功能也仅仅是将资源导出而已, 使用的还是 Unity 按照默认规则生成的资源, 并不是我们自己的资源, 于是还有一个功能 <code>资源重映射</code> 功能</p>
<h2 id="资源重映射功能"><a href="#资源重映射功能" class="headerlink" title="资源重映射功能"></a>资源重映射功能</h2><p><code>Remapped Materials</code> 同样使用 <code>Naming</code> 和 <code>Search</code> 配置的查找规则尝试查找重映射材质球</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">first:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">UnityEngine:Material</span></span><br><span class="line">    <span class="attr">assembly:</span> <span class="string">UnityEngine.CoreModule</span></span><br><span class="line">    <span class="attr">name:</span> <span class="number">01</span> <span class="bullet">-</span> <span class="string">Default</span></span><br><span class="line">  <span class="attr">second:</span> &#123;<span class="attr">fileID:</span> <span class="number">2100000</span>, <span class="attr">guid:</span> <span class="string">6ec473d8d7e6a0f4b98313871e38903d</span>, <span class="attr">type:</span> <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>上面是一条合法的导出信息, 重映射功能修改的就是其中的 <code>guid</code> 字段信息</p>
<p>因此 <code>资源重映射</code> 功能是以 <code>资源导出</code> 功能为基础的, 如果此时 meta 文件中没有任何导出信息, 执行重映射时便会自动新建对应材质球的导出信息, 相当于将指定的一个材质球执行了导出操作, 其余没有创建导出信息的依旧会以内嵌资源 (SubAsset) 的形式存在于模型资源中</p>
<h1 id="🍍Embedded-模式总结"><a href="#🍍Embedded-模式总结" class="headerlink" title="🍍Embedded 模式总结"></a>🍍Embedded 模式总结</h1><p>简单概括: <code>不存在导出信息时以内嵌资源的形式创建材质球, 存在导出信息时引用导出信息中的资源</code></p>
<blockquote>
<p>此模式在存在导出信息时会直接引用导出信息中的资源, 因此自定义程度极高, 强烈推荐此模式!</p>
<p>但是要注意, 在没有导出信息的情况下, Unity 依旧会创建材质球, 虽然是以内嵌资源的形式, 但这依然不是我们想要的, 所以切记要设置导出信息才行!</p>
<p><strong>强烈推荐</strong>!</p>
</blockquote>
<h1 id="🥒如何批量设置导出信息"><a href="#🥒如何批量设置导出信息" class="headerlink" title="🥒如何批量设置导出信息"></a>🥒如何批量设置导出信息</h1><p>本文最后会贴出完整代码, 这里就只说一下思路</p>
<ul>
<li>将模型导入设置修改为 Standard + Embedded, 并重新序列化 meta 文件</li>
</ul>
<p>这是为了统一导入设置, 同时规范 meta 文件的格式, 为后面文本处理做准备</p>
<ul>
<li>使用逐行扫描的方式删除 &quot;  externalObjects:&quot; 到 &quot;  materials:&quot; 的全部 Remap 信息</li>
</ul>
<p>这里为什么不使用 Unity 自带的 <code>RemoveRemap</code> 呢? 因为模型中很可能会存在非法的 Remap 信息, 使用 <code>RemoveRemap</code> 根本无法移除这部分信息</p>
<p>另外模型的 meta 文件结构固定且内容不多, 而且前面我们已经重新序列化了 meta 文件, 保证了 meta 文件格式的正确性, 因此直接逐行分析即可, 同时多线程进行优化</p>
<ul>
<li>添加空的 Remap 信息</li>
</ul>
<p>Remap 信息清空后, 只要添加空的 Remap 信息就可以实现既不生成额外资源, 又不会引用到外部资源的效果!</p>
<p>至此结束, 具体代码可查看本文最后! 最后实现的效果如下, 可以看到正确生成了导出信息并且没有引用额外的资源!</p>
<p><strong>「算是某种意义上的卡 Bug？什么叫 Bug？！这叫机制！」</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">first:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">UnityEngine:Material</span></span><br><span class="line">    <span class="attr">assembly:</span> <span class="string">UnityEngine.CoreModule</span></span><br><span class="line">    <span class="attr">name:</span> <span class="number">01</span> <span class="bullet">-</span> <span class="string">Default</span></span><br><span class="line">  <span class="attr">second:</span> &#123;<span class="attr">instanceID:</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="🍑总结"><a href="#🍑总结" class="headerlink" title="🍑总结"></a>🍑总结</h1><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
<th>是否推荐</th>
</tr>
</thead>
<tbody><tr>
<td><strong>None</strong></td>
<td>直接引用 Unity 默认材质球，无法移除</td>
<td>❌ 不推荐</td>
</tr>
<tr>
<td><strong>Standard (Legacy)</strong></td>
<td>按默认规则生成材质球，可移除</td>
<td>✅ 可选</td>
</tr>
<tr>
<td><strong>Import via MaterialDescription</strong></td>
<td>按材质描述生成材质球，可移除</td>
<td>❌ 不适用</td>
</tr>
<tr>
<td><strong>Use External Materials (Legacy)</strong></td>
<td>优先查找外部材质球，找不到则新建材质球资源</td>
<td>❌ 不推荐</td>
</tr>
<tr>
<td><strong>Use Embedded Materials</strong></td>
<td>生成材质球为 SubAsset，可配合导出和重映射功能</td>
<td>✅ 强烈推荐</td>
</tr>
<tr>
<td><strong>Extract Materials</strong></td>
<td>提取 Unity 生成的材质球资源</td>
<td></td>
</tr>
<tr>
<td><strong>Extract Textures</strong></td>
<td>提取 Unity 生成的纹理资源</td>
<td></td>
</tr>
<tr>
<td><strong>Remapped Materials</strong></td>
<td>通过导出信息替换默认材质</td>
<td></td>
</tr>
</tbody></table>
<h1 id="🌳附录一：查找规则的配置"><a href="#🌳附录一：查找规则的配置" class="headerlink" title="🌳附录一：查找规则的配置"></a>🌳附录一：查找规则的配置</h1><h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><p>用于控制搜索时的名称规则</p>
<ul>
<li><code>By Base Texture Name</code></li>
</ul>
<p>使用材质关联的主纹理名称作为线索进行查找</p>
<ul>
<li><code>Fome Model&#39;s Material</code></li>
</ul>
<p>直接使用模型文件中定义的材质名称作为线索进行查找</p>
<ul>
<li><code>Model Name + Model&#39;s Material</code></li>
</ul>
<p>组合模型文件名和模型文件中定义的材质名作为线索进行查找</p>
<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p>用于控制搜索的位置</p>
<ul>
<li><code>Local Materials Folder</code></li>
</ul>
<p>仅在模型文件同级目录的 Materials 文件夹中搜索</p>
<ul>
<li><code>Recursive Up</code></li>
</ul>
<p>从模型文件所在目录开始向上逐级递归搜索</p>
<ul>
<li><code>Project Wide</code></li>
</ul>
<p>在整个项目范围内搜索</p>
<h1 id="🍈附录二：为什么-Extract-Materials-按钮-Extract-Textures-按钮是置灰的"><a href="#🍈附录二：为什么-Extract-Materials-按钮-Extract-Textures-按钮是置灰的" class="headerlink" title="🍈附录二：为什么 Extract Materials 按钮, Extract Textures 按钮是置灰的 ?"></a>🍈附录二：为什么 Extract Materials 按钮, Extract Textures 按钮是置灰的 ?</h1><p>这两个按钮在两种情况下是置灰的</p>
<ol>
<li><p>模型内部没有材质球和贴图时</p>
</li>
<li><p>meta 文件中已经记录了全部资源的导出信息时</p>
</li>
</ol>
<p>第一种情况很好理解, 关键是第二种情况, 假设 Unity 检测到模型中有 3 张纹理, 2 个材质球</p>
<p><code>tex_1</code> <code>tex_2</code> <code>tex_3</code> <code>mat_1</code> <code>mat_2</code></p>
<p>而目前 meta 中已经记录了 2 张纹理和 2 个材质球的导出信息</p>
<p><code>tex_1</code> <code>tex_2</code> <code>mat_1</code> <code>mat_2</code></p>
<p>则导出贴图按钮就是可用的, 导出材质球按钮就是置灰的</p>
<h1 id="🥕附录三：设置模型导出信息的完整代码"><a href="#🥕附录三：设置模型导出信息的完整代码" class="headerlink" title="🥕附录三：设置模型导出信息的完整代码"></a>🥕附录三：设置模型导出信息的完整代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除模型的内嵌资源</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;modelGUIDs&quot;&gt;</span>需要处理的模型 GUID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">RemoveEmbeddedAssetsInModel</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] modelGUIDs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 前提准备, 反射内部逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sourceMaterialsProperty = <span class="keyword">typeof</span>(ModelImporter).GetProperty(<span class="string">&quot;sourceMaterials&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">    <span class="keyword">if</span> (sourceMaterialsProperty == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DebugUtil.LogError(<span class="string">&quot;未反射到属性 sourceMaterials! 请更新工具逻辑!&quot;</span>, DebugUtil.RED);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> modelList = TempDictionary&lt;<span class="built_in">string</span>, ModelImporter&gt;.Get();</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 获取全部模型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> modelGUID <span class="keyword">in</span> modelGUIDs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> assetPath = AssetDatabase.GUIDToAssetPath(modelGUID);</span><br><span class="line">        <span class="keyword">var</span> assetImporter = AssetImporter.GetAtPath(assetPath);</span><br><span class="line">        <span class="keyword">var</span> modelImporter = assetImporter <span class="keyword">as</span> ModelImporter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modelImporter == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modelList.Add(assetPath, modelImporter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 将模型设置为 Standard + Embedded</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> modelImporter <span class="keyword">in</span> modelList.Values)</span><br><span class="line">    &#123;</span><br><span class="line">        modelImporter.materialImportMode = ModelImporterMaterialImportMode.ImportStandard;</span><br><span class="line">        modelImporter.useSRGBMaterialColor = <span class="literal">true</span>;</span><br><span class="line">        modelImporter.materialLocation = ModelImporterMaterialLocation.InPrefab;</span><br><span class="line">        modelImporter.SaveAndReimport();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 删除 &quot;  externalObjects:&quot; 到 &quot;  materials:&quot; 的全部 Remap 信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另外因为模型中会存在非法的 Remap 信息, 使用 RemoveRemap 根本无法移除这部分信息</span></span><br><span class="line">    <span class="comment">// 加上模型的 meta 文件结构固定且内容不多, 因此直接逐行分析</span></span><br><span class="line">    <span class="keyword">var</span> tasks = TempleList&lt;Task&gt;.Get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> modelData <span class="keyword">in</span> modelList)</span><br><span class="line">    &#123;</span><br><span class="line">        tasks.Add(Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> metaPath = <span class="string">$&quot;<span class="subst">&#123;modelData.Key&#125;</span>.meta&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> needKeep = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">var</span> newMeta = TempleList&lt;<span class="built_in">string</span>&gt;.Get();</span><br><span class="line">            <span class="keyword">var</span> metaLines = File.ReadAllLines(metaPath);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> metaLines)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (needKeep)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (line == <span class="string">&quot;  externalObjects:&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        newMeta.Add(<span class="string">&quot;  externalObjects: []&quot;</span>);</span><br><span class="line">                        needKeep = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        newMeta.Add(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (line == <span class="string">&quot;  materials:&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        needKeep = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            File.WriteAllLines(metaPath, newMeta);</span><br><span class="line">            TempleList&lt;<span class="built_in">string</span>&gt;.Back(newMeta);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Task.WhenAll(tasks);</span><br><span class="line"></span><br><span class="line">    TempleList&lt;Task&gt;.Back(tasks);</span><br><span class="line"></span><br><span class="line">    AssetDatabase.Refresh();</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 添加空的 Remap 信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> modelData <span class="keyword">in</span> modelList)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> assetIdentifiers = sourceMaterialsProperty.GetValue(modelData.Value) <span class="keyword">as</span> AssetImporter.SourceAssetIdentifier[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (assetIdentifiers.IsNullOrEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            DebugUtil.LogError(<span class="string">$&quot;错误! 模型 <span class="subst">&#123;modelData.Key&#125;</span> 没有可以执行重映射逻辑的材质球!&quot;</span>, DebugUtil.RED, modelData.Value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assetIdentifiers.TheAll(identifier =&gt; modelData.Value.AddRemap(identifier, <span class="literal">null</span>));</span><br><span class="line">        modelData.Value.SaveAndReimport();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    TempDictionary&lt;<span class="built_in">string</span>, ModelImporter&gt;.Back(modelList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity JsonUtility 序列化链表和字典</title>
    <url>/unity/unity_jsonutility.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么要用 JsonUtility 呢?</p>
<ol>
<li><p>第三方的 Json 库很多是不适配最新版 Unity 的, 另外就是对于强迫症而言, 难道你不想用 Unity 官方的吗, 难道不想自动更新吗? 一直需要手动更新也是很麻烦的.</p>
</li>
<li><p>一般来说第三方的 Json 库都是不支持序列化 <code>MonoBehaviour</code> 类和 <code>ScriptableObject</code> 类的.</p>
</li>
<li><p>据 Unity 手册上描述, JsonUtility 比目前流行的 .NET JSON 解决方案要快得多, 缺点就是 JsonUtility 提供的功能很少. 下面是 Unity 手册的原文:</p>
</li>
</ol>
<blockquote>
<p>垃圾收集 (GC) 内存使用量为最低量:</p>
<ul>
<li><code>ToJson</code> 仅为返回的字符串分配 GC 内存.</li>
<li><code>FromJson</code> 仅为返回的对象以及所需的所有子对象分配 GC 内存 (例如: 如果对包含数组的对象进行反序列&gt;化,则 Unity 将为该数组分配 GC 内存)</li>
<li><code>FromJsonOverwrite</code> 仅根据需要为写入的字段 (例如字符串和数组）分配 GC 内存. 这意味着, 如果 JSON &gt;覆盖的所有字段都是值类型, 则 Unity 不会分配任何 GC 内存.</li>
<li>可以使用后台线程中的 JsonUtility API. 但是, 与任何多线程代码一样, 在一个线程上序列化或反序列化对&gt;象时, 请勿在另一个线程上访问或更改该对象.</li>
</ul>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuLzIwMjAuMi9NYW51YWwvSlNPTlNlcmlhbGl6YXRpb24uaHRtbA==">Unity 手册: Json 序列化<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="JsonUtility-使用条件"><a href="#JsonUtility-使用条件" class="headerlink" title="JsonUtility 使用条件"></a>JsonUtility 使用条件</h1><ol>
<li><p>JsonUtility 支持任何 <code>MonoBehaviour</code> 子类, <code>ScriptableObject</code> 子类或者带有 [Serializable] 属性的普通类或结构. 但是, 将 JSON 反序列化为 <code>MonoBehaviour</code> 或 <code>ScriptableObject</code> 子类时,必须使用 <code>FromJsonOverwrite</code> 方法, 如果尝试使用 FromJson 则 Unity 会抛出异常.</p>
</li>
<li><p>将对象传入到标准 Unity 序列化程序进行处理时, 需要遵循与在 Inspector 中相同的规则和限制, 比如: Unity 只序列化字段, 不序列化属性;</p>
</li>
<li><p>另外此 API 不支持类似 <code>Dictionary&lt;&gt;</code> 的类型; 也不支持将其他类型直接传递到 API, 例如原始类型或数组. 如果需要转换上述类型, 则需要将它们包裹在某种 class 或 struct 中.</p>
</li>
</ol>
<h1 id="API-链接"><a href="#API-链接" class="headerlink" title="API 链接"></a>API 链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuLzIwMjAuMi9TY3JpcHRSZWZlcmVuY2UvSnNvblV0aWxpdHkuaHRtbA==">https://docs.unity3d.com/cn/2020.2/ScriptReference/JsonUtility.html<i class="fa fa-external-link-alt"></i></span></p>
<p>另外还有一个编辑器模式下专用的 API: EditorJsonUtility</p>
<p>它的链接是: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL2NuLzIwMjAuMi9TY3JpcHRSZWZlcmVuY2UvRWRpdG9ySnNvblV0aWxpdHkuaHRtbA==">https://docs.unity3d.com/cn/2020.2/ScriptReference/EditorJsonUtility.html<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="如何使用-JsonUtility-序列化数组-和链表-List"><a href="#如何使用-JsonUtility-序列化数组-和链表-List" class="headerlink" title="如何使用 JsonUtility 序列化数组 [] 和链表 List&lt;&gt;"></a>如何使用 JsonUtility 序列化数组 [] 和链表 List&lt;&gt;</h1><p>由于 JsonUtility 不支持直接序列化数组和链表, 因此需要首先将其包装在一个 class 或者 struct 中, 之后对 class 或者 struct 进行序列化.</p>
<p>以 List&lt;&gt; 和 class 为例. 使用特性 [Serializable] 修饰 class, 使 class 成为可序列化类型, 最后使用 [SerializeField] 修饰 List&lt;&gt;, 这样链表就可以被序列化成 Json 文本了.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; skills;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的字符串链表中的元素类型是 string, 是可以序列化的, 另一个成员 int 类型, 也可以序列化, 只要将类修饰为 [Serializable], 字段修饰为 [SerializeField] 便可以使用 JsonUtility 进行序列化了.</p>
<p>注: 严格来说, 如果基础类型使用的是 public 修饰, 那么就不必使用 [SerializeField] 进行修饰, 如上面的 id 成员, 但是链表不是基础类型, 即使使用 public 修饰, 也必须使用 [SerializeField] 进行修饰.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Enemy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; skills;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果 id 是 private 类型的, 那么还是需要使用 [SerializeField] 进行修饰. 基础类型的序列化规则和 Inspector 面板的序列化规则是相同的.</p>
<h1 id="如何使用-JsonUtility-序列化字典-Dictionary"><a href="#如何使用-JsonUtility-序列化字典-Dictionary" class="headerlink" title="如何使用 JsonUtility 序列化字典 Dictionary&lt;&gt;"></a>如何使用 JsonUtility 序列化字典 Dictionary&lt;&gt;</h1><p>字典即使使用上述方式也是无法进行序列化的, 这里需要使用到 Unity 提供的 <code>ISerializationCallbackReceiver</code> 接口.</p>
<p>这个接口要求实现两个方法: <code>OnBeforeSerialize()</code> 和 <code>OnAfterDeserialize()</code>.</p>
<h2 id="public-void-OnBeforeSerialize"><a href="#public-void-OnBeforeSerialize" class="headerlink" title="public void OnBeforeSerialize()"></a>public void OnBeforeSerialize()</h2><p>这个方法会在 <code>序列化之前</code> 调用.</p>
<h2 id="public-void-OnAfterDeserialize"><a href="#public-void-OnAfterDeserialize" class="headerlink" title="public void OnAfterDeserialize()"></a>public void OnAfterDeserialize()</h2><p>这个方法会在 <code>反序列化之后</code> 调用.</p>
<p>我们的思路是: 将字典放到一个新的 class 中, 由于字典不能序列化, 但是链表可以通过使用 [SerializeField] 修饰来进行序列化, 因此可以使用两个 List&lt;&gt; 分别保存所有的键和所有的值, 并使用 [SerializeField] 进行修饰, 这样只要在序列化之前将字典中的值放到链表中即可, 最后序列化出来的结果就是两个链表.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> List&lt;TKey&gt; keys;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField</span>]</span><br><span class="line"><span class="keyword">private</span> List&lt;TValue&gt; values;</span><br><span class="line"></span><br><span class="line">Dictionary&lt;TKey, TValue&gt; target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Serialization</span>(<span class="params">Dictionary&lt;TKey, TValue&gt; target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeforeSerialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    keys = <span class="keyword">new</span> List&lt;TKey&gt;(target.Keys);</span><br><span class="line">    values = <span class="keyword">new</span> List&lt;TValue&gt;(target.Values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于序列化后是两个链表, 那么反序列化出来的数据也是两个链表, 此时就需要将这两个链表转换为字典.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnAfterDeserialize</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (keys.Count == values.Count)</span><br><span class="line">    &#123;</span><br><span class="line">        target = <span class="keyword">new</span> Dictionary&lt;TKey, TValue&gt;(count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; count; ++index)</span><br><span class="line">        &#123;</span><br><span class="line">            target.Add(keys[index], values[index]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后再补一个将反序列化的字典返回的方法.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Dictionary&lt;TKey, TValue&gt; <span class="title">ToDictionary</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> Serialization&lt;<span class="built_in">int</span>, Enemy&gt;(enemies);</span><br><span class="line"><span class="built_in">string</span> json = JsonUtility.ToJson(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>, Enemy&gt; enemies = JsonUtility.FromJson&lt;Serialization&lt;<span class="built_in">int</span>, Enemy&gt;&gt;(json).ToDictionary();</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://kou-yeung.hatenablog.com/entry/2015/12/31/014611">【Unity】JsonUtility で List<T> と Dictionary&lt;TKey,TValue&gt; シリアライズする</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 中的动态资源加载</title>
    <url>/unity/unity_load_assets.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>游戏中资源的状态可以分为三种:</p>
<ul>
<li>状态1: 仅在磁盘中.</li>
<li>状态2: 被读取到内存中, 但是游戏此时并没有引用此资源.</li>
<li>状态3: 被读取到内存中, 并且游戏此时正在引用此资源.</li>
</ul>
<p>Unity 有两种模式: 编辑器模式和运行模式. 两种模式下都可以实现动态资源加载.</p>
<h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><p>编辑模式下可以使用 <strong>AssetDatabase</strong> 类来实现资源的动态加载.</p>
<p><code>AssetDatabase.LoadAssetAtPath(filePath);</code></p>
<p>由于 Unity 资源的根目录为 Assets, 因此 filePath 参数必须以 <strong>Assets&#x2F;</strong> 开头, 另外需要加后缀名. 通过这个方法就可以加载指定 Assets 路径下的资源, 资源加载后便处于状态 2 了, 如果紧接着使用了此资源, 资源状态就变成了状态 3.</p>
<p>如果从资源目录中读取了一个 Prefab 资源, 运行模式下可以使用 <code>GameObject.Instantiate()</code> 来实例化 Prefab, 但是编辑模式下怎么实例化 Prefab 呢? 可以使用 <code>PrefabUtility.InstantiatePrefab()</code> 方法在编辑器模式下实例化 Prefab.</p>
<p>另外在编辑模式下使用以下方法来更新或者创建新的 Prefab, 需要传入游戏物体, 保存路径等信息.</p>
<ul>
<li>PrefabUtility.SavePrefabAsset()</li>
<li>PrefabUtility.SaveAsPrefabAsset()</li>
<li>PrefabUtility.SaveAsPrefabAssetAndConnect()</li>
</ul>
<p>如果想要销毁一个游戏对象, 运行模式下可以使用 <code>Destroy();</code> 方法, 但是编辑器模式下怎么销毁一个游戏对象呢? 编辑模式下只能使用 <code>Object.DestroyImmediate(Selection.activeObject, true);</code> 来销毁<strong>游戏对象</strong>, 第二个参数决定是否卸载<strong>游戏物体引用的资源</strong>.</p>
<ul>
<li>执行 <code>Object.DestroyImmediate(go, false);</code> 之后资源就变成状态 2 了.</li>
<li>执行 <code>Object.DestroyImmediate(go, false);</code> 之后资源就变成状态 1 了.</li>
</ul>
<h1 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h1><p>运行模式下实现资源的动态加载有两种方式: Resources 和 AssetsBundle.</p>
<h2 id="Resources-实现运行时资源的动态加载"><a href="#Resources-实现运行时资源的动态加载" class="headerlink" title="Resources 实现运行时资源的动态加载"></a>Resources 实现运行时资源的动态加载</h2><p> Unity 在发布打包的时候会自动排除掉没有引用的资源, 只有 <strong>Resources</strong> 和 <strong>StreamingAssets</strong> 文件夹中的资源无论是否被引用都会被打包.</p>
<p>另外场景中如果直接引用了 Resources 中的资源, 打包的时候 Resources 文件夹中的资源会被场景和 Resources 重复打包成两份.</p>
<p>基于上述两个原因约定:</p>
<ul>
<li><font color='red'>Resources 文件夹只能存放运行时动态加载的资源</font></li>
<li><font color='red'>Scene 不能直接引用 Resources 中的资源</font></li>
</ul>
<p><code>Resources.Load(fileName)</code> 可以实现在运行模式下动态加载 Resources 文件夹下的资源. 其中 fileName 参数必须是 Resources 文件夹的相对路径, 且不能带有后缀名.</p>
<p>运行模式下删除对象的方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 立即删除游戏对象</span></span><br><span class="line">DestroyImmediate(go);</span><br><span class="line"><span class="comment">// 在下一帧的时候删除游戏对象</span></span><br><span class="line">Destroy(go);</span><br><span class="line"><span class="comment">// 特定秒数后删除游戏对象</span></span><br><span class="line">Destroy(go, <span class="number">5f</span>);</span><br></pre></td></tr></table></figure>

<p>运行模式下 Resources 卸载资源的方式:</p>
<ul>
<li>使用 <code>Resources.UnloadAsset(go);</code> 卸载内存中指定游戏物体所引用的资源.</li>
<li>使用 <code>Resources.UnloadUnusedAssets();</code> 卸载内存中所有未被引用的资源. 另外这是一个异步进程, 可以在 Update 中使用 <code>isDone</code> 来判断是否执行完毕.</li>
</ul>
<p>下面是推荐的 Resources 卸载资源的工具代码:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Unity 资源回收工具</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnityGCUtility</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> AsyncOperation asyncOperation;</span><br><span class="line">    <span class="keyword">private</span> UnityAction callBack;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 彻底卸载 Resources 中所有未被引用的资源</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnloadUnusedAssets</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UnloadUnusedAssetsUnit(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            UnloadUnusedAssetsUnit();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 单次卸载资源模块</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;callBackAction&quot;&gt;</span>回调<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UnloadUnusedAssetsUnit</span>(<span class="params">UnityAction callBackAction = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        callBack = callBackAction;</span><br><span class="line">        GC.Collect();</span><br><span class="line">        asyncOperation = Resources.UnloadUnusedAssets();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncOperation == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!asyncOperation.isDone) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        asyncOperation = <span class="literal">null</span>;</span><br><span class="line">        callBack?.Invoke();</span><br><span class="line">        DestroyImmediate(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AssetBundle-实现运行时资源的动态加载"><a href="#AssetBundle-实现运行时资源的动态加载" class="headerlink" title="AssetBundle 实现运行时资源的动态加载"></a>AssetBundle 实现运行时资源的动态加载</h2><p>要想使用 AssetBundle 的方式实现动态资源加载, 首先需要将资源打包成一个 AssetBundle 包, 打包之前要对待打包资源进行依赖设置, 设置依赖的方式有两种:</p>
<ul>
<li><p>在 Inspector 面板的最下方设置, 不推荐使用.</p>
<ul>
<li><p>选中所有需要打入 AssetBundle 包的资源, 在这些资源的 Inspector 面板中设置 AssetBundle 的名称和后缀名.</p>
</li>
<li><p>对于会被重复依赖的贴图材质等资源需要进行单独的 AssetBundle 名称以及后缀名设置, 不设置的话这些被依赖的资源会被重复打包, 浪费资源.</p>
</li>
</ul>
</li>
<li><p>直接在一个脚本中设置好需要打包的资源以及他们的依赖关系.</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builds = <span class="keyword">new</span> List&lt;AssetBundleBuild&gt; &#123;</span><br><span class="line">    <span class="keyword">new</span> AssetBundleBuild() &#123;</span><br><span class="line">        assetBundleName = <span class="string">&quot;prefab&quot;</span>,</span><br><span class="line">        assetNames = <span class="keyword">new</span>[] &#123;</span><br><span class="line">            <span class="string">&quot;Assets/Resources/Materials/1.prefab&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Assets/Resources/Materials/2.prefab&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Assets/Resources/Materials/3.prefab&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">new</span> AssetBundleBuild() &#123;</span><br><span class="line">        assetBundleName = <span class="string">&quot;material&quot;</span>,</span><br><span class="line">        assetNames = <span class="keyword">new</span>[] &#123;</span><br><span class="line">            <span class="string">&quot;Assets/Resources/Materials/ground.mat&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>之后在编辑器模式的脚本中调用构建管线来创建 AssetBundle, 需要的参数有: 输出路径, 压缩选项, 目标平台. </p>
<p><code>BuildPipeline.BuildAssetBundles(outPath, BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.StandaloneWindows);</code></p>
<p>下面是推荐的输出路径 outPath 构建代码.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_ANDROID</span></span><br><span class="line">    <span class="keyword">var</span> outPath = Application.dataPath + <span class="string">&quot;!assets&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">var</span> outPath = Application.streamingAssetsPath;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (Directory.Exists(outPath)) &#123;</span><br><span class="line">        Directory.Delete(outPath, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Directory.CreateDirectory(outPath);</span><br></pre></td></tr></table></figure>

<p>[<strong>注</strong>] 推荐的代码中使用的路径是 Assets 根目录下的 <strong>StreamingAssets</strong> 文件夹, 因为这个文件夹中的所有资源都会直接打包并发布, 不会进行任何的压缩以及改变, 适合游戏中长期使用且不随版本变化的资源.</p>
<p>AssetBundle 资源包已经打好了, 那 Unity 怎么读取这种资源包呢?</p>
<p>因为 AssetBundle 包体之间是具有依赖关系的, 因此在读取可能具有依赖关系的资源之前, 应该先将这个包体所依赖的所有包体全部读取出来, 然后再对需要使用的资源进行处理.</p>
<p>假设需要加载一个名称为 abPre 的包体, 那么首先应该读取这个包体的依赖关系, 所有的依赖关系均在 <strong>StreamingAssets</strong> 这个 AssetBundle 中, 依赖关系的文件名为: <strong>AssetBundleManifest</strong>.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> assetBundlePath = Application.streamingAssetsPath;</span><br><span class="line"><span class="keyword">var</span> assetBundle = AssetBundle.LoadFromFile(Path.Combine(assetBundlePath, <span class="string">&quot;StreamingAssets&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> manifest = assetBundle.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">&quot;AssetBundleManifest&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> dependence <span class="keyword">in</span> manifest.GetAllDependencies(<span class="string">&quot;abPre&quot;</span>)) &#123;</span><br><span class="line">    AssetBundle.LoadFromFile(Path.Combine(assetBundlePath, dependence));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>abPre 包体所依赖的包已经全部使用 AssetBundle.LoadFromFile() 加载完毕了, 接下来就可以加载 adPre 包体了, 加载完之后便可以读取 abPre 包体中的资源了. 假设需要读取 adPre 包体中的一个名为 myCube 的预制体, 则:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> assetBundle = AssetBundle.LoadFromFile(Path.Combine(assetBundlePath, <span class="string">&quot;abPre&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> go = assetBundle.LoadAsset&lt;GameObject&gt;(<span class="string">&quot;myCube&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>之后可以使用 <code>Instantiate(go);</code> 来实例化资源.</p>
<p>使用完之后需要卸载资源, 卸载 AssetBundle 中的资源需要使用 <code>AssetBundle.UnloadAllAssetBundles(false);</code> 方法. 其中的参数 unloadAllObjects:</p>
<ul>
<li>false: 只卸载 AssetBundle 对象, 不卸载资源对象.</li>
<li>true: 同时卸载 AssetBundle 对象和资源对象.</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让 Unity 走代理?</title>
    <url>/unity/unity_proxy.html</url>
    <content><![CDATA[<span id="more"></span>

<p>最近在学习制作 Unity 游戏, 到了最后需要发布 Android 版本游戏程序的时候, 发现根本导不出来!!!</p>
<p>每次都会卡在 Gradle 的构建上... 看了日志之后知道了原来是从仓库下载包的时候下载失败了...那我就更郁闷了, 我 24 小时全天开着梯子, 你跟我说现在还有我下载不下来的东西? 后来在这篇文章中找到了答案! <span class="exturl" data-url="aHR0cHM6Ly93d3cueW9tdW5jaGFuLm1vZS9hcmNoaXZlcy8zMjAjc2VhcmNo">解决Unity的网络水土不服问题<i class="fa fa-external-link-alt"></i></span></p>
<p>原来 Unity 压根不吃梯子啊~ ~ !</p>
<h1 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h1><p><strong><code>使用阿里的镜像源替代 Google 源</code></strong></p>
<ol>
<li><p>找到 Unity 的安装目录.</p>
</li>
<li><p>使用 VSCode 打开路径: <code>Editor\Data\PlaybackEngines\AndroidPlayer\Tools\GradleTemplates</code>.</p>
</li>
<li><p>对路径中的文件逐一修改, 将其中所有的</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">google()</span><br><span class="line">jcenter()</span><br></pre></td></tr></table></figure>

<p>修改为:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">    url <span class="string">&quot;https://maven.aliyun.com/repository/google&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">maven &#123;</span><br><span class="line">    url <span class="string">&quot;https://maven.aliyun.com/repository/jcenter&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><font color='red'><strong>重启 Unity 项目</strong></font>, 重新发布即可!</li>
</ol>
<p>[<strong>注</strong>]</p>
<ol>
<li><p>文件中要替换的 <code>google() jcenter()</code> 不止一处, 必须全部替换!</p>
</li>
<li><p>Unity 每次打开项目的时候, 都会从模板中复制文件, 在项目中建立缓存, 其中就包含我们刚刚修改的文件. 如果不重启项目, 那么项目中的缓存文件依旧使用的是修改前的文件, 此时发布依旧会失败, 所以必须重启 Unity 项目, 让 Unity 使用我们修改后的模板重新建立缓存!</p>
</li>
</ol>
<h1 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h1><p><strong><code>为 Unity Hub 和 Unity 设置代理</code></strong></p>
<p>Unity Hub 和 Unity 在连接网络时并不会读取浏览器配置, 因此梯子时无效的! 但是 Unity Hub 和 Unity 会读取环境变量中 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 的值判断是否使用代理.</p>
<p>因此只要配置好这两个环境变量就好了.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">HTTP_PROXY = http:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">HTTPS_PROXY = http:<span class="comment">//127.0.0.1:1080</span></span><br></pre></td></tr></table></figure>

<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>我最终采用的是第一种方法, 虽然设置麻烦了一点, 但是没有副作用.</p>
<p>第二种也用过, 也是可以实现的, 但是有副作用, 会导致其他的软件可能无法正常联网, 比如我的饥荒. (未完全证实) 不过我也确实不喜欢改动环境变量! 😂</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueW9tdW5jaGFuLm1vZS9hcmNoaXZlcy8zMjAjc2VhcmNo">解决Unity的网络水土不服问题<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW5nZV9mcm9tX25vdy9hcnRpY2xlL2RldGFpbHMvMTAwNTE5NTQ2">Unity使用Gradle打包出错问题<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 项目注意点总结 (持续更新)</title>
    <url>/unity/unity_note.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="编程中关于继承和接口的选择"><a href="#编程中关于继承和接口的选择" class="headerlink" title="编程中关于继承和接口的选择"></a>编程中关于继承和接口的选择</h1><ol>
<li>当单纯需要代码复用时可使用继承, 但不允许使用 override</li>
<li>当明确存在默认行为时可使用继承以及 override</li>
<li>多态一律使用接口实现: interface</li>
</ol>
<h1 id="Unity-项目的中前期使用-Mono-打包-后期使用-IL2CPP-打包"><a href="#Unity-项目的中前期使用-Mono-打包-后期使用-IL2CPP-打包" class="headerlink" title="Unity 项目的中前期使用 Mono 打包, 后期使用 IL2CPP 打包"></a>Unity 项目的中前期使用 Mono 打包, 后期使用 IL2CPP 打包</h1><p>IL2CPP 打包需要安装的环境</p>
<p><img data-src="/images/unity/il2cpp.png" alt="IL2CPP打包环境"></p>
<ol>
<li>Visual Studio 核心编辑器</li>
<li>C++ 桌面开发环境</li>
<li>MSVC C++ 编译器</li>
<li>Windows 10 SDK &#x2F; Windows 11 SDK</li>
</ol>
<h1 id="Unity-中使用-foreach-遍历不会有-GC"><a href="#Unity-中使用-foreach-遍历不会有-GC" class="headerlink" title="Unity 中使用 foreach 遍历不会有 GC"></a>Unity 中使用 foreach 遍历不会有 GC</h1><h1 id="将函数作为参数时必须使用匿名方式且必须不发生闭包"><a href="#将函数作为参数时必须使用匿名方式且必须不发生闭包" class="headerlink" title="将函数作为参数时必须使用匿名方式且必须不发生闭包"></a>将函数作为参数时必须使用匿名方式且必须不发生闭包</h1><h2 id="直接传递函数的情况必然会有-GC-无论传递的函数是否为静态函数"><a href="#直接传递函数的情况必然会有-GC-无论传递的函数是否为静态函数" class="headerlink" title="直接传递函数的情况必然会有 GC, 无论传递的函数是否为静态函数"></a>直接传递函数的情况必然会有 GC, 无论传递的函数是否为静态函数</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传递普通方法 Sum, 会有 GC</span></span><br><span class="line">Launch(Sum);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Sum</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递静态方法 Sum, 同样有 GC</span></span><br><span class="line">Launch(Sum);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sum</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用匿名方式传递函数-则根据是否闭包决定有无-GC"><a href="#使用匿名方式传递函数-则根据是否闭包决定有无-GC" class="headerlink" title="使用匿名方式传递函数, 则根据是否闭包决定有无 GC"></a>使用匿名方式传递函数, 则根据是否闭包决定有无 GC</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sum 是闭包, 会有 GC</span></span><br><span class="line">Launch(() =&gt; Sum());</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Sum</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    sum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sum 不是闭包, 无 GC</span></span><br><span class="line">Launch(() =&gt; Sum());</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sum</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    sum++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Unity-的-Git-仓库必须添加-RenameLimit-限制"><a href="#Unity-的-Git-仓库必须添加-RenameLimit-限制" class="headerlink" title="Unity 的 Git 仓库必须添加 RenameLimit 限制"></a>Unity 的 Git 仓库必须添加 RenameLimit 限制</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = Kuroha</span><br><span class="line">    email = KurohaKirito@gmail.com</span><br><span class="line">[diff]</span><br><span class="line">    renameLimit=1</span><br><span class="line">    renames=false</span><br><span class="line">[merge]</span><br><span class="line">    renameLimit=1</span><br><span class="line">    renames=false</span><br><span class="line">    directoryRenames=conflict</span><br><span class="line">[status]</span><br><span class="line">    renameLimit=1</span><br><span class="line">    renames=false</span><br><span class="line">[http]</span><br><span class="line">    proxy = http://127.0.0.1:20122</span><br><span class="line">[https]</span><br><span class="line">    proxy = https://127.0.0.1:20122</span><br></pre></td></tr></table></figure>

<h1 id="Unity-的-Git-仓库必须添加-gitattribute-配置"><a href="#Unity-的-Git-仓库必须添加-gitattribute-配置" class="headerlink" title="Unity 的 Git 仓库必须添加 .gitattribute 配置"></a>Unity 的 Git 仓库必须添加 .gitattribute 配置</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGF0dHJpYnV0ZXMvZ2l0YXR0cmlidXRlcw==">https://github.com/gitattributes/gitattributes<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="Unity-项目所在电脑必须设置开启-Unicode-UTF-8-提供全球语言支持-或者不要使用任何非-ASCII-字符"><a href="#Unity-项目所在电脑必须设置开启-Unicode-UTF-8-提供全球语言支持-或者不要使用任何非-ASCII-字符" class="headerlink" title="Unity 项目所在电脑必须设置开启 &quot;Unicode UTF-8 提供全球语言支持&quot; 或者不要使用任何非 ASCII 字符"></a>Unity 项目所在电脑必须设置开启 &quot;Unicode UTF-8 提供全球语言支持&quot; 或者不要使用任何非 ASCII 字符</h1><p><img data-src="/images/unity/unity_unicode_utf8.png" alt="Unicode UTF8 提供全球语言支持"></p>
<h1 id="编程时-struct-内的字段必须是纯值类型-如果含有引用类型-请使用-class"><a href="#编程时-struct-内的字段必须是纯值类型-如果含有引用类型-请使用-class" class="headerlink" title="编程时 struct 内的字段必须是纯值类型, 如果含有引用类型, 请使用 class"></a>编程时 struct 内的字段必须是纯值类型, 如果含有引用类型, 请使用 class</h1><ol>
<li>struct 中的字段禁止使用引用类型</li>
<li>当一个数据体内部的全部字段是一个不可变化的整体时, 才能使用 struct, 并且每一个 struct 都是一个独立的数据副本</li>
</ol>
<h1 id="性能优化时-顶点数小于-300-的网格禁止参与静态批处理"><a href="#性能优化时-顶点数小于-300-的网格禁止参与静态批处理" class="headerlink" title="性能优化时, 顶点数小于 300 的网格禁止参与静态批处理"></a>性能优化时, 顶点数小于 300 的网格禁止参与静态批处理</h1><p>当小于 300 定点数的网格参与静态批处理时, 即使它仅仅作为一个 submesh 存在, 但会导致整个静态网格的 KeepVertices 被开启, 导致顶点信息被保留在内存中, 从而使整个网格的内存占用翻倍</p>
<h1 id="编程中关于-Null-值的处理"><a href="#编程中关于-Null-值的处理" class="headerlink" title="编程中关于 Null 值的处理"></a>编程中关于 Null 值的处理</h1><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>最终优化为: 项目中不存在任何的 <strong>return null</strong> 语句</p>
<p>优化措施:</p>
<ol>
<li>对于值类型的返回值, 将合法的 <strong>return null</strong> 全部改为有效空白值, 比如 string.Empty, 0, -1 等</li>
<li>对于引用类型的返回值, 将合法的 <strong>return null</strong> 全部改为 out 类型参数返回, 本来的返回值改为 bool</li>
<li>任意类型的非法的 <strong>return null</strong> 全部删除, 改为输出错误日志并抛出异常</li>
</ol>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ol>
<li>使用 debug 断言进行判断, 断言的好处是 release 版本中断言是不执行的. 因此只要在 debug 版本中进行全覆盖测试, 就可以直接在 debug 版本中就杜绝参数为 null 的情况</li>
</ol>
<h2 id="最终结论"><a href="#最终结论" class="headerlink" title="最终结论"></a>最终结论</h2><p>编程时任何方法只能返回 <code>Task</code> <code>void</code> <code>bool</code> <code>string</code> 这几种类型, 其中 <code>string</code> 是错误信息, <code>bool</code> 是成功标志</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 在脚本中修改 UGUI 中 UI 的位置和尺寸</title>
    <url>/unity/unity_rect_transform.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🌴-前言"><a href="#🌴-前言" class="headerlink" title="🌴 前言"></a>🌴 前言</h1><p>在制作魔剑镇魂曲的对话框系统时, 在对话框的后面要显示当前人物的立绘图片, 这里的立绘图片我用的是 UGUI 里面的 Image 组件, 使用的位置组件就不再是 Transform, 而是继承自它的 RectTransform 组件, 但怎么用呢?</p>
<h1 id="🌾-RectTransform"><a href="#🌾-RectTransform" class="headerlink" title="🌾 RectTransform"></a>🌾 RectTransform</h1><p>强烈推荐一篇博客: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kYmVmYTc0NmU1MGQ=">Unity进阶技巧 - RectTransform详解<i class="fa fa-external-link-alt"></i></span> 看完这篇博客, RectTransform 组件就基本明白了, 这里不再赘述.</p>
<h1 id="🦄-脚本控制-RectTransform"><a href="#🦄-脚本控制-RectTransform" class="headerlink" title="🦄 脚本控制 RectTransform"></a>🦄 脚本控制 RectTransform</h1><p>在 Inspector 面板中我们关注的数值:</p>
<table>
<thead>
<tr>
<th align="left">数值名</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Top</td>
<td align="left">顶部距离</td>
</tr>
<tr>
<td align="left">Bottom</td>
<td align="left">底部距离</td>
</tr>
<tr>
<td align="left">Left</td>
<td align="left">左侧距离</td>
</tr>
<tr>
<td align="left">Right</td>
<td align="left">右侧距离</td>
</tr>
<tr>
<td align="left">PosX</td>
<td align="left">位置坐标 X</td>
</tr>
<tr>
<td align="left">PosY</td>
<td align="left">位置坐标 Y</td>
</tr>
<tr>
<td align="left">Width</td>
<td align="left">宽度</td>
</tr>
<tr>
<td align="left">Height</td>
<td align="left">高度</td>
</tr>
</tbody></table>
<p>在脚本中, RectTransform 下可以获取的属性值, 同时我也列出了这些值和 Inspector 面板中数值的关系.</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">类型</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">anchoredPosition</td>
<td align="left">Vector2 : (anchoredPosition.x, anchoredPosition.y)</td>
<td align="left">(PosX, PosY)</td>
</tr>
<tr>
<td align="left">anchorMin</td>
<td align="left">Vector2 : (anchorMin.x, anchorMin.y)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">anchorMax</td>
<td align="left">Vector2 : (anchorMax.x, anchorMax.y)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">offsetMin</td>
<td align="left">Vector2 : (offsetMin.x, offsetMin.y)</td>
<td align="left">(Left, Bottom)</td>
</tr>
<tr>
<td align="left">offsetMax</td>
<td align="left">Vector2 : (offsetMax.x, offsetMax.y)</td>
<td align="left">(-Right, -Top)</td>
</tr>
<tr>
<td align="left">sizeDelta</td>
<td align="left">Vector2 : (sizeDelta.x, sizeDelta.y)</td>
<td align="left">(Width, Height)</td>
</tr>
<tr>
<td align="left">pivot</td>
<td align="left">Vector2 : (pivot.x, pivot.y)</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>在脚本中如何修改数值. 下面的代码中, 如果需要某个值不变, 直接赋予原值即可.</p>
<h2 id="Right-和-Top"><a href="#Right-和-Top" class="headerlink" title="Right 和 Top"></a>Right 和 Top</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> customTopValue = <span class="number">1.0f</span>;</span><br><span class="line"><span class="built_in">float</span> customRightValue = <span class="number">1.0f</span>;</span><br><span class="line">GetComponent&lt;RectTransform&gt;().offsetMax = <span class="keyword">new</span> Vector2(-customRightValue, -customTopValue);</span><br></pre></td></tr></table></figure>

<h2 id="Left-和-Bottom"><a href="#Left-和-Bottom" class="headerlink" title="Left 和 Bottom"></a>Left 和 Bottom</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> customBottomValue = <span class="number">2.0f</span>;</span><br><span class="line"><span class="built_in">float</span> customLeftValue = <span class="number">2.0f</span>;</span><br><span class="line">GetComponent&lt;RectTransform&gt;().offsetMin = <span class="keyword">new</span> Vector2(customLeftValue, customBottomValue);</span><br></pre></td></tr></table></figure>

<h2 id="PosX-和-PosY"><a href="#PosX-和-PosY" class="headerlink" title="PosX 和 PosY"></a>PosX 和 PosY</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> customPosXValue = <span class="number">3.0f</span>;</span><br><span class="line"><span class="built_in">float</span> customPosYValue = <span class="number">3.0f</span>;</span><br><span class="line">GetComponent&lt;RectTransform&gt;().anchoredPosition = <span class="keyword">new</span> Vector2(customPosXValue, customPosYValue);</span><br></pre></td></tr></table></figure>

<h2 id="Width-和-Height"><a href="#Width-和-Height" class="headerlink" title="Width 和 Height"></a>Width 和 Height</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> customWidthValue = <span class="number">4.0f</span>;</span><br><span class="line"><span class="built_in">float</span> customHeightValue = <span class="number">4.0f</span>;</span><br><span class="line">GetComponent&lt;RectTransform&gt;().sizeDelta = <span class="keyword">new</span> Vector2(customWidthValue, customHeightValue);</span><br></pre></td></tr></table></figure>

<h1 id="🐬-属性之间的关系"><a href="#🐬-属性之间的关系" class="headerlink" title="🐬 属性之间的关系"></a>🐬 属性之间的关系</h1><h2 id="anchoredPosition-和-pivot-offsetMin-offsetMax"><a href="#anchoredPosition-和-pivot-offsetMin-offsetMax" class="headerlink" title="anchoredPosition 和 pivot, offsetMin, offsetMax"></a>anchoredPosition 和 pivot, offsetMin, offsetMax</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">anchoredPosition = ((Vector2.one - pivot) * offsetMin) + (pivot * offsetMax);</span><br></pre></td></tr></table></figure>

<h2 id="sizeDelta-和-offsetMin-offsetMax"><a href="#sizeDelta-和-offsetMin-offsetMax" class="headerlink" title="sizeDelta 和 offsetMin, offsetMax"></a>sizeDelta 和 offsetMin, offsetMax</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">sizeDelta = offsetMax - offsetMin;</span><br></pre></td></tr></table></figure>

<h1 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h1><p><img data-src="/images/unity/rectTransform.png" alt="RectTransform"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kYmVmYTc0NmU1MGQ=">Unity进阶技巧 - RectTransform详解<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbnNreS9wLzUwNDUyMDEuaHRtbA==">修改RectTransform的值<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Unity 中引用查询的研究</title>
    <url>/unity/unity_reference.html</url>
    <content><![CDATA[<span id="more"></span>

<p>博主目前所知道的 Unity 引用查询的方式有两种:</p>
<ol>
<li>将 Unity 的序列化模式设置为 Force Text, 通过文本比对的方式查询引用情况</li>
<li>通过收集复合资源的依赖情况反向转换为引用情况, 直接进行查询</li>
</ol>
<h2 id="文本方式"><a href="#文本方式" class="headerlink" title="文本方式"></a>文本方式</h2><p>这种查询方式可以自己实现也可以借助工具实现</p>
<h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><p>这里就以最简单的方式举例 (只说明思路)</p>
<ol>
<li><p>先收集全部的复合资源</p>
<p> <code>var guids = AssetDatabase.FindAssets(&quot;t:Prefab t:Material t:Scriptableobject t:Scene t:AnimatorController t:Textasset&quot;, new string[] &#123;&quot;Assets&quot;&#125;);</code></p>
</li>
<li><p>依次加载全部文本</p>
<p> <code>rawData.text = File.ReadAllText(assetFullPath);</code></p>
</li>
<li><p>获得要查询资源的 GUID</p>
<p> <code>guidRules = Selection.assetGUIDs</code></p>
</li>
<li><p>依次进行比对</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> guidRule <span class="keyword">in</span> guidRules)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Regex.IsMatch(rawData.text, guidRule))</span><br><span class="line">    &#123;</span><br><span class="line">        results.Add(guidRule, rawData.fullPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>最后汇总结果就可以了, 其中关键的点在于要使用多线程来加快读取 text 以及遍历查询的速度, 否则效率将会非常低</p>
<p>【总结】</p>
<p>在较大的项目中, 初始化需要 33s 时间, 而且每次初始化的时间差异很大, 有时会长达 60s 以上</p>
<p><img data-src="/images/unity/unity_reference1.png" alt="总时间"></p>
<p>查询 1 个文件的耗时 0.7s</p>
<p><img data-src="/images/unity/unity_reference2.png" alt="单文件"></p>
<p>但是随着文件增多, 需要的查询时间也会随之上升, 查询 10 个文件时需要 6s</p>
<p><img data-src="/images/unity/unity_reference3.png" alt="10个文件"></p>
<p>查询 20 个文件时需要 16s</p>
<p><img data-src="/images/unity/unity_reference4.png" alt="20个文件"></p>
<p>【<strong>适用情况</strong>】</p>
<ul>
<li><p>由于每次修改 C# 代码都会导致缓存清空, 因此适用于关卡, 美术和优化等基本不会修改代码的人员</p>
</li>
<li><p>制作缓存时, 基本都会使用 <code>OnPostprocesser</code> 这个方法, 从而会加长资源导入的时间, 如果项目中有大量的此方法, 便会导致资源导入非常缓慢</p>
</li>
<li><p>由于查询数增多时, 时间消耗也会大幅度增加, 因此只适用于人工查询, 不适合批量查询</p>
</li>
</ul>
<h3 id="使用-Ripgrep-软件"><a href="#使用-Ripgrep-软件" class="headerlink" title="使用 Ripgrep 软件"></a>使用 Ripgrep 软件</h3><p>使用 Ripgrep 软件的查询功能实现引用查询</p>
<p>Ripgrep 是命令行下一个基于行的搜索工具, 使用 Rust 开发, 可以在多平台下运行, RipGrep 官方号称比其它类似工具在搜索速度上快上 N 倍, VSCode 的搜索功能默认就是用的 Ripgrep</p>
<p><img data-src="/images/unity/unity_reference5.png" alt="vscode"></p>
<p>使用 VSCode 执行搜索时在任务管理器中就可以看到</p>
<p><img data-src="/images/unity/unity_reference6.png" alt="vscode"></p>
<p>软件下载地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0J1cm50U3VzaGkvcmlwZ3JlcC90cmVlLzEzLjAuMA==">Ripgrep 开源地址<i class="fa fa-external-link-alt"></i></span></p>
<p>将软件导入到 Unity 中, 编写代码使用 <code>Process</code> 类, 设置好参数, 启动软件查询即可</p>
<p>推荐将参数写为可配置的方式, 这样使用过程中需要调整参数时可以直接外部调整</p>
<p><img data-src="/images/unity/unity_reference11.png" alt="参数"></p>
<p>另外 .exe 程序和 .ignore 文件都可以直接放到项目中</p>
<p><img data-src="/images/unity/unity_reference12.png" alt="程序"></p>
<p>在较大的项目中, 每次查询需要消耗 6 ~ 10s</p>
<p><img data-src="/images/unity/unity_reference7.png" alt="耗时"></p>
<p>【<strong>适用情况</strong>】</p>
<ul>
<li><p>没有了初始化操作带来的时间消耗, 单次查询的时间大幅度缩短, 适用于程序等经常修改代码的人员</p>
</li>
<li><p>由于无法做缓存, 因此也只适用于人工查询, 不适用于批量查询</p>
</li>
<li><p>由于没有使用 <code>OnPostprocesser</code> 方法, 也带来一个好处, 不会对资源导入速度造成任何影响</p>
</li>
</ul>
<h2 id="逆向依赖方式"><a href="#逆向依赖方式" class="headerlink" title="逆向依赖方式"></a>逆向依赖方式</h2><p>Unity 目前提供了 <code>AssetDatabase.GetDependencies()</code> 和 <code>EditorUtility.CollectDependencies()</code> 两个方法收集复合类资源的依赖, 通过将依赖关系转化为引用关系, 便可以实现引用情况的查询 (编辑器中可以直接: 资源右键 &#x3D;&gt; Select Dependencies)</p>
<p><font color=red>【注】由于使用了 Unity 内部的引用关系来做查询, 直接通过代码调用资源接口进行加载的资源将无法被统计</font></p>
<p>先说一下两个接口的差异</p>
<ul>
<li><code>AssetDatabase.GetDependencies()</code> <strong>收集的依赖包含无效引用</strong></li>
<li><code>EditorUtility.CollectDependencies()</code> <strong>收集的依赖不包含无效引用</strong></li>
</ul>
<p>无效引用指的就是 Unity 为了方便开发者而做的一些引用缓存; 以材质球为例, 在切换 Shader 的时候, Unity 并不会将之前 Shader 的相关序列化信息删除, 旧的纹理引用依旧会序列化保存下来</p>
<p>更详细的差异可以看这里: <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vUVhTb2Z0d2FyZS8zNWEwNzczOGY0ODEyNDVkMDhiOTQ4ZWFkMzc0M2E0Yg==">详细差异<i class="fa fa-external-link-alt"></i></span></p>
<p>下面说一下实现思路:</p>
<ol>
<li>得到全部的复合资源</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sprites = AssetDatabase.FindAssets(<span class="string">&quot;t:SpriteAtlas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> materials = AssetDatabase.FindAssets(<span class="string">&quot;t:Material&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> prefabs = AssetDatabase.FindAssets(<span class="string">&quot;t:Prefab&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sos = AssetDatabase.FindAssets(<span class="string">&quot;t:ScriptableObject&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> models = AssetDatabase.FindAssets(<span class="string">&quot;t:Model&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cons = AssetDatabase.FindAssets(<span class="string">&quot;t:AnimatorController&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> scenes = AssetDatabase.FindAssets(<span class="string">&quot;t:Scene&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> animas = AssetDatabase.FindAssets(<span class="string">&quot;t:Animation&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获取全部依赖</li>
</ol>
<p>使用 <code>AssetDatabase.GetDependencies()</code>, 因为其可以直接传递路径, 另一个方法需要传递物体, 多一个加载过程的耗时</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> typeFilter.Keys)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> guid <span class="keyword">in</span> typeFilter[key])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dependencies.ContainsKey(guid))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// DebugUtil.LogError($&quot;存在相同的 GUID : &#123;guid&#125;&quot;, DebugUtil.红);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            dependencies.Add(guid, AssetDatabase.GetDependencies(AssetDatabase.GUIDToAssetPath(guid), <span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将依赖关系转换为引用关系, 有了引用关系的字典就可以直接查询了</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> guid <span class="keyword">in</span> dependencies.Keys)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> dependPath <span class="keyword">in</span> dependencies[guid])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dependGuid = AssetDatabase.AssetPathToGUID(dependPath);</span><br><span class="line">        <span class="keyword">if</span> (!assetData.referencedAssets.TryGetValue(dependGuid, <span class="keyword">out</span> _))</span><br><span class="line">        &#123;</span><br><span class="line">            assetData.referencedAssets[dependGuid] = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        assetData.referencedAssets[dependGuid].Add(guid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法的耗时主要在构建依赖关系上, 经测试每次构建需要耗时 70s 以上</p>
<p><img data-src="/images/unity/unity_reference8.png" alt="构建耗时"></p>
<p>而将依赖关系转换为引用关系仅花费了 1s 左右</p>
<p><img data-src="/images/unity/unity_reference9.png" alt="转换数据"></p>
<p>查询耗时连 1ms 都不到</p>
<p><img data-src="/images/unity/unity_reference10.png" alt="查询耗时"></p>
<p>【<strong>适用情况</strong>】</p>
<ul>
<li><p>因为每次构建字典的时间过长, 不适合经常使用, 多适用于批量查询, 全局查询</p>
</li>
<li><p>也可以将字典做成缓存, 使用 <code>OnPostprocesser</code> 来做, 虽然会对资源导入速度有影响, 但是就不必每次都进行字典的构建, 借助字典的查询友好, 可快速查询引用, 资源商店中的 FR2 便是使用了这个思路</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th align="left">思路</th>
<th align="left">方案</th>
<th align="left">初始化耗时</th>
<th align="left">单次查询耗时</th>
<th align="left">多次查询耗时</th>
<th align="left">是否适合批量查询</th>
</tr>
</thead>
<tbody><tr>
<td align="left">文本比对</td>
<td align="left">手动实现逻辑</td>
<td align="left">33s ~ 2 min (耗时不稳定)</td>
<td align="left">0.7s</td>
<td align="left">高于线性</td>
<td align="left">不适合</td>
</tr>
<tr>
<td align="left">文本比对</td>
<td align="left">Ripgrep</td>
<td align="left">无</td>
<td align="left">6 ~ 10s</td>
<td align="left">线性</td>
<td align="left">不适合</td>
</tr>
<tr>
<td align="left">逆向依赖</td>
<td align="left">逆向依赖</td>
<td align="left">72s 左右 (耗时稳定)</td>
<td align="left">~0ms [字典: O(1)]</td>
<td align="left">线性</td>
<td align="left">适合</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Reference</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity TileMap 瓦片与瓦片之间的线条</title>
    <url>/unity/unity_tile_border_line.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在使用 TileMap 制作 2D 游戏的时候, 发现瓦片与瓦片之间总是存在一条缝隙, 这条缝隙什么颜色的都有, 可是我已经把所有素材的过滤方式都设置为了: &quot;Point (no filter)&quot;, 为什么还会有这个问题呢? 原本以为是瓦片之间没拼接好, 大小没设置对(原谅我没有图形学方面的知识), 后来查阅资料得知, 目前美工在制作 2D 游戏素材时, 基本都会将同类的精灵图放到一张贴图中, 这样紧贴着的两个精灵图在某种特殊情况下就会出现使用了相邻精灵图中像素的问题.</p>
<p><img data-src="/images/unity/tileborderline0.png" alt="精灵图放到一张贴图中"></p>
<p>从上面的素材图中可以看到, 多个精灵图组成了一张贴图, 其中中间位置的一张看似像 &quot;车轮印&quot; 的精灵图和右侧一张表示 &quot;海洋&quot; 的贴图相连, 于是在游戏中就会出现这种情况:</p>
<p><img data-src="/images/unity/tileborderline1.png" alt="蓝色细线, 万恶之源"></p>
<p>代表 &quot;车轮印&quot; 精灵图的右侧就会出现代表 &quot;海洋&quot; 精灵图的一个蓝色的像素, 导致出现了一条蓝色的细线. 实乃万恶之源!</p>
<p>先说一下已经试过的网友们的方法.</p>
<h1 id="将-TileMap-的-cell-大小设置为接近-1-的值"><a href="#将-TileMap-的-cell-大小设置为接近-1-的值" class="headerlink" title="将 TileMap 的 cell 大小设置为接近 1 的值"></a>将 TileMap 的 cell 大小设置为接近 1 的值</h1><p>默认情况下 TileMap 中 cell 的大小为 1 个单位, 瓦片在地图中的大小通常也是一个单位, 于是就想到将 cell 大小设置为比 1 个单位小那么一丢丢, 让最外围的一个像素不显示出来不就好了~ 赶紧尝试一下, 于是:</p>
<p><img data-src="/images/unity/tileborderline2.png" alt="改变 cell 大小"></p>
<p>乍看上去好像没有细线了, 但是放大一下就会发现, 不仅是右侧有蓝色的细线, 现在上方也有了...呃...看来这种方法不适合我啊~</p>
<h1 id="建立图集"><a href="#建立图集" class="headerlink" title="建立图集"></a>建立图集</h1><p>听另一位大佬说, 将精灵图添加到图集时, Unity 会自动补全像素, 因此可以作为一个解决此问题的办法, 于是赶紧照着大佬说的操作一番~ 然后:</p>
<p><img data-src="/images/unity/tileborderline3.png" alt="建立图集"></p>
<p>关于图集的知识我也不是很懂, 总之依旧没有实现比较完美的效果, 或者是让我满意的效果...可以看到图中确实已经没有了蓝色的细线, 但是会发现瓦片与瓦片之间的衔接变得很不自然, 有一条明显的分界线...呃...看来这种方法同样不适合我~</p>
<hr>
<h1 id="素材分辨率"><a href="#素材分辨率" class="headerlink" title="素材分辨率"></a>素材分辨率</h1><p>后来我想到了之前做泰拉瑞亚的仿制 demo 时曾出现过的一个情况, 当时自己从网上搞来一批素材, 开始搭建人物. 人物的素材是拆成很多部分的, 我在拼接这些部分的时候发现像素对应不起来, 当时我的解决办法是把图片的分辨率改成了 2 的幂, 当时改成了 64, 然后像素就能对应上了. 同时我也发现 Unity 中有一项 Max Size 的设置, 这里也只支持 2 的幂, 会不会就是这里导致 Unity 会自动补全像素呢? 于是我赶紧将素材都改为了 2 的幂, 256 X 256, 重新导入并设置好后, 神奇的一幕发生了:</p>
<p><img data-src="/images/unity/tileborderline4.png" alt="处理素材"></p>
<p>而且瓦片与瓦片之间也衔接的不错, 虽然仔细观察还是有瑕疵, 但是这应该是素材自身的问题了!</p>
<p><img data-src="/images/unity/tileborderline5.png" alt="瓦片之间的衔接"></p>
<h1 id="MSAA-多重采样"><a href="#MSAA-多重采样" class="headerlink" title="MSAA 多重采样"></a>MSAA 多重采样</h1><p>再到后来编写摄像机脚本的时候, 发现摄像机中有一个 MSAA 的设置选项, 忽然想起之前大佬提到过 MSAA 啊! 赶紧查一下 MSAA 是啥!</p>
<p>MSAA 是 &quot;多重采样&quot; 技术, 用来实现 &quot;抗锯齿&quot; 的效果. 在不规则图形的渲染中需求比较大. 下面是一张简单表示 MSAA 效果的图片. (引用自文章: <span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjgyMzM3MA==">深入剖析MSAA<i class="fa fa-external-link-alt"></i></span>)</p>
<p><img data-src="/images/unity/msaa.png" alt="MSAA"></p>
<p>由此可见在没有开启 MSAA 时, 一条斜线上的锯齿感非常明显, 开始 MSAA 之后, 斜线上的锯齿感便开始弱化. 理想状态下可以无限接近于真正的斜线.</p>
<p>但是在我这个项目中, MSAA 反而会形成困扰, 导致瓦片之间衔接不好, 甚至出现前面所说的细线, 毕竟游戏本就是像素风格嘛~ 于是我开始好奇将 MSAA 关闭后会有什么效果呢?</p>
<p><img data-src="/images/unity/tileborderline6.png" alt="关闭 MSAA"></p>
<p>于是我回退到之前没有修改素材分辨率的版本, 找到摄像机中的 MSAA 选项, 选择 &quot;Off&quot;, 然后神奇的一幕又发生了, 关闭 MSAA 后, 也实现了近乎完美的瓦片衔接...</p>
<p>那我之前耗费那么多时间处理素材是图啥子嘞~ 😭 又吃了没文化的亏~</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果你的项目中也出现了文章中所提到的问题, 不妨尝试尝试这几种方法:</p>
<ol>
<li><p>将 TileMap 的 cell 大小设置为接近 1 的值.</p>
</li>
<li><p>建立图集, 在图集的 Padding 处设置自动补全的像素值, 可选: 2 4 8.</p>
<p> <img data-src="/images/unity/tileborderline7.png" alt="图集自动补全像素"></p>
</li>
<li><p>处理素材的分辨率为 2 的幂.</p>
</li>
<li><p>关闭 MSAA</p>
</li>
</ol>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAyNzU5MzIvYXJ0aWNsZS9kZXRhaWxzLzEwNjYwODE0Mw==">3D 瓦片地图采坑录<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjgyMzM3MA==">深入剖析 MSAA<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhcmtyYWJiaXQvYXJ0aWNsZS9kZXRhaWxzLzc5MTgxOTQ1">绘制地图(Tile Map)<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhcmtyYWJiaXQvYXJ0aWNsZS9kZXRhaWxzLzc5MjEyNjI1">图集(Atlas)<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>TileMap</tag>
      </tags>
  </entry>
  <entry>
    <title>面向新手的 TextMeshPro 使用说明</title>
    <url>/unity/unity_textmeshpro.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="TextMeshPro-和-Text-效果上的不同"><a href="#TextMeshPro-和-Text-效果上的不同" class="headerlink" title="TextMeshPro 和 Text 效果上的不同"></a>TextMeshPro 和 Text 效果上的不同</h1><table>
<thead>
<tr>
<th><strong>对比维度</strong></th>
<th><strong>TextMeshPro</strong></th>
<th><strong>Text</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>文本显示效果</strong></td>
<td>高分辨率渲染，支持子像素定位，文本清晰锐利</td>
<td>简单渲染，缩放时模糊、失真</td>
</tr>
<tr>
<td><strong>富文本支持</strong></td>
<td>支持复杂标签和自定义样式，功能丰富</td>
<td>支持简单的富文本功能</td>
</tr>
<tr>
<td><strong>字体支持</strong></td>
<td>动态字体生成，自定义字体图集，支持多语言和复杂脚本</td>
<td>静态字体支持，语言兼容性有限</td>
</tr>
<tr>
<td><strong>高级排版功能</strong></td>
<td>自动换行、字符间距、行间距、对齐方式等细节排版功能强大</td>
<td>仅支持简单的排版设置</td>
</tr>
<tr>
<td><strong>特效支持</strong></td>
<td>内置渐变、描边、阴影等丰富特效</td>
<td>需要手动实现特效，能力有限</td>
</tr>
<tr>
<td><strong>性能</strong></td>
<td>高效处理动态文本，支持材质合并优化渲染开销</td>
<td>性能较低，处理大量动态文本时容易卡顿</td>
</tr>
<tr>
<td><strong>API 功能</strong></td>
<td>丰富的 API，支持复杂样式控制和动态生成</td>
<td>API 功能少，只能满足简单文本操作</td>
</tr>
<tr>
<td><strong>兼容性</strong></td>
<td>需要额外的字体资源和材质设置，初次学习可能稍复杂</td>
<td>内置 Unity 功能，使用简单</td>
</tr>
<tr>
<td><strong>多语言支持</strong></td>
<td>支持阿拉伯语、中文、日文等复杂文字布局</td>
<td>对多语言支持有限，需手动调整</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>高质量文本显示，大型项目，UI 动态文本</td>
<td>简单文本显示，小型项目，低复杂度 UI</td>
</tr>
</tbody></table>
<h1 id="TextMeshPro-和-Text-使用上的不同"><a href="#TextMeshPro-和-Text-使用上的不同" class="headerlink" title="TextMeshPro 和 Text 使用上的不同"></a>TextMeshPro 和 Text 使用上的不同</h1><p>最大的使用差别就一个, TMP 有字体库的概念. Text 组件直接引用字体文件, 而 TMP 则是引用以字体文件为基础制作而成的 TMP_Font Asset 资源.</p>
<h1 id="如何生成-TMP-Font-Asset-呢"><a href="#如何生成-TMP-Font-Asset-呢" class="headerlink" title="如何生成 TMP_Font Asset 呢 ?"></a>如何生成 TMP_Font Asset 呢 ?</h1><p>打开 Font Asset Creator 窗口, 放入字体文件, 选择会用到的字符集, 点击 Generate 即可生成. 如下图所示.</p>
<p><img data-src="/images/unity/tmp1.png" alt="TMP 1"></p>
<h1 id="生成-TMP-Font-Asset-的时候为什么-慢-而且是-巨慢"><a href="#生成-TMP-Font-Asset-的时候为什么-慢-而且是-巨慢" class="headerlink" title="生成 TMP_Font Asset 的时候为什么 &quot;慢&quot;, 而且是 &quot;巨慢&quot; ?"></a>生成 TMP_Font Asset 的时候为什么 &quot;慢&quot;, 而且是 &quot;巨慢&quot; ?</h1><p>提问 : 为什么我生成的时候很慢很慢呢? 一次要 30 分钟甚至几小时!</p>
<p>回答 : 影响生成字符集时长的原因主要有 2 个</p>
<ol>
<li>字符的数量</li>
</ol>
<p>比如使用了常用汉字集这种几千字的集合, 大概需要几十秒, 下面是我电脑的数据: 4205 字, 可以看到, 生成时间耗费了 22 秒.</p>
<p><img data-src="/images/unity/tmp2.png" alt="TMP 2"></p>
<ol start="2">
<li>Point Size 和 Padding 的设置</li>
</ol>
<p>当要生成几千字的字体资源时, Point Size 和 Padding 不要设置为 Auto, 字符数量少时可以使用来快速找到合适的数值.</p>
<p>这个是让工具自动去调整 Point 以及 Padding 的大小, 这样工具会不断试错, 尝试一个值, 不行, 换下一个, 不行, 再换下一次, 还是不行, 再换 ... 如此往复 ... 因此 &quot;慢&quot; 是因为它生成了数次.</p>
<p>只要固定 Point 和 Padding 的大小, 它就会仅生成一次, 消耗的时间就很少了.</p>
<p>推荐一个常用的汉字集 : <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d5LWx1a2UvVW5pdHktVGV4dE1lc2hQcm8tQ2hpbmVzZS1DaGFyYWN0ZXJzLVNldA==">跳转到 Github 汉字集<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="那么-Size-和-Padding-该设置多大呢"><a href="#那么-Size-和-Padding-该设置多大呢" class="headerlink" title="那么 Size 和 Padding 该设置多大呢 ?"></a>那么 Size 和 Padding 该设置多大呢 ?</h1><p>先放一下 TextMeshPro 的官方手册 : <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1BhY2thZ2VzL2NvbS51bml0eS50ZXh0bWVzaHByb0A0LjAvbWFudWFsL0ZvbnRBc3NldHNDcmVhdG9yLmh0bWw=">TMP 4.0 手册<i class="fa fa-external-link-alt"></i></span></p>
<p>手册中是这样写的, 对于 512 的图集, padding 为 5 就够用了.</p>
<blockquote>
<p>A padding of 5 is often fine for a 512x512 texture.</p>
</blockquote>
<p>那么其他的分辨率下该设置多少呢? 你自己看着办 ... (多去尝试) 当然也可以参考我上面截图中的, 我是 8192 * 4096 的图集, 用的是 12, 感觉还好, 即使是 &quot;加粗+描边&quot; 效果下也很平滑, 至少肉眼看不出啥瑕疵来.</p>
<p>Padding 主要控制的就是字体显示效果, 原文是这么写的:</p>
<blockquote>
<p>The larger the padding, the smoother the transition, which allows for higher-quality rendering and larger effects, like thick outlines.</p>
</blockquote>
<p>意思就是这个值越大, 字体越平滑, 就越能支持更高质量的渲染和效果, 比如厚厚的描边.</p>
<p>至于 Point Size 嘛 ... 参考我的截图吧, 我的游戏中有时候会用到 50 号甚至 60 号的文字, 感觉 Point Size 设置为 72 已经挺极限了, 再小的话显示就出问题了.</p>
<h1 id="画面缩小后文字有-白底"><a href="#画面缩小后文字有-白底" class="headerlink" title="画面缩小后文字有 &quot;白底&quot; ?"></a>画面缩小后文字有 &quot;白底&quot; ?</h1><p>这个其实是 SP&#x2F;PD Ratio 值过小导致的. SP&#x2F;PD Ratio 数值就是 padding 和 point size 的比值, 用来描述各个字符之间空隙的大小, 空隙太小时便会出现白底的问题, 但是太大也不好, 浪费空间嘛.</p>
<p>网上的说法是, 推荐最大 10%, 最小 4%, 但是我实测发现基本低于 10% 就会出现白底了, 所以我推荐的值为 12% 左右, 太小出现白底, 太大浪费空间, 自己通过手调 Point Size 和 Padding 来调整吧.</p>
<p>这是别人的研究, 我也不确定文章会不会哪天就看不了了, 智障的 CSDN 会员! 且看且珍惜吧, 也不长, 主要意思就一个: SP&#x2F;PD Ratio 值过小过导致白底, 我都总结了. 它的文章里面就是写了原因的推测, 也只是推测, 这里是原文: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNjcxOTYwNy9hcnRpY2xlL2RldGFpbHMvMTMwNDEyODY3">文字白底问题探讨<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="玩家文本输入框怎么做呢-因为我不可能提前预知玩家输入哪些字符呀"><a href="#玩家文本输入框怎么做呢-因为我不可能提前预知玩家输入哪些字符呀" class="headerlink" title="玩家文本输入框怎么做呢 ? 因为我不可能提前预知玩家输入哪些字符呀 ?"></a>玩家文本输入框怎么做呢 ? 因为我不可能提前预知玩家输入哪些字符呀 ?</h1><p>是的, 我们确实无法预知, 所以这里就要用到之前从来没有提到的另一个概念了 : 动态字体.</p>
<p>我们之前创建的字体资源都是静态字体, 顾名思义, 静态字体的意思就是打包哪些字符就支持显示哪些字符, 没有打包的就不支持, 这也是为什么很多人一开始用 TMP 显示不了中文字符的原因.</p>
<p>而动态字体中, 初始是没有任何字符的, 它是现用现做, 因此性能上就会差一些, 但是好处也是毋庸置疑的, 它能支持字体文件中全部字符.</p>
<h1 id="怎么做一个动态字体呢"><a href="#怎么做一个动态字体呢" class="headerlink" title="怎么做一个动态字体呢 ?"></a>怎么做一个动态字体呢 ?</h1><p>直接引用手册原文</p>
<blockquote>
<p>Creating a dynamic font Asset<br>Empty font assets are dynamic by default. To create one:</p>
<p>From Unity&#39;s main menu, choose &quot;Assets &gt; Create &gt; TextMeshPro &gt; Font Asset&quot; or press Ctrl&#x2F;Cmd + Shift + F12.<br>To make an existing font Asset dynamic:</p>
<p>Select Asset and open it in the Inspector.</p>
<p>Set the Generation Settings &gt; Atlas Population Mode property to Dynamic.</p>
</blockquote>
<h1 id="通过修改字体文件的材质属性实现了一个效果-但是要实现另一个效果怎么办-难道要再创建一份字体资源吗"><a href="#通过修改字体文件的材质属性实现了一个效果-但是要实现另一个效果怎么办-难道要再创建一份字体资源吗" class="headerlink" title="通过修改字体文件的材质属性实现了一个效果, 但是要实现另一个效果怎么办 ? 难道要再创建一份字体资源吗 ?"></a>通过修改字体文件的材质属性实现了一个效果, 但是要实现另一个效果怎么办 ? 难道要再创建一份字体资源吗 ?</h1><p>不需要再创建一份字体资源, 否则人都麻了... 只需要创建一份 Material Preset 即可, 如图操作</p>
<p><img data-src="/images/unity/tmp3.png" alt="TMP 3"></p>
<p>选中字体资源下的材质球, 仅选中即可, 然后点击 Inspector 面板上材质球的小菜单, 竖着的三个小点, 记得是材质球的菜单, 不是上面那个三个小点的菜单, 有两个, 千万别混了. 最后点击菜单中的 &quot;Create Material Preset&quot; 即可, 这样在 TextMeshPro 控件中的材质球选项处会自动多出选项供你选择.</p>
<h1 id="彩色-emoji-字符怎么支持-表情包怎么支持-有哪些可用的富文本标签-渐变效果怎么支持"><a href="#彩色-emoji-字符怎么支持-表情包怎么支持-有哪些可用的富文本标签-渐变效果怎么支持" class="headerlink" title="彩色 emoji 字符怎么支持 ? 表情包怎么支持 ? 有哪些可用的富文本标签 ? 渐变效果怎么支持 ?"></a>彩色 emoji 字符怎么支持 ? 表情包怎么支持 ? 有哪些可用的富文本标签 ? 渐变效果怎么支持 ?</h1><p>这些目前我也还没开始大规模使用, 就尝试使用了一下表情包和标签而已, 具体的请直接查阅文档, 文档巨详细.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1BhY2thZ2VzL2NvbS51bml0eS50ZXh0bWVzaHByb0A0LjAvbWFudWFsL0NvbG9yRW1vamlzLmh0bWw=">color emoji 支持 (字符表情)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1BhY2thZ2VzL2NvbS51bml0eS50ZXh0bWVzaHByb0A0LjAvbWFudWFsL1Nwcml0ZXMuaHRtbA==">表情包支持 (图片表情)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1BhY2thZ2VzL2NvbS51bml0eS50ZXh0bWVzaHByb0A0LjAvbWFudWFsL1JpY2hUZXh0Lmh0bWw=">富文本标签支持<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1BhY2thZ2VzL2NvbS51bml0eS50ZXh0bWVzaHByb0A0LjAvbWFudWFsL1N0eWxlU2hlZXRzLmh0bWw=">Style Sheet 支持<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL1BhY2thZ2VzL2NvbS51bml0eS50ZXh0bWVzaHByb0A0LjAvbWFudWFsL0NvbG9yR3JhZGllbnRzLmh0bWw=">颜色渐变效果支持<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="总结-首个项目的-TextMeshPro-的一般使用姿势-后面的项目可以直接复用"><a href="#总结-首个项目的-TextMeshPro-的一般使用姿势-后面的项目可以直接复用" class="headerlink" title="总结 : 首个项目的 TextMeshPro 的一般使用姿势 (后面的项目可以直接复用)"></a>总结 : 首个项目的 TextMeshPro 的一般使用姿势 (后面的项目可以直接复用)</h1><ol>
<li><p>选择各个语种: 英文、日文、韩文、中文等要使用的字体, 可用即可, 后期再正式选择. 一般每种语种都要单独选择, 支持多个语种的字体一般除了主语种外的其他语种字符都不好看.</p>
</li>
<li><p>对各个字体文件创建动态字体资源, 直接使用动态的, 因为具体要用到哪些字符还没有完全确定, 静态的也不好做.</p>
</li>
<li><p>将动态字体中收集的字符进行分类: 英文、数字、符号、日文、韩文、中文、数学符号等等, 分别创建对应的 txt 文件.</p>
</li>
<li><p>选择一个主字体, 比如中文, 然后将 ASCII、日文、韩文 作为 CallBack 设置. 如果字母和数字想使用不同的字体, 可以在步骤 3 那里详细进行拆分, 分别设置 CallBack, 比如英文用 A 数字字体, 中文用 B 数字字体等.</p>
</li>
<li><p>记得 CallBack 的最后必须设置上一个多语种的动态字体, 推荐开源的阿里巴巴普惠体3.0, 尤其是需要玩家输入昵称或者显示外部文本的地方, 更是必须使用动态字体 : <span class="exturl" data-url="aHR0cHM6Ly9mb250cy5hbGliYWJhZ3JvdXAuY29tLw==">阿里巴巴普惠体3.0<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>无穷, 无限, 积分等数学符号可以使用支持数学符号的字体解决 : <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xpdHRsZU5ld3Rvbi9SZXBsYWNlX01hdGhUeXBl">数学字符字体<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Unity 中实现 Windows 选择文件</title>
    <url>/unity/unity_windows_import.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🥦实现思路"><a href="#🥦实现思路" class="headerlink" title="🥦实现思路"></a>🥦实现思路</h1><p>在 Windows 上实现存档的导入功能, 可以直接调用系统的文件管理器, 选择我们指定类型的文件, 之后代码中进行处理即可</p>
<h1 id="🌵调用文件管理器"><a href="#🌵调用文件管理器" class="headerlink" title="🌵调用文件管理器"></a>🌵调用文件管理器</h1><p>系统提供了 <code>GetOpenFileName</code> 函数, 可以调用 Windows 文件管理器, 以下是此函数的使用步骤</p>
<h2 id="新建数据类"><a href="#新建数据类" class="headerlink" title="新建数据类"></a>新建数据类</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">OpenFileName</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> structSize;</span><br><span class="line">    <span class="keyword">public</span> IntPtr dlgOwner;</span><br><span class="line">    <span class="keyword">public</span> IntPtr instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> filter;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> customFilter;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxCustFilter;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> filterIndex;</span><br><span class="line">    <span class="keyword">public</span> IntPtr file; <span class="comment">// 新风格不能使用 string 存储返回值, 这里使用 IntPtr 存储返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxFile;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> fileTitle;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxFileTitle;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> initialDir;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> flags;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">short</span> fileOffset;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">short</span> fileExtension;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> defExt;</span><br><span class="line">    <span class="keyword">public</span> IntPtr custData;</span><br><span class="line">    <span class="keyword">public</span> IntPtr hook;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> templateName;</span><br><span class="line">    <span class="keyword">public</span> IntPtr reservedPtr;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> reservedInt;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> flagsEx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引入-DLL"><a href="#引入-DLL" class="headerlink" title="引入 DLL"></a>引入 DLL</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打开文件对话框</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;ComDLG32.dll&quot;</span>, SetLastError = true, ThrowOnUnmappableChar = true, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">GetOpenFileName</span>(<span class="params">[In, Out] OpenFileName openFileName</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> openFileName = <span class="keyword">new</span> OpenFileName();</span><br><span class="line"></span><br><span class="line">openFileName.structSize = Marshal.SizeOf(openFileName);</span><br><span class="line">openFileName.filter = filter;</span><br><span class="line">openFileName.fileTitle = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">64</span>]);</span><br><span class="line">openFileName.maxFileTitle = openFileName.fileTitle.Length;</span><br><span class="line">openFileName.initialDir = defaultFolder;</span><br><span class="line">openFileName.title = windowTitle;</span><br><span class="line">openFileName.templateName = <span class="built_in">string</span>.Empty;</span><br><span class="line">openFileName.flags = <span class="number">0x00000008</span> | <span class="number">0x00000200</span> | <span class="number">0x00000800</span> | <span class="number">0x00001000</span> | <span class="number">0x00080000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配 2KB 缓冲区</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> BUFFER_SIZE = <span class="number">2048</span>;</span><br><span class="line"><span class="keyword">var</span> fileBuffer = Marshal.AllocHGlobal(BUFFER_SIZE * Marshal.SystemDefaultCharSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空缓冲区，防止残留数据影响</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; BUFFER_SIZE; index++)</span><br><span class="line">&#123;</span><br><span class="line">    Marshal.WriteByte(fileBuffer, index, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值缓冲区</span></span><br><span class="line">openFileName.file = fileBuffer;</span><br><span class="line">openFileName.maxFile = BUFFER_SIZE;</span><br></pre></td></tr></table></figure>

<h2 id="打开管理器"><a href="#打开管理器" class="headerlink" title="打开管理器"></a>打开管理器</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选取文件</span></span><br><span class="line"><span class="keyword">if</span> (GetOpenFileName(openFileName) == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    selectData = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="处理返回值"><a href="#处理返回值" class="headerlink" title="处理返回值"></a>处理返回值</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">selectedFilesList.Clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pointer = fileBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> file = Marshal.PtrToStringAuto(pointer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(file))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    selectedFilesList.Add(file);</span><br><span class="line"></span><br><span class="line">    pointer += (file.Length + <span class="number">1</span>) * Marshal.SystemDefaultCharSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">selectData = selectedFilesList;</span><br><span class="line"><span class="keyword">return</span> selectedFilesList.Count &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放分配的缓冲区内存</span></span><br><span class="line">Marshal.FreeHGlobal(fileBuffer);</span><br></pre></td></tr></table></figure>

<h1 id="🦄总结"><a href="#🦄总结" class="headerlink" title="🦄总结"></a>🦄总结</h1><ol>
<li>强烈建议使用新风格的文件管理器, 虽然旧风格的文件管理器返回的值用 <code>空格</code> 来分割, 处理起来更简单, 但是界面巨丑, 操作巨反人类</li>
<li>使用新风格的文件管理器时要注意, 一定不要使用 <code>string</code> 类型存储返回值, 因为返回值使用 <code>\0</code> 来分割, 而 C# 中的字符串认为 <code>\0</code> 是字符串的结束, 因此后面的信息就丢失了</li>
<li>记得及时释放申请的缓冲区内存</li>
</ol>
<h1 id="👀完整代码"><a href="#👀完整代码" class="headerlink" title="👀完整代码"></a>👀完整代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReSharper disable NotAccessedField.Global</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Kuroha.Utility</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileUtilWindows</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">OpenFileName</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> structSize;</span><br><span class="line">            <span class="keyword">public</span> IntPtr dlgOwner;</span><br><span class="line">            <span class="keyword">public</span> IntPtr instance;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> filter;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> customFilter;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> maxCustFilter;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> filterIndex;</span><br><span class="line">            <span class="keyword">public</span> IntPtr file; <span class="comment">// 新风格不能使用 string 存储返回值, 这里使用 IntPtr 存储返回值</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> maxFile;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> fileTitle;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> maxFileTitle;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> initialDir;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> title;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> flags;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">short</span> fileOffset;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">short</span> fileExtension;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> defExt;</span><br><span class="line">            <span class="keyword">public</span> IntPtr custData;</span><br><span class="line">            <span class="keyword">public</span> IntPtr hook;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> templateName;</span><br><span class="line">            <span class="keyword">public</span> IntPtr reservedPtr;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> reservedInt;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> flagsEx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 打开文件对话框</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;ComDLG32.dll&quot;</span>, SetLastError = true, ThrowOnUnmappableChar = true, CharSet = CharSet.Auto)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">GetOpenFileName</span>(<span class="params">[In, Out] OpenFileName openFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">string</span>&gt; selectedFilesList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 选择多个文件并返回</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;windowTitle&quot;&gt;</span>弹窗标题<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;defaultFolder&quot;&gt;</span>默认打开的文件夹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filter&quot;&gt;</span>文件后缀筛选<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;selectData&quot;&gt;</span>返回选择情况: 多个文件时, 首个数据为文件夹, 后续数据依次为文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>未选择时返回 false, 选择文件时返回 true<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">SelectFiles</span>(<span class="params"><span class="built_in">string</span> windowTitle, <span class="built_in">string</span> defaultFolder, <span class="built_in">string</span> filter, <span class="keyword">out</span> List&lt;<span class="built_in">string</span>&gt; selectData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> openFileName = <span class="keyword">new</span> OpenFileName();</span><br><span class="line"></span><br><span class="line">            openFileName.structSize = Marshal.SizeOf(openFileName);</span><br><span class="line">            openFileName.filter = filter;</span><br><span class="line">            openFileName.fileTitle = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">64</span>]);</span><br><span class="line">            openFileName.maxFileTitle = openFileName.fileTitle.Length;</span><br><span class="line">            openFileName.initialDir = defaultFolder;</span><br><span class="line">            openFileName.title = windowTitle;</span><br><span class="line">            openFileName.templateName = <span class="built_in">string</span>.Empty;</span><br><span class="line">            openFileName.flags = <span class="number">0x00000008</span> | <span class="number">0x00000200</span> | <span class="number">0x00000800</span> | <span class="number">0x00001000</span> | <span class="number">0x00080000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分配 2KB 缓冲区</span></span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">int</span> BUFFER_SIZE = <span class="number">2048</span>;</span><br><span class="line">            <span class="keyword">var</span> fileBuffer = Marshal.AllocHGlobal(BUFFER_SIZE * Marshal.SystemDefaultCharSize);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清空缓冲区，防止残留数据影响</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; BUFFER_SIZE; index++)</span><br><span class="line">            &#123;</span><br><span class="line">                Marshal.WriteByte(fileBuffer, index, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 赋值缓冲区</span></span><br><span class="line">            openFileName.file = fileBuffer;</span><br><span class="line">            openFileName.maxFile = BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 选取文件</span></span><br><span class="line">                <span class="keyword">if</span> (GetOpenFileName(openFileName) == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    selectData = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">#<span class="keyword">region</span> 处理返回值</span></span><br><span class="line"></span><br><span class="line">                selectedFilesList.Clear();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> pointer = fileBuffer;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> file = Marshal.PtrToStringAuto(pointer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(file))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    selectedFilesList.Add(file);</span><br><span class="line"></span><br><span class="line">                    pointer += (file.Length + <span class="number">1</span>) * Marshal.SystemDefaultCharSize;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                selectData = selectedFilesList;</span><br><span class="line">                <span class="keyword">return</span> selectedFilesList.Count &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 释放分配的缓冲区内存</span></span><br><span class="line">                Marshal.FreeHGlobal(fileBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github Pages 搭建个人博客</title>
    <url>/hexo/hexo_blog.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建个人博客的流程大概是: 先搭建博客环境, 就像你要玩电脑游戏, 首先得先买一台电脑一样. <del>这不废话吗</del> 之后在电脑上创建博客的本地文件, 最后再将创建好的本地文件上传到网上就可以了. 这里我使用的是 Hexo 和 Github Pages 来搭建个人博客.</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>进入 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git 官方网站<i class="fa fa-external-link-alt"></i></span> 下载安装即可.</p>
<p>验证方法: 在桌面右键, 只要出现 Git GUI Here 和 Git Bash Here 就表示安装成功了.</p>
<h2 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h2><p>进入 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Nodejs 官方网站<i class="fa fa-external-link-alt"></i></span> 下载安装即可.</p>
<p>LTS 版本即可满足使用, 可以在 cmd 中使用 <code>node -v</code> 和 <code>npm -v</code> 进行验证, 出现版本号就说明成功了.</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>安装 Hexo 之前, 如果你想要更改 Hexo 的安装位置 (Hexo 默认会安装在 C 盘), 可以在 cmd 中输入下面的命令, 记得把路径改为自己的:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">set</span> <span class="string">prefix</span> <span class="string">&quot;H:\Programs Computer\NodeGobal&quot;</span></span><br><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">set</span> <span class="string">cache</span> <span class="string">&quot;H:\Programs Computer\NodeCache&quot;</span></span><br></pre></td></tr></table></figure>

<p>之后可以使用以下命令查看设置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">get</span> <span class="string">prefix</span></span><br><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">get</span> <span class="string">cache</span></span><br></pre></td></tr></table></figure>

<p>先切换 npm 源: 打开 cmd, 输入下面的命令:</p>
<p><code>npm config set registry https://registry.npm.taobao.org</code></p>
<p>之后安装 Hexo:</p>
<p><code>npm install -g hexo</code></p>
<h1 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h1><ol>
<li>   新建一个文件夹, 来放置本地博客, 名字以及路径自己决定. 我的是: F:\WorkSpace\HexoBlog</li>
<li>   进入这个空的文件夹, 点击鼠标右键, 选择 Git Bash Here, 会弹出一个类似 cmd 的窗口, 这个窗口会一直使用, 不要关闭, 如果不小心关闭了, 再次回到这个文件夹中, 在空白处点击鼠标右键, 选择 Git Bash Here 即可再次打开.</li>
<li>   初始化本地博客, 在 Git Bash Here 中输入: <code>hexo init</code></li>
<li>   安装默认依赖包, 在 Git Bash Here 中输入: <code>npm install</code></li>
<li>   生成静态文件, 在 Git Bash Here 中输入: <code>hexo generate</code> 或者命令的缩写 <code>hexo g</code>, 此时网页就创建好了, 下面我们来预览一下博客的样子.</li>
<li>   开启服务, 在 Git Bash Here 中输入 <code>hexo server</code> 或者命令的缩写 <code>hexo s</code>, 服务默认开启网址: <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==">http://localhost:4000<i class="fa fa-external-link-alt"></i></span> , 此时在浏览器中即可预览博客.</li>
</ol>
<p>【注】</p>
<ul>
<li>预览完毕后记得按 <code>Ctrl + C</code> 停止服务.</li>
<li>如果不小心按了<code>Ctrl + C</code> 停止了服务, 再次输入 <code>hexo s</code> 开启服务即可.</li>
<li>如果 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==">http://localhost:4000<i class="fa fa-external-link-alt"></i></span> 无法预览博客, 可能是 4000 端口被占用了, 我们先按 Ctrl + C 停止服务, 然后使用下面的语句切换端口:  <code>hexo server -p 端口号</code> , 这里的端口号从 4000 往上加即可, 如: 4001, 具体使用哪个不用太纠结, 可以预览博客即可.</li>
</ul>
<h1 id="关联-GitHub-和-Hexo"><a href="#关联-GitHub-和-Hexo" class="headerlink" title="关联 GitHub 和 Hexo"></a>关联 GitHub 和 Hexo</h1><p>经过前面两个步骤, 我们已经在本地创建好了博客, 也可以通过本地服务进行预览, 但是这样网页仅仅保存在本地, 网络上的人无法查看的, 此时我们就要将本地博客和 GitHub Pages 关联, 或者说上传到 GitHub 上, 这样所有人都可以查看了.</p>
<h2 id="开启-GitHub-Pages"><a href="#开启-GitHub-Pages" class="headerlink" title="开启 GitHub Pages"></a>开启 GitHub Pages</h2><p>GitHub Pages: 其本来用于介绍托管在 GitHub 上的项目, 由于它的空间免费稳定, 因此适合用来搭建个人博客, 但是有以下注意点:</p>
<ul>
<li>每个 GitHub 账号只能有一个仓库来存放个人主页,</li>
<li>仓库的名字必须是 <code>username.github.io</code>,</li>
<li>通过 <code>http://username.github.io</code> 来访问个人主页,</li>
<li>个人主页的网站内容是在 master 分支下.</li>
</ul>
<p>接下来我们创建个人主页仓库: 在 GitHub 首页右上角头像左侧的加号处, 点击: New repository, 仓库名字必须是: <code>你的 Github 用户名.github.io</code>, 下面选择 Public, 下面的选项是让你是否在仓库中初始化一个 README.md 文件, 自己随意. 最后点击创建仓库, 这样 GitHub Pages 就创建好了.</p>
<h2 id="获取-SSH-密钥"><a href="#获取-SSH-密钥" class="headerlink" title="获取 SSH 密钥"></a>获取 SSH 密钥</h2><p>直达车:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;KurohaKirito&quot;</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;KurohaKirito@gmail.com&quot;</span></span><br><span class="line"><span class="string">ssh-keygen</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">-C</span> <span class="string">&quot;KurohaKirito@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>至此, 我们的本地博客和 GitHub Pages 都准备好了, 下面就可以把网页部署 (上传) 到 GitHub Pages 上了. 在部署之前, 我们先设置一下 SSH 密钥. 因为如果不配置 SSH 密钥, 每次部署本地博客到 GitHub Pages 时, 都要输入 Github 账号密码, 非常繁琐.</p>
<p>获取 SSH 密钥: 如果你是第一次使用 Git, 要先配置 Git 的用户名和邮箱, 在 Git Bash Here 中输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;username&quot;</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;mail&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面的 username 改成你 GitHub 的用户名, mail 改成你 GitHub 的邮箱. 之后再次输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">ssh-keygen</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">-C</span> <span class="string">&quot;mail&quot;</span></span><br></pre></td></tr></table></figure>

<p>mail 要用你自己的 Github 邮箱. 回车后会依次出现三个选项, 直接全部回车即可. 这样 SSH 密钥就生成了, 接下来需要密钥填写到 GitHub 上.</p>
<p>在 C:\Users\用户名\.ssh目录中, 会出现这样两个文件: <code>id_rsa</code> 和 <code>id_rsa.pub</code></p>
<p>打开 <code>id_rsa.pub</code> 文件, 复制里面所有的内容.</p>
<p>之后打开浏览器, 登录 GitHub, 依次点击头像下的 Settings, 左面的 SSH and GPG keys, 右上角的 New SSH key, 填写标题时, 最好和你那个网页文件夹的名字一致, 方便记忆和日后查找.<br>点击 Add SSH key 并且验证 GitHub 密码, 即可完成密钥的添加.</p>
<h2 id="部署本地博客到-GitHub-Pages"><a href="#部署本地博客到-GitHub-Pages" class="headerlink" title="部署本地博客到 GitHub Pages"></a>部署本地博客到 GitHub Pages</h2><p>之前的步骤中 SSH 密钥已经设置好了, 接下来就可以部署本地博客到 Github Pages 了, 在这里不建议直接使用 Git 进行部署, 而是使用 Hexo 中的 Hexo deploy 插件进行一键式部署, 方便快捷.</p>
<p>首先要安装 Hexo deploy 插件, 还是在 Git Bash Here 中输入命令:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>

<p>之后打开网页根目录下的 _config.yml 文件, 文件的末尾是这样的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type:</span><br></pre></td></tr></table></figure>

<p>修改成下面这样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:KurohaKirito/KurohaKirito.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>repo 就是你仓库的地址: 有 SSH 和 HTTPS 两种格式, 你选择哪种都可以. 我选择的是 SSH 格式. 在你仓库页面上点击绿色按钮 <code>Clone or download</code> 即可获得仓库地址.</p>
<p>配置完成之后, 执行部署命令, 还是在 Git Bash Here 中输入命令: <code>hexo deploy</code> 或者命令的缩写: <code>hexo d</code>, 输入 GitHub 用户名, 密码即可.</p>
<p>验证方法: 在浏览器中输入网址: <span class="exturl" data-url="aHR0cHM6Ly/nlKjmiLflkI0uZ2l0aHViLmlvLw==">https://用户名.github.io<i class="fa fa-external-link-alt"></i></span> , 用户名修改为你自己的 Github 用户名, 如果能看到之前博客的样子, 就说明部署成功了!</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="常用-Hexo-命令"><a href="#常用-Hexo-命令" class="headerlink" title="常用 Hexo 命令"></a>常用 Hexo 命令</h2><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hexo help</td>
<td align="left">查看帮助</td>
</tr>
<tr>
<td align="left">hexo -v</td>
<td align="left">查看本地环境</td>
</tr>
<tr>
<td align="left">hexo init</td>
<td align="left">初始化 hexo 目录</td>
</tr>
<tr>
<td align="left">hexo new &quot;postName&quot;</td>
<td align="left">新建文章</td>
</tr>
<tr>
<td align="left">hexo new page &quot;pageName&quot;</td>
<td align="left">新建页面</td>
</tr>
<tr>
<td align="left">hexo gernerate</td>
<td align="left">生成网页</td>
</tr>
<tr>
<td align="left">hexo server</td>
<td align="left">本地预览</td>
</tr>
<tr>
<td align="left">hexo deploy &#x2F; hexo d</td>
<td align="left">部署到远程服务器</td>
</tr>
<tr>
<td align="left">hexo clean</td>
<td align="left">清除缓存 建议每次执行命令前先清理缓存</td>
</tr>
<tr>
<td align="left">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</td>
<td align="left">一键生成部署</td>
</tr>
<tr>
<td align="left">hexo clean ; hexo g ; hexo s</td>
<td align="left">一键生成部署</td>
</tr>
</tbody></table>
<h2 id="hexo-主题"><a href="#hexo-主题" class="headerlink" title="hexo 主题"></a>hexo 主题</h2><p>下面是我搜集的一些主题及其项目开源地址:</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1pFUk9LSVNFS0kvaGV4by10aGVtZS1nYWw=">Gal<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lzY29kZXIvaGV4by10aGVtZS1pbmRpZ28=">Indigo<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1dW1hbi9oZXhvLXRoZW1lLXNwZms=">Spfk<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NtYWNrZ2cvaGV4by10aGVtZS1zbWFja2Rvd24=">Smackdown<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hb2NodW5ndWFuZy9ibGFjay1ibHVl">Black-blue<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NoYW5hTWFpZC9oZXhvLXRoZW1lLXNoYW5h">Shana<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdHRlbi9oZXhvLXRoZW1lLXlpbGlh">Yilia<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpbnRlcmxhbmQxOTg5L2hleG8tdGhlbWUtd2ludGVybGFuZA==">Winterland<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlY2hsYWhvbWEvaGV4by10aGVtZS1va2Nqcw==">OKCjs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpbmc1L2hleG8tdGhlbWUtYW5pbWFzdGFycw==">AnimaStars<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbmV5Y29kZS9jb25leQ==">Coney<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hzaWhvaHVhbmcva2lkZG9jaGFu">Kiddochan<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYW5nbWluZy9sYW5kc2NhcGUtcGx1cw==">Landscapeplus<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">NexT<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">Hexo Themes Net<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="警告与错误的处理"><a href="#警告与错误的处理" class="headerlink" title="警告与错误的处理"></a>警告与错误的处理</h2><h3 id="Warning-LF-will-be-replaced-by-CRLF"><a href="#Warning-LF-will-be-replaced-by-CRLF" class="headerlink" title="Warning: LF will be replaced by CRLF"></a>Warning: LF will be replaced by CRLF</h3><p>问题原因: 不同操作系统所使用的换行符是不一样的:</p>
<ul>
<li><p>Unix &#x2F; Linux 采用换行符 LF 表示下一行 (LF: LineFeed 换行)</p>
</li>
<li><p>Dos &#x2F; Windows 采用 回车 + 换行 CRLF 表示下一行 (CRLF: CarriageReturn LineFeed 回车换行)</p>
</li>
<li><p>Mac OS 采用回车 CR 表示下一行 (CR: CarriageReturn 回车)</p>
</li>
</ul>
<p>在 Git 中, 可以通过以下命令来显示当前你的 Git 中采取哪种对待换行符的方式:</p>
<p><code>git config core.autocrlf</code></p>
<p>此命令会有三种输出: <code>true</code>, <code>false</code>, <code>input</code></p>
<ul>
<li><p>true: Git 会将你 add 的所有文件视为文本文件, 将结尾的 CRLF 转换为 LF, 而 checkout 时会再将文件的 LF 格式转为 CRLF 格式.</p>
</li>
<li><p>false: line endings 不做任何改变, 文本文件保持其原来的样子.</p>
</li>
<li><p>input: add 时 Git 会把 CRLF 转换为 LF, 而 check 时仍旧为 LF, 所以 Windows 操作系统不建议设置此值.</p>
</li>
</ul>
<p>解决办法: 将 core.autocrlf 设为 false 即可解决这个问题, 不过如果你跨平台工作的话, 还是需要考虑一下.</p>
<p>如果你想要将 core autocrlf 设置为 true , 有一个需要慎重的地方, 当你上传一个二进制文件, Git 可能会将二进制文件误以为是文本文件, 从而也会修改你的二进制文件, 从而产生隐患.</p>
<p>如果你不跨平台的话, 进行如下设置即可: <code>git config --global core.autocrlf false</code></p>
<h3 id="Error-validation-failed"><a href="#Error-validation-failed" class="headerlink" title="Error: validation failed"></a>Error: validation failed</h3><p>原因: issue 的 id 有长度限制! 最大长度限制是 50 个字符.</p>
<p>每个 issue 有两个标签, 一个是 gitment, 另一个是 id. 将 id 进行如下配置: <code>id: &#39;&lt;%= page.date %&gt;&#39;</code>, 因为日期是永远不会超出 50 个字符的.</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 3.9.0 + NexT 7.2.0 =&gt; Hexo 5.1.0 + NexT 8.0.0</title>
    <url>/hexo/hexo_update.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="🏳‍🌈惨案"><a href="#🏳‍🌈惨案" class="headerlink" title="🏳‍🌈惨案"></a>🏳‍🌈惨案</h1><p>一个 <font color='red'>Warning</font> 引发的惨案!</p>
<h1 id="升级方式"><a href="#升级方式" class="headerlink" title="升级方式"></a>升级方式</h1><p>全新安装, 因为我不会升级啊~~😂</p>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><p>进入 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git 官方网站<i class="fa fa-external-link-alt"></i></span> 下载安装.</p>
<p>可以使用 <code>git --version</code> 进行验证, 出现版本号就说明成功了.</p>
<h2 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h2><p>进入 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Nodejs 官方网站<i class="fa fa-external-link-alt"></i></span> 下载安装.</p>
<p>尽量选择安装长期支持版本 (LTS), 最新发布版可能会有警告, 甚至有错误发生!</p>
<p>可以使用 <code>node -v</code> 和 <code>npm -v</code> 进行验证, 出现版本号就说明成功了.</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>安装 Hexo 之前, 设置 Hexo 的安装位置. 具体见我的另一篇博客: <a href="https://kuroha.vip/hexo/hexo_blog.html">Hexo + Github Pages 搭建个人博客</a> 这里不再赘述!</p>
<p>安装 Hexo: <strong><code>npm install hexo-cli -g</code></strong></p>
<h2 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h2><ol>
<li><p>   新建文件夹, 放置本地博客, 名称随意. <code>F:\WorkSpace\Hexo</code></p>
</li>
<li><p>   初始化本地博客, 在 Git Bash Here 中输入: <code>hexo init</code></p>
</li>
</ol>
<p>[<strong>注</strong>] <font color='red'><strong>此步骤需要耗费较长一段时间, 我大概用了 25 分钟! 慢慢等吧!</strong></font></p>
<blockquote>
<p><code>hexo init</code> 是这次升级遇到的第一个大坑, 忘记了这个要执行好长一段时间, 好几次自己等不耐烦了, 直接 <code>Ctrl + C</code> 了! 😂</p>
</blockquote>
<ol start="3">
<li>   安装默认依赖包, 在 Git Bash Here 中输入: <code>npm install</code></li>
</ol>
<p>[<strong>注</strong>] 在上一步中大部分的依赖其实已经安装了, 这里只是安装一小部分, 所以很快!</p>
<ol start="4">
<li><p>   生成静态文件, 在 Git Bash Here 中输入: <code>hexo generate</code></p>
</li>
<li><p>   开启服务, 在 Git Bash Here 中输入 <code>hexo server</code></p>
</li>
</ol>
<h2 id="部署-Hexo"><a href="#部署-Hexo" class="headerlink" title="部署 Hexo"></a>部署 Hexo</h2><ol>
<li><p>安装 Hexo deploy 插件, 在 Git Bash Here 中输入: <code>npm install hexo-deployer-git --no-optional</code></p>
</li>
<li><p>在站点配置文件中配置:</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:KurohaKirito/KurohaKirito.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>[<strong>注</strong>] repo 仓库的地址: 有 SSH 和 HTTPS 两种格式, 推荐选择 SSH 格式, 如果选择 Https 格式, <font color='red'>每次发布时都必须输入账号密码</font>, 不嫌麻烦的可以用!</p>
<h2 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h2><blockquote>
<p>这里是第二个大坑, 最新版的 NexT 的仓库已经换地址了, 我还傻乎乎地用之前的地址, 唉...😔</p>
</blockquote>
<ul>
<li><p>2014-2017 &#x3D;&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">https://github.com/iissnan/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>2018-2019 &#x3D;&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">https://github.com/theme-next/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>2020-2020 &#x3D;&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">https://github.com/next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<blockquote>
<p>新版的 NexT 推荐使用 <code>npm install hexo-theme-next --no-optional</code> 进行安装, 作为一个 node_module 存在! 安装之后路径为: node_module&#x2F;hexo-theme-next.</p>
</blockquote>
<blockquote>
<p>新版的 NexT 推荐用户不要修改主题目录下的配置文件, 而是在站点根目录下新建一个 <font color='red'><strong>_config[.主题名称].yml</strong></font> 文件, 作为新的主题配置文件.</p>
</blockquote>
<p><img data-src="/images/hexo/next_theme_config.png" alt="next_theme_config"></p>
<p>可以先从 node_module&#x2F;hexo-theme-next 文件夹中复制一份配置文件出来, 然后按照规则重命名, 最后修改其中的设置即可!</p>
<h1 id="自定义站点配置文件"><a href="#自定义站点配置文件" class="headerlink" title="自定义站点配置文件"></a>自定义站点配置文件</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>修改 theme 的值为 next, 这里的名字要和之前新建主题配置文件时使用的名称一致!</p>
<h2 id="博客网址样式"><a href="#博客网址样式" class="headerlink" title="博客网址样式"></a>博客网址样式</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br></pre></td></tr></table></figure>

<h2 id="关闭-半角字符自动转换全角字符"><a href="#关闭-半角字符自动转换全角字符" class="headerlink" title="关闭 &quot;半角字符自动转换全角字符&quot;"></a>关闭 &quot;半角字符自动转换全角字符&quot;</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">smartypants:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="生成站点地图-谷歌版"><a href="#生成站点地图-谷歌版" class="headerlink" title="生成站点地图 (谷歌版)"></a>生成站点地图 (谷歌版)</h2><ol>
<li><p>安装依赖 <code>hexo-generator-sitemap</code>, 命令: <code>npm install hexo-generator-sitemap --no-optional</code>, 之后生成网站时, 便会自动在根目录生成一个 <code>sitemap.xml</code> 文件!</p>
</li>
<li><p>在 source 文件夹下新建文本文件: <code>robots.txt</code>, 并写入以下内容:</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Disallow:</span></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="string">https://kuroha.vip/sitemap.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><code>User-agent</code> : 定义以下配置对哪些搜索引擎生效.</li>
</ul>
</li>
<li><ul>
<li><code>Allow</code> : 允许抓取的内容.</li>
</ul>
</li>
<li><ul>
<li><code>Disallow</code> : 不允许抓取的内容.</li>
</ul>
</li>
<li><ul>
<li><code>Sitemap</code> : 站点地图的存放地址.</li>
</ul>
</li>
</ul>
<p>重新发布之后, 便可以将站点地图提交给 Google Search 了!</p>
<h1 id="自定义主题配置文件"><a href="#自定义主题配置文件" class="headerlink" title="自定义主题配置文件"></a>自定义主题配置文件</h1><p>配置文件中只需要改改设置就可以出现效果的就不提了, 说一下注意事项:</p>
<h2 id="开启自定义配置"><a href="#开启自定义配置" class="headerlink" title="开启自定义配置"></a>开启自定义配置</h2><p>取消自定义配置文件的注释, 并且要在对应的路径下创建对应的文件.</p>
<h2 id="开启标签-分类-关于菜单"><a href="#开启标签-分类-关于菜单" class="headerlink" title="开启标签, 分类, 关于菜单"></a>开启标签, 分类, 关于菜单</h2><p>取消相应的设置选项后, 必须在 <code>source</code> 文件夹下创建相应的路径, 并创建相应的 markdown 文件, 文件中的内容虽然很简单, 但是也必须添加! <code>comments : false</code> 可以使当前页面禁用评论系统.</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="设置-Favicon-图标"><a href="#设置-Favicon-图标" class="headerlink" title="设置 Favicon 图标"></a>设置 Favicon 图标</h2><p>在 favicon 属性后设置路径之后, 必须在相应的路径下创建图片, 否则找不到文件会报错! 设置侧边栏头像时同理.</p>
<h2 id="添加预计阅读时间功能"><a href="#添加预计阅读时间功能" class="headerlink" title="添加预计阅读时间功能"></a>添加预计阅读时间功能</h2><p>需要安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by13b3JkLWNvdW50ZXI=">hexo-word-counter<i class="fa fa-external-link-alt"></i></span></p>
<p><code>npm install hexo-word-counter --no-optional</code></p>
<p>[<strong>注</strong>] <font color='red'>所有需要安装依赖才能出现效果的, 安装完依赖并设置好之后, 必须清理缓存重新生成才会生效!</font></p>
<p>[<strong>注</strong>] <font color='red'>某些特效需要关闭新版 NexT 中的 Pjax</font></p>
<h2 id="关闭最受欢迎文章功能"><a href="#关闭最受欢迎文章功能" class="headerlink" title="关闭最受欢迎文章功能"></a>关闭最受欢迎文章功能</h2><p>NexT 中有这么一个设置: related_posts, 可以当作 &quot;最近受欢迎的文章&quot;, &quot;相关博客&quot; 或者 &quot;推荐阅读&quot; 使用, 但是由于其依赖有点过时, 推荐关闭此功能!</p>
<h2 id="代码高亮风格设置"><a href="#代码高亮风格设置" class="headerlink" title="代码高亮风格设置"></a>代码高亮风格设置</h2><p>如果使用 <code>Prism</code> 进行代码高亮渲染, 并且选择较高级的一些效果, 需要安装依赖.</p>
<p><code>npm install prism-themes --no-optional</code></p>
<p>并且要在 <strong>站点配置文件</strong> 中将 highlight 设为 false, prismjs 设为 true.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 的 prism 后设置使用的渲染风格.</p>
<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p>需要安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1nZW5lcmF0b3Itc2VhcmNoZGI=">hexo-generator-searchdb<i class="fa fa-external-link-alt"></i></span></p>
<p><code>npm install hexo-generator-searchdb --no-optional</code></p>
<h2 id="音乐播放器-APlayer"><a href="#音乐播放器-APlayer" class="headerlink" title="音乐播放器 APlayer"></a>音乐播放器 APlayer</h2><blockquote>
<p>APlayer 源码地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vZVBsYXllci9BUGxheWVy">APlayer<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>新建目录: <code>source/js/aplayer</code>, 下载并解压源码, 将 <code>dist</code> 文件夹中的四个文件复制到 <code>source/js/aplayer</code> 中.</p>
<p>返回 <code>source/js</code> 文件夹, 新建一个 <code>fixedAplayer.js</code> 文件, 输入以下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">    <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">audio</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;歌曲的名字&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;歌手&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;音乐文件的地址&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;封面图片的地址&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>之后在 <code>source/_data/body-end.njk</code> 中添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="title class_">APlayer</span> 吸底式音乐播放功能--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">aplayer_fixed</span> %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/js/aplayer/APlayer.min.css&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/aplayer/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/fixedAplayer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中写入 <code>aplayer_fixed: true</code>.</p>
<h2 id="视频播放器-DPlayer"><a href="#视频播放器-DPlayer" class="headerlink" title="视频播放器 DPlayer"></a>视频播放器 DPlayer</h2><blockquote>
<p>DPlayer 源码地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vZVBsYXllci9EUGxheWVy">DPlayer<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>新建目录: <code>source/js/dplayer</code>, 下载并解压源码, 将 <code>dist</code> 文件夹中的四个文件复制到 <code>source/js/dplayer</code> 中.</p>
<p>在待添加视频博客的所需位置中添加以下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/dplayer/DPlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dp_update = <span class="keyword">new</span> <span class="title class_">DPlayer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dplayer&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">screenshot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">video</span>:</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;/video/hexo_update/hexo_update.mp4&#x27;</span>, <span class="comment">//视频文件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pic</span>: <span class="string">&#x27;/video/hexo_update/hexo_update.jpg&#x27;</span>, <span class="comment">//视频封面</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义单行代码段样式"><a href="#自定义单行代码段样式" class="headerlink" title="自定义单行代码段样式"></a>自定义单行代码段样式</h2><p>打开 <code>source/_data/styles.styl</code> 文件, 添加对 <code>Code</code> 标签的自定义配置即可. 下面是我博客使用的配置.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 单行代码块</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    // <span class="attribute">color</span>: <span class="number">#978665</span>;</span><br><span class="line">    // <span class="attribute">background</span>: <span class="number">#3B3C3E</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c71585</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fffafa</span>;</span><br><span class="line">    // <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>; // 边框</span><br><span class="line">    // <span class="attribute">border-radius</span>: <span class="number">4px</span>; // 边框圆角</span><br><span class="line">    <span class="attribute">word-break</span>: break-word; // 换行方式</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>; // 占位扩充 (高度, 宽度)</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>; // 左右间隔</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h2><p>打开 <code>source/_data/styles.styl</code> 文件, 添加自定义配置.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 鼠标样式, 格式: *.ani (动态), *.cur (静态)</span><br><span class="line">body &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;/cursor/arrow.cur&#x27;</span>), default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;/cursor/link.cur&#x27;</span>), pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;/cursor/link.cur&#x27;</span>), pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;/cursor/arrow.cur&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;/cursor/arrow.cur&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h2><p>打开 <code>source/_data/variables.styl</code> 文件, 添加自定义配置. 参考: <span class="exturl" data-url="aHR0cHM6Ly9iYW1icm93LmNvbS8yMDIwMDcxOC1oZXhvLW5leHQtZm9udC1zZXR0aW5ncy8=">Hexo NexT 主题的字体更换<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $font-family-chinese 负责调控中文字体, 但优先级最低</span></span><br><span class="line">$font-family-chinese = <span class="string">&quot;Noto Serif SC&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $font-family-base 负责调控全局字体, 主要是不被下面几类包括的文字</span></span><br><span class="line">$font-family-base = $font-family-chinese, sans-serif;</span><br><span class="line">$font-family-base = <span class="title function_">get_font_family</span>(<span class="string">&#x27;global&#x27;</span>), $font-family-chinese, sans-serif <span class="keyword">if</span> <span class="title function_">get_font_family</span>(<span class="string">&#x27;global&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $font-family-logo 负责调控网站标题的字体</span></span><br><span class="line">$font-family-logo = $font-family-base;</span><br><span class="line">$font-family-logo = <span class="title function_">get_font_family</span>(<span class="string">&#x27;title&#x27;</span>), $font-family-base <span class="keyword">if</span> <span class="title function_">get_font_family</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $font-family-headings 负责调控 h1-h6 的字体, 包括标题与文中小标题</span></span><br><span class="line">$font-family-headings = $font-family-base;</span><br><span class="line">$font-family-headings = <span class="title function_">get_font_family</span>(<span class="string">&#x27;headings&#x27;</span>), $font-family-base <span class="keyword">if</span> <span class="title function_">get_font_family</span>(<span class="string">&#x27;headings&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $font-family-posts 负责调控正文字体</span></span><br><span class="line">$font-family-posts = $font-family-base;</span><br><span class="line">$font-family-posts = <span class="title function_">get_font_family</span>(<span class="string">&#x27;posts&#x27;</span>), $font-family-base <span class="keyword">if</span> <span class="title function_">get_font_family</span>(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $font-family-monospace 负责调控代码块的字体</span></span><br><span class="line">$font-family-monospace = consolas, <span class="title class_">Menlo</span>, monospace, $font-family-chinese;</span><br><span class="line">$font-family-monospace = <span class="title function_">get_font_family</span>(<span class="string">&#x27;codes&#x27;</span>), consolas, <span class="title class_">Menlo</span>, monospace, $font-family-chinese <span class="keyword">if</span> <span class="title function_">get_font_family</span>(<span class="string">&#x27;codes&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="添加捉小猫游戏"><a href="#添加捉小猫游戏" class="headerlink" title="添加捉小猫游戏"></a>添加捉小猫游戏</h2><ol>
<li><p>下载捉小猫游戏源文件并解压, 之后将解压好的文件夹 <code>source</code> 和博客目录下的 <code>source</code> 文件夹合并. <span class="exturl" data-url="aHR0cHM6Ly9vZC5say9kL056TmZNamN6TmpZM01UaGYvY2F0Y2hfdGhlX2NhdC43eg==">Catch The Cat<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>在主题配置文件的 menu 处添加新菜单项: 捉小猫! 仅需两步, 大功告成!</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">捉小猫:</span> <span class="string">/catch_the_cat/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-cat</span></span><br></pre></td></tr></table></figure>

<h2 id="鼠标右键菜单-GalMenu"><a href="#鼠标右键菜单-GalMenu" class="headerlink" title="鼠标右键菜单 GalMenu"></a>鼠标右键菜单 GalMenu</h2><ol>
<li><p>下载 GalMenu 源文件并解压, 之后将解压好的文件夹 <code>galmenu</code> 放到博客的 <code>source/js</code> 文件夹下. <span class="exturl" data-url="aHR0cHM6Ly9vZC5say9kL056TmZNamN6TmpZM01UaGYvY2F0Y2hfdGhlX2NhdC43eg==">GalMenu 下载链接<i class="fa fa-external-link-alt"></i></span> 解压密码是本网站首页地址</p>
</li>
<li><p>在主题配置文件 <code>_config.next.yml</code> 中添加配置.</p>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">galmenu:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 动漫菜单</span></span><br><span class="line">  <span class="attr">audio:</span> <span class="literal">true</span> <span class="comment"># 菜单音效</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在 <code>source/_data/body-end.njk</code> 文件中添加配置.</p>
<p> [<strong>注</strong>] 在这里可以自定义菜单项名称, 而且在 audio 标签中可以自定义音效文件名称, 建议不要修改路径. 修改名称后记得一定要在 <code>source/js/galmenu/audio</code> 文件夹中放入自定义的音效资源.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动漫菜单--&gt;</span></span><br><span class="line">&#123;% if theme.galmenu.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;GalMenu GalDropDown&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ring&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menuItem&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:history.go(1);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menuItem&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:$(&#x27;html,body&#x27;).animate(&#123;scrollTop:0&#125;,500);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menuItem&quot;</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:location.reload();&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menuItem&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menuItem&quot;</span>&gt;</span>留言<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:history.go(-1);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;menuItem&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;% if theme.galmenu.audio %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audio&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/galmenu/audio/sao-menu.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.menuItem&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = items.<span class="property">length</span>; i &lt; l; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            items[i].<span class="property">style</span>.<span class="property">left</span> = (<span class="number">50</span> - <span class="number">35</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(- <span class="number">0.5</span> * <span class="title class_">Math</span>.<span class="property">PI</span> - <span class="number">2</span> * (<span class="number">1</span> / l) * i * <span class="title class_">Math</span>.<span class="property">PI</span>)).<span class="title function_">toFixed</span>(<span class="number">4</span>) + <span class="string">&quot;%&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            items[i].<span class="property">style</span>.<span class="property">top</span> = (<span class="number">50</span> + <span class="number">35</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>(- <span class="number">0.5</span> * <span class="title class_">Math</span>.<span class="property">PI</span> - <span class="number">2</span> * (<span class="number">1</span> / l) * i * <span class="title class_">Math</span>.<span class="property">PI</span>)).<span class="title function_">toFixed</span>(<span class="number">4</span>) + <span class="string">&quot;%&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">jQuery</span> || <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;script src=&quot;../js/galmenu/js/jquery.min.js&quot;&gt;&lt;\/script&gt;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/galmenu/js/GalMenu.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;body&#x27;</span>).<span class="title class_">GalMenu</span>(&#123;<span class="string">&#x27;menu&#x27;</span>: <span class="string">&#x27;GalDropDown&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在 <code>source/_data/head.njk</code> 文件内添加 CSS 引用.</p>
<p> [<strong>注</strong>] 在这个 CSS 文件中可以修改菜单图片的文件名, 建议不要修改路径. 修改名称后记得一定要在 <code>source/js/galmenu/img</code> 文件夹中放入自定义的图片资源.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--动漫菜单--&gt;</span></span><br><span class="line">&#123;% if theme.galmenu.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../js/galmenu/css/GalMenu.css&quot;</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>至此大功告成!</p>
<h2 id="鼠标单击之心形图案特效"><a href="#鼠标单击之心形图案特效" class="headerlink" title="鼠标单击之心形图案特效"></a>鼠标单击之心形图案特效</h2><p>在 <code>source/js</code> 下创建 <code>love.js</code> 文件, 内容具体见我的另一篇博客: <a href="https://kuroha.vip/hexo/next_theme_beautify.html">Hexo + NexT 主题美化 (NexT v7.2.0)</a> 这里不再赘述!</p>
<p>之后在 <code>source/_data/body-end.njk</code> 中添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--心形图案效果--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">love</span> %&#125;</span><br><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/love.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中写入 <code>love: true</code>.</p>
<h2 id="鼠标单击之烟花爆炸特效"><a href="#鼠标单击之烟花爆炸特效" class="headerlink" title="鼠标单击之烟花爆炸特效"></a>鼠标单击之烟花爆炸特效</h2><ol>
<li><p>下载 <code>fireworks.js</code> 文件到 <code>source/js</code> 文件夹下</p>
</li>
<li><p>在 <code>source/_data/body-end.njk</code> 中添加:</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--烟花爆炸特效--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">fireworks</span> %&#125;</span><br><span class="line">    &lt;canvas <span class="keyword">class</span>=<span class="string">&quot;fireworks&quot;</span> style=<span class="string">&quot;position:fixed;left:0;top:0;z-index:99999999;pointer-events:none;&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 <strong>主题配置文件</strong> 中写入 <code>fireworks: true</code>.</li>
</ol>
<p><strong>下载地址:</strong> <span class="exturl" data-url="aHR0cHM6Ly9vZC5say9kL056TmZNalV6TURreE1qZGYvZmlyZXdvcmtzLjd6">fireworks.7z<i class="fa fa-external-link-alt"></i></span>, 解压密码是本网站首页地址</p>
<p>[<strong>注</strong>] 都读到这里了, 我想你肯定早就知道了, 想要获取文章中提到的所有资源文件, 只要 F12 就可以了! 😂 当然我还是提供了下载地址的...</p>
<h2 id="页面标题欺诈"><a href="#页面标题欺诈" class="headerlink" title="页面标题欺诈"></a>页面标题欺诈</h2><p>在 <code>source/js</code> 下创建 <code>crash_cheat.js</code> 文件, 内容具体见我的另一篇博客: <a href="https://kuroha.vip/hexo/next_theme_beautify.html">Hexo + NexT 主题美化 (NexT v7.2.0)</a> 这里不再赘述!</p>
<p>之后在 <code>source/_data/body-end.njk</code> 中添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">crashcheat</span> %&#125;</span><br><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/crash_cheat.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中写入 <code>crashcheat: true</code>.</p>
<h2 id="球形标签云"><a href="#球形标签云" class="headerlink" title="球形标签云"></a>球形标签云</h2><p>球形标签云其实就是用这个插件 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29hdDEwMDAuY29tL3RhZ2NhbnZhcy5waHA=">TagCanvas<i class="fa fa-external-link-alt"></i></span> 实现的, 点击进入官网.</p>
<p>进入官网后下载 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29hdDEwMDAuY29tL3RhZ2NhbnZhcy5qcw==">tagcanvas.js<i class="fa fa-external-link-alt"></i></span> 文件, 也可以直接在左面我给出的链接那里 &quot;右键 &#x3D;&gt; 链接另存为&quot;, 保存到: <code>source\js</code> 目录下. 需要的就是这一个 <code>tagcanvas.js</code> 文件!</p>
<p>打开 <code>source/js</code> 文件夹中再新建一个 <code>tagcloud.js</code> 文件, 写入以下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title class_">TagCanvas</span>.<span class="title class_">Start</span>(<span class="string">&#x27;my3DTags&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">textFont</span>: <span class="string">&#x27;Georgia,Optima&#x27;</span>,</span><br><span class="line">                <span class="attr">textColour</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">outlineColour</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">                <span class="attr">weight</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">reverse</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">depth</span>: <span class="number">0.8</span>,</span><br><span class="line">                <span class="attr">maxSpeed</span>: <span class="number">0.05</span>,</span><br><span class="line">                <span class="attr">bgRadius</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">freezeDecel</span>: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">document</span></span><br><span class="line">            .<span class="title function_">getElementById</span>(<span class="string">&#x27;myTags&#x27;</span>)</span><br><span class="line">            .<span class="property">style</span></span><br><span class="line">            .<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>[<strong>题外话</strong>] 新版的 NexT 推荐用户不要再修改主题目录中的任何文件, 虽然我是一个前端纯小白, 但是我也在尽力去遵守这条约定, 但是我发现如果我想要实现这个标签云, 就必须修改主题目录中的文件! 如果有人知道可以不修改主题目录中的文件便可以实现相同的效果, 请务必告知, 十分感谢!</p>
<p>打开文件 <code>node_modules\hexo-theme-next\layout\page.njk</code>, 在这个 <code>&lt;div class=&quot;tag-cloud-tags&quot;&gt;</code> 的前面加上如下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 球形云标签 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myTags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;720&quot;</span> <span class="attr">height</span>=<span class="string">&quot;720&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my3DTags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; tagcloud(&#123;</span><br><span class="line">        min_font   : 16,</span><br><span class="line">        max_font   : 35,</span><br><span class="line">        amount     : 999,</span><br><span class="line">        color      : true,</span><br><span class="line">        start_color: &#x27;black&#x27;,</span><br><span class="line">        end_color  : &#x27;green&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcloud.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;# 普通云标签 #&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中写入 <code>crashcheat: true</code>.<code>tagcanvas: true</code>.</p>
<blockquote>
<p>[<strong>注</strong>] 球形标签云也可以使用 Hexo 的插件 <code>hexo-tag-cloud</code> 来实现, 其实最终都是依赖于 <code>tagcanvas.js</code> 文件的, 而且我尝试  <code>hexo-tag-cloud</code> 后发现我不会改效果...😂 所以还是用了之前的老方法!</p>
<p>另外, 执行上面的操作后, 球形标签云和普通标签云是同时存在的, 如果只想要显示球形标签云, 把后面那个 <code>普通云标签</code> 的 <code>div</code> 标签注释掉就行了. 就像这样:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 普通云标签 #&#125;</span><br><span class="line">&#123;# <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-tags&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; tagcloud(&#123;</span><br><span class="line">      min_font: theme.tagcloud.min,</span><br><span class="line">      max_font: theme.tagcloud.max,</span><br><span class="line">      amount  : theme.tagcloud.amount,</span><br><span class="line">      orderby : theme.tagcloud.orderby,</span><br><span class="line">      order   : theme.tagcloud.order,</span><br><span class="line">      class   : &#x27;tag-cloud&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> #&#125;</span><br></pre></td></tr></table></figure>

<p>[<strong>注</strong>] 如果使用的是 NexT 8.2.2 版本是找不到 <code>node_modules\hexo-theme-next\layout\page.njk</code> 文件的, 而是需要修改 <code>node_modules\hexo-theme-next\layout\_partials\page\tags.njk</code> 文件, 将此文件中的内容全部修改为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-title&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; _p(&#x27;counter.tag_cloud&#x27;, site.tags.length) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;# 球形云标签 #&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myTags&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;720&quot;</span> <span class="attr">height</span>=<span class="string">&quot;720&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my3DTags&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: block;margin: 0 auto;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; tagcloud(&#123;</span><br><span class="line">          min_font   : 16,</span><br><span class="line">          max_font   : 35,</span><br><span class="line">          amount     : 999,</span><br><span class="line">          color      : true,</span><br><span class="line">          start_color: &#x27;black&#x27;,</span><br><span class="line">          end_color  : &#x27;green&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcloud.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;# 球形云标签 #&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-tags&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; tagcloud(&#123;</span><br><span class="line">      min_font: theme.tagcloud.min,</span><br><span class="line">      max_font: theme.tagcloud.max,</span><br><span class="line">      amount  : theme.tagcloud.amount,</span><br><span class="line">      orderby : theme.tagcloud.orderby,</span><br><span class="line">      order   : theme.tagcloud.order,</span><br><span class="line">      class   : &#x27;tag-cloud&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="粒子时钟"><a href="#粒子时钟" class="headerlink" title="粒子时钟"></a>粒子时钟</h2><p>下载文件 <a href="https://kuroha.vip/js/clock.js">clock.js</a>, 可以直接在链接上 &quot;右键 &#x3D;&gt; 链接另存为&quot;, 放到 <code>source/js/</code> 路径下.</p>
<p>之后在 <code>source/_data/sidebar.njk</code> 中添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;# 粒子时钟 #&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">clock</span> %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvasDiyBlock&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:60%;&quot;</span>&gt;</span>您的浏览器不支持 Canvas, 请更换浏览器!<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clock.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中写入 <code>clock: true</code>.</p>
<h2 id="站点运行时间"><a href="#站点运行时间" class="headerlink" title="站点运行时间"></a>站点运行时间</h2><p>下载文件 <a href="https://kuroha.vip/js/website_runtime.js">website_runtime.js</a>, 可以直接在链接上 &quot;右键 &#x3D;&gt; 链接另存为&quot;, 放到 <code>source/js/</code> 路径下.</p>
<p>之后在 <code>source/_data/footer.njk</code> 中添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;# 站点已运行时间 #&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">websiteruntime</span> %&#125;</span><br><span class="line">    &lt;div id=<span class="string">&quot;days&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/website_runtime.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中写入 <code>websiteruntime: true</code>.</p>
<h2 id="萌萌的看板娘"><a href="#萌萌的看板娘" class="headerlink" title="萌萌的看板娘"></a>萌萌的看板娘</h2><ul>
<li>第一种: <code>hexo-helper-live2d</code> 优点: 有声音, 缺点: 无法换装, 无法换模型, 响应事件少.</li>
</ul>
<p>使用方法见官方网址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk">hexo-helper-live2d<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>第二种: <code>live2d-widget</code> 优点: 能换装, 能切换模型, 响应事件多, 缺点: 无声音, 配置较复杂. (现在可能已经有声音了)</li>
</ul>
<p>使用方法见官方网址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0ZXZlbmpvZXpoYW5nL2xpdmUyZC13aWRnZXQ=">live2d-widget<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>第三种: <code>live2d_demo</code> 优点: 能换装, 能切换模型, 响应事件多, 缺点: 无声音, 配置较复杂. (现在可能已经有声音了)</li>
</ul>
<p>使用方法见官方网址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZnaHJzaC9saXZlMmRfZGVtbw==">live2d_demo<i class="fa fa-external-link-alt"></i></span></p>
<p>我是用的是第 3 种 <strong>live2d_demo</strong></p>
<ol>
<li><p>下载 <code>live2d_demo</code>: <span class="exturl" data-url="aHR0cHM6Ly9vZC5say9kL056TmZNalV5TkRjMU5USmYvbGl2ZTJkX2RlbW8uN3o=">live2d_demo<i class="fa fa-external-link-alt"></i></span>, 解压密码是本网站首页地址</p>
</li>
<li><p>解压之后放到 <code>source/js/</code> 目录下, 完成这一步之后, 在 <code>source/js/live2d_demo/</code> 目录下应该有 9 个文件.</p>
</li>
<li><p>在 <code>source/_data/body-end.njk</code> 文件的最后添加:</p>
</li>
</ol>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--萌萌看板娘--&gt;</span></span><br><span class="line">&#123;% if theme.live2d_demo %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/live2d_demo/jquery-ui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- 实现拖动效果，需引入 JQuery UI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/live2d_demo/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- 使用 autoload.js 自动引入看板娘 --&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>最后在 <strong>主题配置文件</strong> 中写入 <code>live2d_demo: true</code>, 启用看板娘!</li>
</ol>
<p>[<strong>注</strong>]</p>
<ol>
<li><p>要定制自己的看板娘, 可以修改 <code>autoload.js</code> 中的参数配置, 还可以在 <code>waifu-tips.json</code> 中修改对话, 这两处的配置足够定制自己独特的看板娘了!</p>
</li>
<li><p>经过以上操作如果还是不能达到效果, 请检查 <code>autoload.js</code> 中的路径设置是否正确! (虽然我已经配置好了, 可以直接拿来用, 不过既然出问题了, 就自己检查一下吧!)</p>
</li>
</ol>
<h1 id="aplayer-音乐效果展示"><a href="#aplayer-音乐效果展示" class="headerlink" title="aplayer 音乐效果展示"></a>aplayer 音乐效果展示</h1><link rel="stylesheet" href="/js/aplayer/APlayer.min.css">
<div id="aplayer_update"></div>
<script type="text/javascript" src="/js/aplayer/APlayer.min.js"></script>

<script>
const aplayer_update = new APlayer(
{
  container: document.getElementById('aplayer_update'),
  //fixed: true, // 吸底模式
  //mini: false, // 迷你模式
  autoplay: false, //自动播放
  theme: 'red', //主题色
  loop: 'all', //循环模式: all one none
  order: 'list', //循环顺序: list random
  preload: 'none', //预加载: auto none metadata
  volume: 0.7, //音量设置 会导致用户设置的自定义音量失效
  //customAudioType: mysudio, //自定义音乐类型
  mutex: true, //播放器之间互斥 当一个在播放时 暂停其他所有播放器
  //lrcType: 3, //歌词类型
  listFolded: false, //false: 列表默认展开 true: 列表默认折叠
  listMaxHeight: 90, //列表最大数目
  audio:
  [
    {
      name: '绯色之空', //歌曲名
      artist: '川田真美', //演唱者
      url: 'https://od.lk/s/NzNfMjUyMzcyNzVf/%E7%B7%8B%E8%89%B2%E3%81%AE%E7%A9%BA.mp3', //音乐文件
      cover: 'https://od.lk/s/NzNfMjUyMzcyODFf/%E7%B7%8B%E8%89%B2%E3%81%AE%E7%A9%BA.jpg', //音乐封面
    },
    {
      name: '光るなら', //歌曲名
      artist: 'Goose house', //演唱者
      url: 'https://od.lk/s/NzNfMjUyMzcyNzdf/%E5%85%89%E3%82%8B%E3%81%AA%E3%82%89.mp3', //音乐文件
      cover: 'https://od.lk/s/NzNfMjUyMzcyNzhf/%E5%85%89%E3%82%8B%E3%81%AA%E3%82%89.jpg', //音乐封面
    },
  ]
});
</script>

<h1 id="dplayer-视频效果展示"><a href="#dplayer-视频效果展示" class="headerlink" title="dplayer 视频效果展示"></a>dplayer 视频效果展示</h1><div id="dplayer"></div>
<script src="/js/dplayer/DPlayer.min.js"></script>

<script>
const dp_update = new DPlayer({
    container: document.getElementById('dplayer'),
    screenshot: true,
    video:
    {
        url: '/video/hexo_update.mp4',
        pic: '/video/hexo_update.jpg',
        //thumbnails: 'thumbnails.jpg',
    },
    // 外挂字幕
    // subtitle: {
    //     url: 'webvtt.vtt',
    // },
    // 弹幕
    // danmaku: {
    //     id: 'demo',
    //     api: 'https://api.prprpr.me/dplayer/',
    // },
});
</script>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity - 2D 精灵 和 3D 物体的渲染顺序</title>
    <url>/unity/unity_render_order.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h1><p>我在学习 SiKi 学院出的一款捕鱼达人的游戏教程时, 教程中使用了一个 3D 物体, 在其上面制作水波纹特效, 为了容易观察渲染层级, 我还特意将同一个层级 (Sorting Layer) 的精灵全部放到同一个 Z 位置上, 一共分了四层.</p>
<p><img data-src="/images/unity/unity_render_order_1.png" alt="3D 游戏物体被遮挡"></p>
<p>但是从相机预览效果中可以看出, 水波纹效果被遮挡了. 在这个场景中所有的 Canvas 的渲染层级都是一个自定义的 UI 层, 但是这个 3D 游戏物体的层级该怎么设置呢? 根本找不到设置的地方啊? 😥</p>
<h1 id="MeshRenderer-与-SpriteRenderer-的渲染顺序"><a href="#MeshRenderer-与-SpriteRenderer-的渲染顺序" class="headerlink" title="MeshRenderer 与 SpriteRenderer 的渲染顺序"></a>MeshRenderer 与 SpriteRenderer 的渲染顺序</h1><p>3D 游戏物体使用的是 MeshRenderer, 2D 精灵使用的是 SpriteRenderer, 两者都是继承自 Renderer, 在 Renderer 中渲染层级是 <code>sortingLayerName</code> 字段, 渲染顺序是 <code>sortingOrder</code> 字段.</p>
<ol>
<li><p>SpriteRenderer 中的 <code>Sorting Layer</code> 对应的是 sortingLayerName 字段, <code>Order in Layer</code> 对应的是 sortingOrder 字段.</p>
</li>
<li><p>在 MeshrRenderer 中这两个字段并没有做处理, 只是在面板上隐藏了而已, 因此可以在脚本中直接使用.</p>
 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> orderinLayer = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> sortingLayer = <span class="string">&quot;UI&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MeshRenderer meshRenderer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    meshRenderer = GetComponent&lt;MeshRenderer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设定 3D 游戏物体的渲染层级</span></span><br><span class="line">    meshRenderer.sortingLayerName = sortingLayer;</span><br><span class="line">    meshRenderer.sortingOrder = orderinLayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 ParticleSystem 中同样也有 Renderer 组件控制粒子特效的渲染顺序, 同样可以使用脚本控制, 也可以直接在面板上设置.</p>
 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> orderinLayer = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> sortingLayer = <span class="string">&quot;UI&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ParticleSystem[] particleSystems;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设定粒子特效的渲染层级</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; particleSystems.Length; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        rendererParticle = particleSystems[index].GetComponent&lt;Renderer&gt;();</span><br><span class="line">        rendererParticle.sortingLayerName = sortingLayer;</span><br><span class="line">        rendererParticle.sortingOrder = orderinLayer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="问题解决后效果"><a href="#问题解决后效果" class="headerlink" title="问题解决后效果"></a>问题解决后效果</h1><p>使用上面脚本中的设置就可以让 MeshRenderer 也参与到 2D UI 的排序中来了, 效果还是不错的.</p>
<p><img data-src="/images/unity/unity_render_order_2.png" alt="修复后效果"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82YmNjZjc5ZmEzNjc=">SpriteRenderer 与 MeshRenderer的渲染排序层级<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>如何购买一款理想的路由器</title>
    <url>/kuroha/how_to_buy_a_router.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="考虑因素一-频段与带宽"><a href="#考虑因素一-频段与带宽" class="headerlink" title="考虑因素一: 频段与带宽"></a>考虑因素一: 频段与带宽</h1><h2 id="单频-双频-三频"><a href="#单频-双频-三频" class="headerlink" title="单频, 双频, 三频"></a>单频, 双频, 三频</h2><p>早期的无线路由器只支持 2.4GHz 一个频段, 现在的主流无线路由器都支持 2.4GHz 和 5GHz 两个频段, 就是所谓的<strong>双频路由器</strong>. 也有部分高端路由器支持一个 2.4GHz 和两个 5GHz 频段, 就是<strong>三频路由器</strong>.</p>
<ul>
<li><strong>单频路由器</strong>: 只支持 2.4GHz 一个频段.</li>
<li><strong>双频路由器</strong>: 支持一个 2.4GHz 和一个 5Ghz 共两个频段.</li>
<li><strong>三频路由器</strong>: 支持一个 2.4GHz 和两个 5GHz 共三个频段.</li>
</ul>
<h2 id="2-4GHz-和-5GHz-两种频段各自的优缺点"><a href="#2-4GHz-和-5GHz-两种频段各自的优缺点" class="headerlink" title="2.4GHz 和 5GHz 两种频段各自的优缺点"></a>2.4GHz 和 5GHz 两种频段各自的优缺点</h2><h3 id="电磁波的物理特性是-波长越长-传播过程中的衰减越少"><a href="#电磁波的物理特性是-波长越长-传播过程中的衰减越少" class="headerlink" title="电磁波的物理特性是 &quot;波长越长, 传播过程中的衰减越少&quot;"></a>电磁波的物理特性是 &quot;波长越长, 传播过程中的衰减越少&quot;</h3><p>2.4GHz 的信号波长长, 所以<strong>衍射</strong>和<strong>反射</strong>能力很强, 在室内环境下比 5GHz 的信号覆盖的范围更广, 也就是常说的<strong>穿墙能力强</strong>. 缺点是目前工作在这个频段的设备太多, 相互干扰比较严重, 大家互相抢占带宽, 速度会比较慢.</p>
<p>5GHz 的信号波长短, 所以在与路由器相同距离的情况下, 5GHz 的信号强度比 2.4GHz 的信号强度弱.  但是, 由于 5GHz 支持新的通信协议并且目前工作在这个频段的设备较少, 所以速度要快很多.</p>
<p><img data-src="/images/life/how_to_buy_a_router_1.png" alt="2.4GHz 和 5GHz"></p>
<p>由此可以得出结论:<br><font color='red'>**信号强速度就快是不对的! **</font></p>
<p>比如一个有 2 格信号的 5GHz WIFI 和一个有 4 格信号的 2.4GHz WIFI, 那么 4 格信号的 WIFI 速度就比 2 格信号的 WIFI 速度快. 这是不对的! 不对的! 不对的!</p>
<h2 id="带宽是-信道的宽度"><a href="#带宽是-信道的宽度" class="headerlink" title="带宽是 &quot;信道的宽度&quot;"></a>带宽是 &quot;信道的宽度&quot;</h2><p>因为有一些协议支持将相邻的信道绑在一起以增加带宽(信道宽度), 所以不同协议下的带宽(信道宽度)有所不同. 再加上高通公司还出了 QAM 技术, 也会增加带宽(信道宽度), 所以带宽(信道宽度)要具体情况具体分析.
 </p>
<h1 id="考虑因素二-协议"><a href="#考虑因素二-协议" class="headerlink" title="考虑因素二: 协议"></a>考虑因素二: 协议</h1><h2 id="IEEE-802-11-协议簇是用于无线局域网通用的标准"><a href="#IEEE-802-11-协议簇是用于无线局域网通用的标准" class="headerlink" title="IEEE 802.11 协议簇是用于无线局域网通用的标准."></a>IEEE 802.11 协议簇是用于无线局域网通用的标准.</h2><p>常用的协议包括:</p>
<ul>
<li><strong>802.11a</strong>: 工作频率为 5GHz, 最大原始数据传输率为 54Mb&#x2F;s.</li>
<li><strong>802.11b</strong>: 其载波的频率为 2.4GHz, 可提供 1, 2, 5.5 及 11Mbit&#x2F;s 的多重传送速度.</li>
<li><strong>802.11g</strong>: 其载波的频率为 2.4GHz（跟802.11b相同）, 共14个频段, 原始传送速度为 54Mbit&#x2F;s, 净传输速度约为 24.7Mbit&#x2F;s（跟802.11a相同）. 802.11g 的设备向下与 802.11b 兼容.</li>
<li><strong>802.11n</strong>: 增加了对 MIMO (多用户输入多用户输出) 的支持, 允许 40MHz 的无线频宽, 最大传输速度理论值为 600Mbit&#x2F;s.</li>
<li><strong>802.11ac</strong>: 通过 5GHz 频带进行无线局域网通信. 理论上:</li>
<li><ul>
<li>1: 进行多站式无线通信, 它能够提供最少每秒 1 Gbit&#x2F;s 的带宽.</li>
</ul>
</li>
<li><ul>
<li>2: 进行单信道无线通信, 它能够提供最少每秒 500 Mbit&#x2F;s 的带宽.</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">协议</th>
<th align="right">常见速率(单信道)</th>
<th align="center">2.4GHZ</th>
<th align="center">5GHZ</th>
</tr>
</thead>
<tbody><tr>
<td align="left">802.11a</td>
<td align="right">54 Mbit&#x2F;s</td>
<td align="center"></td>
<td align="center">支持</td>
</tr>
<tr>
<td align="left">802.11b</td>
<td align="right">11 Mbit&#x2F;s</td>
<td align="center">支持</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">802.11g</td>
<td align="right">54 Mbit&#x2F;s</td>
<td align="center">支持</td>
<td align="center"></td>
</tr>
<tr>
<td align="left">802.11n</td>
<td align="right">72.2 Mbit&#x2F;s</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="left">802.11ac</td>
<td align="right">433.3 Mbit&#x2F;s</td>
<td align="center"></td>
<td align="center">支持</td>
</tr>
</tbody></table>
<h1 id="考虑因素三-SU-MIMO-和-MU-MIMO"><a href="#考虑因素三-SU-MIMO-和-MU-MIMO" class="headerlink" title="考虑因素三: SU-MIMO 和 MU-MIMO"></a>考虑因素三: SU-MIMO 和 MU-MIMO</h1><ul>
<li><p><strong>SU-MIMO</strong> 是 Single-User Multiple-Input Multiple-Output 的缩写, 即: <strong>单用户多输入多输出技术</strong>. 简称 MIMO, 即:  Multiple-Input Multiple-Output, 多输入多输出技术. 能利用发射端的多个天线各自独立发送信号, 同时在接收端用多个天线接收并恢复原信息.</p>
</li>
<li><p>MIMO 技术可以成倍地增加带宽. 假设发射端和接收端都有一组天线, 记做 1x1, 此时的带宽为 x. 那么如果发射端和接收端各有 2 组天线, 且都支持MIMO, 记做 2x2, 那么此时的带宽就变成了 2x.</p>
</li>
<li><p>MIMO 也包含旧的 SIMO（单输入多输出系统）和 MISO（多输入单输出系统）. SIMO 和 MISO 的好处是可以增加信号的灵敏度.</p>
</li>
<li><p><strong>MU-MIMO</strong> 是 Multi-User Multiple-Input Multiple-Output 的缩写, 即: <strong>多用户多输入多输出技术</strong>. 只有 802.11ac Wave 2 及以上协议才支持的一种技术, 可以让路由器同时和多个终端建立联系, 并且做到多个终端互不干扰, 最重要的是只需发射端支持即可.</p>
</li>
<li><p>【注】SU-MIMO 路由器每次只连接一个设备, 但它会在所有的连接设备中快速的切换, 给人一种好像同时连接了多个设备一样, 但其实同一时刻只连接一个设备. 而 MU-MIMO 路由器就可以真正地做到同时连接多个设备.</p>
</li>
</ul>
<h1 id="考虑因素四-调制方式"><a href="#考虑因素四-调制方式" class="headerlink" title="考虑因素四: 调制方式"></a>考虑因素四: 调制方式</h1><h2 id="正交幅度调制-QAM-即-Quadrature-Amplitude-Modulation"><a href="#正交幅度调制-QAM-即-Quadrature-Amplitude-Modulation" class="headerlink" title="正交幅度调制: QAM 即: Quadrature Amplitude Modulation"></a>正交幅度调制: QAM 即: Quadrature Amplitude Modulation</h2><p>正交幅度调制 (QAM) 即: Quadrature Amplitude Modulation, 它是一种在两个正交载波上进行幅度调制的调制方式. 这两个载波通常是相位差为 π&#x2F;2 的正弦波, 因此被称作正交载波.</p>
<ul>
<li>802.11n 使用 64-QAM 在 40MHz 带宽下速率可以达到 150Mb&#x2F;s.</li>
<li>802.11ac 使用 256-QAM 在 80MHz 带宽下速率可以达到 433.3Mb&#x2F;s.</li>
</ul>
<p>高通推出了一种调制方案:</p>
<ul>
<li><p>对 802.11n 协议的信号进行 256-QAM 调制, 突破了协议限制的最高速率, 可以达到 200M, 称为 Turbo QAM.</p>
</li>
<li><p>对802.11ac 协议信号进行 1024-QAM 调制, 突破了协议限制的最高速率, 可达到 541.7M, 称为 Nitro QAM.</p>
</li>
</ul>
<p>要使用这种技术, 需要<strong>发射端</strong>和<strong>接收端</strong>都支持才可以.</p>
<h1 id="部分-TP-Link-路由器参数"><a href="#部分-TP-Link-路由器参数" class="headerlink" title="部分 TP-Link 路由器参数"></a>部分 TP-Link 路由器参数</h1><table>
<thead>
<tr>
<th align="left">型号</th>
<th align="center">MU-MIMO</th>
<th align="center">Turbo QAM</th>
<th align="center">千兆</th>
<th align="center">2.4G 天线</th>
<th align="center">5G 天线</th>
<th align="right">2.4G 带宽</th>
<th align="right">5G 带宽</th>
<th align="right">实际带宽</th>
<th align="right">宣传带宽</th>
</tr>
</thead>
<tbody><tr>
<td align="left">WR742N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="right">150 Mb&#x2F;s</td>
<td align="right">0 Mb&#x2F;s</td>
<td align="right">150 Mb&#x2F;s</td>
<td align="right">150 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WR890N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">3</td>
<td align="center">0</td>
<td align="right">450 Mb&#x2F;s</td>
<td align="right">0 Mb&#x2F;s</td>
<td align="right">450 Mb&#x2F;s</td>
<td align="right">450 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WDR5600</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">3</td>
<td align="center">1</td>
<td align="right">450 Mb&#x2F;s</td>
<td align="right">433 Mb&#x2F;s</td>
<td align="right">889 Mb&#x2F;s</td>
<td align="right">900 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WDR6300</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="right">300 Mb&#x2F;s</td>
<td align="right">433X2 Mb&#x2F;s</td>
<td align="right">1166 Mb&#x2F;s</td>
<td align="right">1200 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WDR6500</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">3</td>
<td align="center">2</td>
<td align="right">450 Mb&#x2F;s</td>
<td align="right">433X2 Mb&#x2F;s</td>
<td align="right">1316 Mb&#x2F;s</td>
<td align="right">1300 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WDR7500</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">3</td>
<td align="center">3</td>
<td align="right">450 Mb&#x2F;s</td>
<td align="right">433X3 Mb&#x2F;s</td>
<td align="right">1749 Mb&#x2F;s</td>
<td align="right">1750 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WDR8500</td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">N</td>
<td align="center">3</td>
<td align="center">4</td>
<td align="right">450 Mb&#x2F;s</td>
<td align="right">433X4 Mb&#x2F;s</td>
<td align="right">2182 Mb&#x2F;s</td>
<td align="right">2200 Mb&#x2F;s</td>
</tr>
<tr>
<td align="left">WDR8600</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">4</td>
<td align="center">4</td>
<td align="right">800 Mb&#x2F;s</td>
<td align="right">433X4 Mb&#x2F;s</td>
<td align="right">2532 Mb&#x2F;s</td>
<td align="right">2600 Mb&#x2F;s</td>
</tr>
</tbody></table>
<h1 id="总结-如何选择路由器"><a href="#总结-如何选择路由器" class="headerlink" title="总结: 如何选择路由器"></a>总结: 如何选择路由器</h1><h2 id="宽带速度"><a href="#宽带速度" class="headerlink" title="宽带速度"></a>宽带速度</h2><ul>
<li>如果宽带速度大于 100Mb&#x2F;s, 就一定要选择具有千兆有线接口的路由器.</li>
<li>如果有 NAS 这种需要高速连接的设备, 也要选择具有千兆有线接口的路由器.</li>
<li>【注】现在的路由器都宣称 &quot;千兆路由&quot;, 这个<strong>千兆</strong>其实指的是无线速度, 就是从路由器向终端设备传输的速度. 但是我们这里所说的 &quot;千兆&quot; 是指有线速度, 从光猫向路由器传输的速度, 就是 WAN 口和 LAN 口的速度.</li>
</ul>
<p><img data-src="/images/life/how_to_buy_a_router_2.png" alt="&quot;千兆路由&quot; 与 千兆路由"></p>
<p>如上图左面这一款路由器, 它只有无线支持千兆, 但是有线并不支持千兆, 这样其实是没啥用的. 假设你家里网线的带宽为 200 Mb&#x2F;s, 那么其中 100 Mb&#x2F;s 的带宽就浪费掉了, 因为路由器的有线接口并不支持千兆. 因此我们需要购买千兆路由的话, 自然要选择右面这一款.</p>
<h2 id="无线频段"><a href="#无线频段" class="headerlink" title="无线频段"></a>无线频段</h2><ul>
<li><strong>双频路由</strong>: 这是目前市场的主流, 支持 802.11ac 的终端也越来越多, 所以推荐购买双频路由.</li>
<li><strong>三频路由</strong>: 现在这种还算是新产品, 价格昂贵! 所以......</li>
<li><strong>单频路由</strong>: 除非特别原因已经不推荐购买了.</li>
</ul>
<h2 id="千万不要一味追求高端"><a href="#千万不要一味追求高端" class="headerlink" title="千万不要一味追求高端"></a>千万不要一味追求高端</h2><h3 id="路由器在实际使用中是很难达到理论最高速度的"><a href="#路由器在实际使用中是很难达到理论最高速度的" class="headerlink" title="路由器在实际使用中是很难达到理论最高速度的."></a>路由器在实际使用中是很难达到理论最高速度的.</h3><ul>
<li>因为会有其他无线路由器的信号干扰</li>
<li>因为终端设备 (手机, 空调, 冰箱, 电脑等可以连接路由器 WiFi 的设备) 并没有那么多组天线支持 MIMO. 一般来说低端手机是 1 组天线, iPhone 是2 组, iMac 和一些高端笔记本是 3 组, 支持 4 组天线的终端屈指可数.<br>所以根本没有必要刻意追求高端路由器, 一般来说 2.4GHz 和 5GHz 各有 2 组天线, 即标称 1200M 的路由器已经足够一般家庭日常使用.</li>
<li>若终端多, 则可以适度提高选购型号<br>因为高端路由内存大, CPU 性能好, 能够保证在多个设备连接的场景下也不会卡顿.</li>
</ul>
<h1 id="噱头-常见误区"><a href="#噱头-常见误区" class="headerlink" title="噱头 (常见误区)"></a>噱头 (常见误区)</h1><h2 id="天线内置与外置"><a href="#天线内置与外置" class="headerlink" title="天线内置与外置! ?"></a>天线内置与外置! ?</h2><p>结论1: <font color='red'><strong>天线内置或外置并不影响信号的强度</strong></font></p>
<p>国内市场消费者更倾向于购买多外置天线的路由器, 动辄 6 个以上外置天线. 在这点上 TP-Link 品牌尤其明显. 其在国内的产品, 300 元就能做到外置 6 天线, 而其在国外的产品, 价格 2000+ 的高端产品也只是 3 个可见的外置天线. 但显然后者的信号更强, 更稳.</p>
<p>结论2: <font color='red'><strong>外置天线的数量和信号的强度没有正相关</strong></font></p>
<p>结论3: <font color='red'><strong>全部天线的数量和信号的强度正相关 ( 天线数量 &#x3D; 内置天线数量 + 外置天线数量 )</strong></font></p>
<p><img data-src="/images/life/how_to_buy_a_router_3.png" alt="外置天线的数量和信号的强度没有正相关"></p>
<h2 id="USB-接口"><a href="#USB-接口" class="headerlink" title="USB 接口! ?"></a>USB 接口! ?</h2><p>这个通常出现在中高端路由器上, 一般是用来接存储设备或打印设备的.</p>
<p>考虑到我国家庭的打印机保有量, 就不提打印设备了. 大家一般都是挂移动硬盘来下载电影, 起到一个低端 NAS 的作用.</p>
<p>但由于路由器的芯片计算能力比较差, 通常 IO 性能都比较弱. 甚至有些路由器由于设计问题, USB3.0 接口太靠近 2.4GHz 天线, 反而影响了 2.4GHz 信号, 这就有点得不偿失了.</p>
<p>结论4: <font color='red'>**目前 USB 接口功能纯属画蛇添足! **</font></p>
<h2 id="智能路由"><a href="#智能路由" class="headerlink" title="智能路由! ?"></a>智能路由! ?</h2><p>路由器其实可以看做是一个嵌入式系统, 一般来说, 这个系统在出厂预装后就很少再有更新, 厂商也很少升级.</p>
<p>在某个事件后, 大神们明白了路由器的系统是如何操作路由器硬件的, 于是就有了第三方固件. 第三方固件的好处是可以支持更多的功能, 比如去广告, 科学上网等. 常见的第三方固件有 <strong>openwrt padavan ddwrt</strong> 等. 通常来说刷第三方固件都会让你的路由变得不稳定, 但是如果你是魔法师的话, 还有什么可畏惧的呢.</p>
<p>因此目前国内市场上的一些所谓 &quot;智能路由&quot;, 都是基于 openwrt 系统, 加上一些插件和管理 APP 而已. 本质上就是 &quot;非智能路由&quot; 刷了第三方固件而已, 你可以近似理解为安卓手机的刷机, 苹果手机的越狱.</p>
<p>结论5: <font color='red'>**智能路由? 对于爱折腾的人来说, 这就是在浪费钱, 对于不爱折腾的人来说, 这就是一个扣分项. **</font></p>
]]></content>
      <categories>
        <category>LifeTips</category>
      </categories>
      <tags>
        <tag>生活知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + NexT 主题美化 (NexT v7.2.0)</title>
    <url>/hexo/next_theme_beautify.html</url>
    <content><![CDATA[<blockquote>
<p>博主的金玉良言: 关于博客的样式, 自己感觉差不多就行了, 这真的是一个无底洞! 尤其是当你像我一样有强迫症的时候, 这也想要, 那也想要, 哇, 那滋味, 别提多酸爽了!</p>
</blockquote>
<span id="more"></span>

<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>说实话, 默认的 Hexo 主题我认为不好看, 所以我就上网搜索 Hexo 好看的主题, 最后发现, 最受欢迎的, 也是用的人最多的就是 NexT 主题了. 但是我想了一下, 既然用的人最多, 那么撞车的几率不就很高吗, 那样就没有 <strong>独一无二</strong> 的感觉了, 所以我坚决不用! ~~真香! ~~</p>
<p>其实用 NexT 主题是有很大的一个优势的, 因为用户多, 所以教程资料好找啊, 一找一大片, 不像我之前用的 <code>Shana</code> 和 <code>Gal</code> 主题, 教程? 不存在的!</p>
<p>在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQ=">NexT 项目地址 2018<i class="fa fa-external-link-alt"></i></span> 处可以找到 NexT 主题. <code>hexo-theme-next</code> 就是主题项目, 其他的是 NexT 主题的插件项目. 进入 <code>hexo-theme-next</code> 项目, 里面详细说明了如何安装, 启用主题, 这里不再赘述.</p>
<h2 id="NexT-项目地址"><a href="#NexT-项目地址" class="headerlink" title="NexT 项目地址"></a>NexT 项目地址</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">2014-2017<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">https://github.com/iissnan/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">2018-2019<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">https://github.com/theme-next/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">2020-NOW<i class="fa fa-external-link-alt"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0">https://github.com/next-theme/hexo-theme-next<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<blockquote>
<p><a href="%E5%88%AB%E5%BF%98%E4%BA%86%E5%9C%A8%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%96%87%E4%BB%B6">注</a> 我在使用 NexT 主题之前, 也使用过几个其他的主题, 在这里也和小伙伴们说一下, 都是比较偏二次元风的, 毕竟我的网站名就是 <strong>&quot;二次元游宅客&quot;</strong> 嘛, 不过最后还是觉得太花里胡哨不好, 眼睛疼!</p>
<ul>
<li><strong>萌娘 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1pFUk9LSVNFS0kvaGV4by10aGVtZS1nYWw=">Gal<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong>灼眼的夏娜 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NoYW5hTWFpZC9oZXhvLXRoZW1lLXNoYW5h">Shana<i class="fa fa-external-link-alt"></i></span></strong></li>
<li><strong>埃罗芒阿老师 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RJWWdvZC9oZXhvLXRoZW1lLXNhZ2lyaQ==">Sagiri<i class="fa fa-external-link-alt"></i></span></strong></li>
</ul>
</blockquote>
<h1 id="知识预备"><a href="#知识预备" class="headerlink" title="知识预备"></a>知识预备</h1><p>Hexo 博客的配置文件有两个, <strong>站点配置文件</strong> 和 <strong>主题配置文件</strong>, 站点配置文件在博客根目录中</p>
<p><code>F:\WorkSpace\HexoBlog\_config.yml</code></p>
<p>主题配置文件在相应的主题文件夹中</p>
<p><code>F:\WorkSpace\HexoBlog\themes\next\_config.yml</code></p>
<h1 id="自定义站点配置文件"><a href="#自定义站点配置文件" class="headerlink" title="自定义站点配置文件"></a>自定义站点配置文件</h1><p>我们之前创建的本地博客只有一个空的模板, 还没有进行自定义, 下面我们来设置一下我们博客的标题, 副标题, 描述等等.</p>
<p>打开本地博客根目录下的 _config.yml 文件, 这个文件就是网站的配置文件.</p>
<p>下面是基础设置的介绍:</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">含义</th>
<th align="left">本人设置</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Title</td>
<td align="left">网站标题</td>
<td align="left">二次元游宅客</td>
</tr>
<tr>
<td align="left">Subtitle</td>
<td align="left">网站副标题</td>
<td align="left">Sword Art Online</td>
</tr>
<tr>
<td align="left">Description</td>
<td align="left">网站描述</td>
<td align="left">一个热爱二次元和游戏开发的宅极客!</td>
</tr>
<tr>
<td align="left">Author</td>
<td align="left">您的昵称</td>
<td align="left">Kuroha</td>
</tr>
<tr>
<td align="left">Language</td>
<td align="left">网站语言</td>
<td align="left">zh-CN</td>
</tr>
<tr>
<td align="left">Timezone</td>
<td align="left">网站时区</td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li>Timezone: 留空的话, Hexo 会使用本地电脑的时区和时区列表.</li>
<li>Description: 用于 SEO（搜索引擎优化）, 告诉搜索引擎一个关于你博客的简单描述, 通常建议在其中包含网站的关键词.</li>
<li>Author: 显示博客中文章的作者.</li>
<li><strong>含义</strong>部分是<strong>常见的</strong>解释, 不同的博客主题或许会有不同的用法, 具体见你使用的网页主题的简介.</li>
</ul>
<p>根据自己的情况修改上面的设置即可.</p>
<p>修改 theme的值为: next, 即可启用 NexT 主题. 前提是你已经安装了. ~~这不废话吗! ~~</p>
<h1 id="自定义主题配置文件"><a href="#自定义主题配置文件" class="headerlink" title="自定义主题配置文件"></a>自定义主题配置文件</h1><p>其实默认的 NexT 主题就已经很漂亮了, 不过呢, 为了实现更好的效果, 下面我们就开始 NexT 主题的美化.</p>
<h2 id="开启自定义-swig-文件功能"><a href="#开启自定义-swig-文件功能" class="headerlink" title="开启自定义 swig 文件功能"></a>开启自定义 swig 文件功能</h2><p>将 <code>custom_file_path:</code> 属性下面的值全部取消注释, 并且在<strong>网站根目录</strong>下的 source 文件夹中新建 <code>_data</code> 文件夹, 注意不是在主题根目录下的 source 文件夹中新建. 之后在 <code>_data</code> 文件夹中将对应的所有文件全部手动创建好(因为不会自动创建). 之后如果要自定义样式, 直接修改这些文件就行了.</p>
<h2 id="开启-RSS-订阅"><a href="#开启-RSS-订阅" class="headerlink" title="开启 RSS 订阅"></a>开启 RSS 订阅</h2><p>首先安装依赖: <code>npm install --save hexo-generator-feed</code></p>
<p>在主题配置文件中搜索 rss 设置为: <code>rss: /atom.xml</code></p>
<h2 id="设置地址栏的-Favicon-图标"><a href="#设置地址栏的-Favicon-图标" class="headerlink" title="设置地址栏的 Favicon 图标"></a>设置地址栏的 Favicon 图标</h2><p>在主题配置文件中, 搜索: favicon 属性, 修改为自定义值, 下面是我的设置:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/sao-16x16.png</span><br><span class="line">  medium: /images/sao-32x32.png</span><br></pre></td></tr></table></figure>

<p>之后根据你的设置, 在主题的 Source&#x2F;images 文件夹中添加相应的文件即可.</p>
<p>[<strong>注</strong>] 文件名和后缀要和配置文件中的保持一致</p>
<h2 id="博客网站页脚设置"><a href="#博客网站页脚设置" class="headerlink" title="博客网站页脚设置"></a>博客网站页脚设置</h2><p>找到 footer 属性, 修改为自定义值, 下面是我的设置:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">footer<span class="punctuation">:</span></span><br><span class="line">  since<span class="punctuation">:</span> <span class="number">2019</span></span><br><span class="line">  icon<span class="punctuation">:</span></span><br><span class="line">    # 效果<span class="punctuation">:</span> 一颗跳动的小红心</span><br><span class="line">    name<span class="punctuation">:</span> heart</span><br><span class="line">    animated<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    color<span class="punctuation">:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">  copyright<span class="punctuation">:</span></span><br><span class="line">    # 效果<span class="punctuation">:</span> 由 Hexo 强力驱动</span><br><span class="line">  powered<span class="punctuation">:</span></span><br><span class="line">    enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    version<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  theme<span class="punctuation">:</span></span><br><span class="line">    # 效果<span class="punctuation">:</span> 主题-NexT</span><br><span class="line">    enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    version<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  beian<span class="punctuation">:</span></span><br><span class="line">    # 效果<span class="punctuation">:</span> 显示备案</span><br><span class="line">    enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    icp<span class="punctuation">:</span></span><br></pre></td></tr></table></figure>

<h2 id="在文章末尾添加创作协议"><a href="#在文章末尾添加创作协议" class="headerlink" title="在文章末尾添加创作协议"></a>在文章末尾添加创作协议</h2><p>在主题的配置文件中, 搜索: creative_commons, 修改为自定义值, 强烈建议修改前阅读: <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL3NoYXJlLXlvdXItd29yay9saWNlbnNpbmctdHlwZXMtZXhhbXBsZXM=">知识共享许可<i class="fa fa-external-link-alt"></i></span> , 下面是我的配置, 建议使用 <code>by-nc-sa</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">creative_commons<span class="punctuation">:</span></span><br><span class="line">  license<span class="punctuation">:</span> by-nc-sa</span><br><span class="line">  sidebar<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  post<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  language<span class="punctuation">:</span></span><br></pre></td></tr></table></figure>

<h2 id="添加-Github-快捷关注"><a href="#添加-Github-快捷关注" class="headerlink" title="添加 Github 快捷关注"></a>添加 Github 快捷关注</h2><p>在主题的配置文件中, 搜索: github_banner, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">github_banner<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  permalink<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//github.com/KurohaKirito</span></span><br><span class="line">  title<span class="punctuation">:</span> Follow me on GitHub</span><br></pre></td></tr></table></figure>

<h2 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接</h2><p>在主题的配置文件中, 搜索: social, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">social<span class="punctuation">:</span></span><br><span class="line">  Telegram<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//t.me/****** || telegram</span></span><br><span class="line">  Steam<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//steamcommunity.com/profiles/******/ || steam</span></span><br><span class="line">  E-Mail<span class="punctuation">:</span> mailto<span class="punctuation">:</span>******@***.com || envelope</span><br><span class="line">  GitHub<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//github.com/****** || github</span></span><br><span class="line"></span><br><span class="line">social_icons<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 是否显示社交链接的图标</span><br><span class="line">  icons_only<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> # 是否仅显示图标</span><br><span class="line">  transition<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>

<p>**transition: false 说实话, 这个设置我也不知道有什么用! 有知道的请务必告知, 感谢! **</p>
<h2 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h2><p>在主题配置文件中搜索: links_icon, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">links_icon<span class="punctuation">:</span> link</span><br><span class="line">links_title<span class="punctuation">:</span> 友情链接</span><br><span class="line">links_layout<span class="punctuation">:</span> inline</span><br><span class="line">links<span class="punctuation">:</span></span><br><span class="line">  ShyArcher<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//shyarcher.github.io/</span></span><br><span class="line">  Noah<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//noahapps.github.io/</span></span><br></pre></td></tr></table></figure>

<p><a href="%E5%88%AB%E5%BF%98%E4%BA%86%E5%9C%A8%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%96%87%E4%BB%B6">注</a>: 这个地方也可以作为 &quot;<strong>推荐阅读</strong>&quot; 功能使用.</p>
<h2 id="网站头像设置"><a href="#网站头像设置" class="headerlink" title="网站头像设置"></a>网站头像设置</h2><p>在主题配置文件中, 搜索: avatar, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">avatar<span class="punctuation">:</span></span><br><span class="line">  url<span class="punctuation">:</span> /images/sao-avatar.png # 头像路径</span><br><span class="line">  rounded<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> # 头像是否显示为圆形</span><br><span class="line">  rotated<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 鼠标经过头像时<span class="punctuation">,</span> 头像是否旋转</span><br></pre></td></tr></table></figure>

<h2 id="给文章添加目录"><a href="#给文章添加目录" class="headerlink" title="给文章添加目录"></a>给文章添加目录</h2><p>在主题配置文件中搜索: toc, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">toc<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  number<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 是否自动编号</span><br><span class="line">  wrap<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 标题过长时<span class="punctuation">,</span> 是否换行<span class="punctuation">,</span> 建议开启<span class="punctuation">,</span> 不换行的话有些字就看不见了</span><br><span class="line">  expand_all<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 标题是否完全展开</span><br><span class="line">  max_depth<span class="punctuation">:</span> <span class="number">10</span> # 标题最大级数</span><br></pre></td></tr></table></figure>

<p><a href="%E5%88%AB%E5%BF%98%E4%BA%86%E5%9C%A8%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%96%87%E4%BB%B6">注</a>: wrap 属性还是要解释一下, wrap 设置为 true, 那么当标题过长时, 在目录那里会进行自动换行, 但是如果设置为 false, 那么过长的部分就会用 ... 省略掉! 所以还是设置为 true 吧.</p>
<h2 id="侧边栏属性设置"><a href="#侧边栏属性设置" class="headerlink" title="侧边栏属性设置"></a>侧边栏属性设置</h2><p>在主题配置文件中搜索: sidebar, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">sidebar<span class="punctuation">:</span></span><br><span class="line">  position<span class="punctuation">:</span> left # 侧边栏显示在左边还是右边</span><br><span class="line">  width<span class="punctuation">:</span> <span class="number">280</span> # 侧边栏宽度</span><br><span class="line">  display<span class="punctuation">:</span> post # 侧边栏显示模式<span class="punctuation">,</span> 只有在<span class="string">&quot;Muse&quot;</span>和<span class="string">&quot;Mist&quot;</span>风格下有效</span><br><span class="line">  offset<span class="punctuation">:</span> <span class="number">10</span> # 侧边栏和文章页面之间的间隙<span class="punctuation">,</span> 只有在<span class="string">&quot;Pisces&quot;</span>和<span class="string">&quot;Gemini&quot;</span>风格下有效</span><br><span class="line">  onmobile<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 是否在手机页面上显示<span class="punctuation">,</span> 只有在<span class="string">&quot;Muse&quot;</span>和<span class="string">&quot;Mist&quot;</span>风格下有效</span><br></pre></td></tr></table></figure>

<h2 id="阅读进度百分比显示"><a href="#阅读进度百分比显示" class="headerlink" title="阅读进度百分比显示"></a>阅读进度百分比显示</h2><p>在主题配置文件中搜索: back2top, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">back2top<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  sidebar<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # <span class="literal"><span class="keyword">true</span></span><span class="punctuation">:</span> 将按钮显示在侧边栏<span class="punctuation">,</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">:</span> 将按钮显示在左下角或者右下角<span class="punctuation">,</span> 取决于侧边栏的位置</span><br><span class="line">  scrollpercent<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 是否显示百分比</span><br></pre></td></tr></table></figure>

<h2 id="添加预计阅读时间功能"><a href="#添加预计阅读时间功能" class="headerlink" title="添加预计阅读时间功能"></a>添加预计阅读时间功能</h2><p>NexT 主题默认没有安装这个功能所需的依赖, 所以我们要先安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=">hexo-symbols-count-time<i class="fa fa-external-link-alt"></i></span></p>
<p>安装方法 Github 上已经说得很明白了, 这里不再赘述.</p>
<p>在主题配置文件中搜索: symbols_count_time 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">symbols_count_time<span class="punctuation">:</span></span><br><span class="line">  separated_meta<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  item_text_post<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  item_text_total<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  awl<span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">  wpm<span class="punctuation">:</span> <span class="number">275</span></span><br><span class="line">  suffix<span class="punctuation">:</span> mins.</span><br></pre></td></tr></table></figure>

<h2 id="文章底部标签前添加图标"><a href="#文章底部标签前添加图标" class="headerlink" title="文章底部标签前添加图标"></a>文章底部标签前添加图标</h2><p>在主题的配置文件中搜索: tag_icon 设置为 true</p>
<p><code>tag_icon: true</code></p>
<p>~~话说, 之前版本总是没有这个设置好吧, 每次都要自己添加, 哼! ~~ 这个版本终于有了!</p>
<h2 id="在文章底部添加打赏"><a href="#在文章底部添加打赏" class="headerlink" title="在文章底部添加打赏"></a>在文章底部添加打赏</h2><p>在主题的配置文件中搜索: reward_settings 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">reward_settings<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  animation<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> # 关闭抖动动画</span><br><span class="line">  comment<span class="punctuation">:</span> 您的支持将鼓励我继续创作!</span><br><span class="line">reward<span class="punctuation">:</span></span><br><span class="line">  alipay<span class="punctuation">:</span> /images/alipay.png</span><br></pre></td></tr></table></figure>

<h2 id="添加最受欢迎文章功能"><a href="#添加最受欢迎文章功能" class="headerlink" title="添加最受欢迎文章功能"></a>添加最受欢迎文章功能</h2><p>也可以作为 <strong>推荐阅读</strong> 功能使用.</p>
<p>NexT 主题默认没有安装这个功能所需的依赖, 所以我们要先安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=">hexo-related-popular-posts<i class="fa fa-external-link-alt"></i></span></p>
<p>安装方法 Github 上已经说得很明白了, 这里不再赘述.</p>
<p>在主题的配置文件中搜索: related_posts 修改为自定义值, 如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">related_posts:</span><br><span class="line">  enable: true</span><br><span class="line">  title: 推荐阅读</span><br><span class="line">  display_in_home: false # 是否在首页摘要处显示</span><br><span class="line">  params:</span><br><span class="line">    maxCount: 5</span><br><span class="line">    PPMixingRate: 0.0</span><br><span class="line">    isDate: false # 是否显示日期</span><br><span class="line">    isImage: false # 是否显示图片</span><br><span class="line">    isExcerpt: false # 是否显示摘要</span><br></pre></td></tr></table></figure>

<h2 id="代码高亮风格设置"><a href="#代码高亮风格设置" class="headerlink" title="代码高亮风格设置"></a>代码高亮风格设置</h2><p>第一步: 在<strong>站点配置文件</strong>中搜索: <code>highlight</code>, 将 <code>auto_detect</code> 设置为 <code>true</code>, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">highlight<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 开启高亮</span><br><span class="line">  line_number<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 开启标注行号</span><br><span class="line">  auto_detect<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 开启自动检测</span><br><span class="line">  tab_replace<span class="punctuation">:</span></span><br></pre></td></tr></table></figure>

<p>第二步: 在<strong>主题配置文件</strong>中搜索: <code>codeblock</code> 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">codeblock<span class="punctuation">:</span></span><br><span class="line">  highlight_theme<span class="punctuation">:</span> night eighties # 代码高亮风格</span><br><span class="line">  copy_button<span class="punctuation">:</span></span><br><span class="line">    enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 是否显示 <span class="string">&quot;复制&quot;</span> 按钮</span><br><span class="line">    show_result<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> # 是否显示 <span class="string">&quot;复制成功&quot;</span></span><br><span class="line">    style<span class="punctuation">:</span> mac # 代码框风格</span><br></pre></td></tr></table></figure>

<h1 id="第三方服务设置"><a href="#第三方服务设置" class="headerlink" title="第三方服务设置"></a>第三方服务设置</h1><p>NexT 主题支持很多第三方服务, 但是默认都没有安装相应的依赖, 所以大部分设置都要先安装相应的依赖才行.</p>
<h2 id="添加图片浏览功能"><a href="#添加图片浏览功能" class="headerlink" title="添加图片浏览功能"></a>添加图片浏览功能</h2><p>NexT 主题默认没有安装这个功能所需的依赖, 所以我们要先安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC1mYW5jeWJveDM=">theme-next-fancybox3<i class="fa fa-external-link-alt"></i></span></p>
<p>在主题的配置文件中搜索: fancybox 修改为 true, 如下:</p>
<p><code>fancybox: true</code></p>
<p>下面是测试图片, 鼠标点击图片就会进入图片浏览模式.</p>
<p><img data-src="/images/hexo/Sword_Art_Online.jpg" alt="Sword_Art_Online"></p>
<p><img data-src="/images/hexo/Sinon.png" alt="Sinon"></p>
<h2 id="添加-lazyload-懒加载"><a href="#添加-lazyload-懒加载" class="headerlink" title="添加 lazyload (懒加载)"></a>添加 lazyload (懒加载)</h2><p>Lazyload 能够让网页只加载在电脑屏幕显示范围内的图片, 让范围外的图片暂时不加载, 来加快网页加载速度.</p>
<p>NexT 主题默认没有安装这个功能所需的依赖, 所以我们要先安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC1sYXp5bG9hZA==">theme-next-lazyload<i class="fa fa-external-link-alt"></i></span></p>
<p>在主题的配置文件中搜索: lazyload 修改为 true, 如下:</p>
<p><code>lazyload: true</code></p>
<h2 id="添加阅读进度条"><a href="#添加阅读进度条" class="headerlink" title="添加阅读进度条"></a>添加阅读进度条</h2><p>还是老步骤, 安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvdGhlbWUtbmV4dC1yZWFkaW5nLXByb2dyZXNz">theme-next-reading-progress<i class="fa fa-external-link-alt"></i></span></p>
<p>在主题配置文件中搜索: reading_progress, 修改为自定义值, 如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">reading_progress<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  color<span class="punctuation">:</span> <span class="string">&quot;#37c6c0&quot;</span> # 进度条颜色</span><br><span class="line">  height<span class="punctuation">:</span> <span class="number">5</span>px # 进度条宽度</span><br></pre></td></tr></table></figure>

<p><a href="%E5%88%AB%E5%BF%98%E4%BA%86%E5%9C%A8%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%96%87%E4%BB%B6">注</a> 如果你部署后发现没有效果, 可以试试将宽度调整为 50px, 你就能看到效果了, 之后记得再将宽度改回去.</p>
<h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p>NexT 支持很多第三方评论系统: Disqus, 畅言, Valine, LiveRe (来必力), Gitalk.</p>
<blockquote>
<p>Disqus: 不采用, 因为不支持 Markdown 啊喂! 这让人怎么优雅地发评论啊!</p>
</blockquote>
<blockquote>
<p>畅言: 不采用, 因为需要 备案 啊喂! 我一个 &quot;个人博客网站&quot; 备啥案啊! 而且还要手机号验证! 喂! 我就不能匿名评论吗? 话说, 你怎么也不支持 Markdown 啊喂!</p>
</blockquote>
<blockquote>
<p>LiveRe: 同样需要登陆啊喂! 我就不能匿名评论吗? 话说, 你好像也不支持 Markdown 啊喂!</p>
</blockquote>
<blockquote>
<p>Gitalk: 使用 issue 来实现评论功能, 话说我不推荐这种方式! 虽然它支持 Markdown.</p>
</blockquote>
<blockquote>
<p>Valine: **支持 Markdown ! ** **支持 Markdown ! ** **支持 Markdown ! ** **支持匿名! ** **支持匿名! ** **支持匿名! ** 也支持图片评论.</p>
</blockquote>
<p>所以我采用 Valine 作为我的评论系统.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Q<span class="punctuation">:</span> Valine 支持图片? 我怎么没找到发图片的按钮? 博客主<span class="punctuation">,</span> 你这不骗人嘛!</span><br><span class="line">A<span class="punctuation">:</span> 大哥! Valine 不是支持 Markdown 嘛<span class="punctuation">,</span> 那你告诉我它不支持图片? 你就不能使用 Markdown 语法来显示图片吗? !</span><br></pre></td></tr></table></figure>

<p>想详细了解 Valine 的朋友们可以点击这里: <span class="exturl" data-url="aHR0cHM6Ly92YWxpbmUuanMub3JnLw==">Valine 中文官方文档<i class="fa fa-external-link-alt"></i></span> !</p>
<p>在主题配置文件中搜索: valine 修改为自定义值, 如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: ******</span><br><span class="line">  appkey: ******</span><br><span class="line">  notify: true # 谁得到新回复时, 谁就会有邮件提醒, 建议开启, 对博客主和来访者都有好处.</span><br><span class="line">  verify: true # 评论前是否有验证码验证.</span><br><span class="line">  placeholder: ヾﾉ≧∀≦)o来啊, 快活啊! # 评论框提示语句.</span><br><span class="line">  avatar: retro # 匿名评论者的用户头像.</span><br><span class="line">  guest_info: nick,mail,link # 用户选填信息: 昵称, 邮箱(要填写 Gravater 的账号邮箱地址), 个人网站地址.</span><br><span class="line">  pageSize: 10</span><br><span class="line">  language: zh-cn</span><br><span class="line">  visitor: false # 文章阅读数统计, 建议不要使用, 后面会使用不蒜子统计来实现文章阅读数统计功能.</span><br><span class="line">  comment_count: true # 评论数统计.</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>获取上面代码所需的 appid 和 appkey</strong></p>
</blockquote>
<p>Valine 的评论数据其实是保存在 LeanCloud 上面的, 这里所需要的 appid 和 appkey 其实都是 LeanCloud 网站上的, 所以我们要先注册一个 LeanCloud 账号, 点击这里: <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24v">LeanCloud 官网<i class="fa fa-external-link-alt"></i></span>, 不过呢, 从 2019-07-15 开始就需要实名认证了, 这个比较烦, 不过没办法, 忍忍吧, 10 分钟左右就认证好了, 当然如果你脸黑 · · · 呃 · · · 就当我什么也没说!</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Q<span class="punctuation">:</span> 话说回来<span class="punctuation">,</span> 你怎么不早说需要实名认证啊!</span><br><span class="line">A<span class="punctuation">:</span> 如果我提前说了<span class="punctuation">,</span> 那你还会用 Valine 吗?</span><br></pre></td></tr></table></figure>

<p>完成实名认证之后, 就可以新建应用了, 名字呢无所谓, 也支持中文, 起一个你喜欢的名字吧!</p>
<p>创建完应用之后, 点击应用右上角的 齿轮 标记, 进入设置页面, 再次点击左下角的 &quot;设置&quot;, 之后点击 &quot;应用 Key&quot;, 就会出现 App ID 和 App Key 了.</p>
<p>然后填写到主题配置文件的相应位置就可以了, 是不是很简单? !</p>
<blockquote>
<p>2019-12-20 更新:</p>
</blockquote>
<p><del>所以我采用 Valine 作为我的评论系统</del>.</p>
<blockquote>
<p>すみません, ほんどにすみません!</p>
<p>今天我发现 Leancloud 的使用现在要绑定域名, 而绑定域名需要<font color='red'><strong>备案</strong></font>......(可是我真的不想备案啊~ 因为在我的心中网络世界是不同于现实世界的另一个新世界, 那里充满幻想, 充满热爱, 可以以自己最喜欢的样子去生活, 所以为什么我还要继续使用现实世界的身份啊? ) 所以经过综合考虑, 我换用了 Gitalk !</p>
</blockquote>
<h3 id="使用-Gitalk-评论系统"><a href="#使用-Gitalk-评论系统" class="headerlink" title="使用 Gitalk 评论系统"></a>使用 Gitalk 评论系统</h3><p>简介: Gitalk 是使用 Github 中的 Issues 功能实现的评论系统, 我之前之所以说不推荐使用这种方式, 是因为这种方式有滥用 Github 的嫌疑, 不过有人问过 Github 官方, 官方也回应了说这样不算违反用户协议, 就是说这样用官方也是默许的.</p>
<ol>
<li><p>首先去自己的 Github 上新建一个 Repository, 并开放 Issues 功能. (其实这个是默认开放的) 名字写一个自己比较容易记住的名字即可. 我起的名字是: MyBlogCommentSystem (感觉好中二)</p>
</li>
<li><p>之后新建一个 Application, URL 就填写你的域名即可, 应用名称, 描述什么的按喜好填写.</p>
</li>
<li><p>填写 Next 的主题配置文件, 下面是我的配置:</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  github_id: Github 用户 ID (注意大小写)</span><br><span class="line">  repo: 仓库名称 (注意大小写)</span><br><span class="line">  client_id: 之前创建的 Application Client ID</span><br><span class="line">  client_secret: 之前创建的 Application Client Secret</span><br><span class="line">  admin_user: Github 用户 ID (注意大小写)</span><br><span class="line">  distraction_free_mode: <span class="literal">true</span></span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>最后去每篇博客的评论区部分, 登录自己的 Github 账号来初始化 Issues 即可使用 Gitalk 评论系统.</li>
</ol>
<h2 id="去掉侧边栏的虚线"><a href="#去掉侧边栏的虚线" class="headerlink" title="去掉侧边栏的虚线"></a>去掉侧边栏的虚线</h2><p>说到这个, 就得提到博客的 &quot;即时聊天功能&quot; 了, 我知道的有: <span class="exturl" data-url="aHR0cDovL2Rhc2hib2FyZC5kYW92b2ljZS5pby8=">DaoVoice<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly93d3cudGlkaW8uY29tLw==">Tidio<i class="fa fa-external-link-alt"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9jaGF0cmEuaW8v">Chatra<i class="fa fa-external-link-alt"></i></span> 这三个. 点击即可进入官网.</p>
<p>这三个我都用过, 不过就用了几天, &quot;高级版免费试用&quot; 还是有剩余时长的. 有一点点副作用, 就是博客加载时间会变长, 有卡顿感, 说到卡顿, 不得不说的就是这个项目了: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZnaHJzaC9saXZlMmRfZGVtbw==">live2d_demo<i class="fa fa-external-link-alt"></i></span> (一个会说话, 会换装, 能拖动的看板娘). 由于我没有服务器哈, 没办法自己搭建 API 服务器, 就使用的原作者的 API 服务器, 但是你想嘛, 肯定有很多很多人都在用原作者的 API 服务器啊, 所以速度上嘛 · · · 唉, 别提了, **太慢了! ! ** 不过我还能接受, 因为 ~~~ 开源啊! ! ! 免费啊! ! ! 对吧? !</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">我<span class="punctuation">:</span> 哎! 哎! 别打我! 我错了我错了!</span><br><span class="line">看板娘<span class="punctuation">:</span> 谁让你说我主人坏话的! 哼😕!</span><br></pre></td></tr></table></figure>

<p>咱们作为使用者(白嫖者), 要有良心的对吧? 感谢 fghrsh 大佬🙏!</p>
<blockquote>
<p>拓展: 和 <span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9qYS8=">看板娘<i class="fa fa-external-link-alt"></i></span> 类似的还有一个, 叫做 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFNSU4MSVCRCVFNiU5OCVBNSVFOCU4RiU5Qw==">伪春菜<i class="fa fa-external-link-alt"></i></span>, 有兴趣的小伙伴可以自行搜索了解.</p>
</blockquote>
<p>哎, 刚才说到哪了? 因为这四者 (DaoVoice, Tidio, Chatra, live2d) 都会让博客的加载时间变长, 而且前三者是 **收费的! 收费的! 收费的! ** (我指的是高级版本, 基础版本都是免费的) 所以到底用还是不用, 就要看各位自己的判断了, 我推荐呢, 各位试用一下, 过过瘾就行了🤣! 感觉即时聊天还不如在简介或者关于页面挂上自己的 QQ, 微信, Telegram 来得实在.</p>
<p>所以呢我并没有使用这个即时聊天功能, 侧边栏的聊天图标我也关闭显示了, 又因为我使用的是 Gemini 风格, 这就导致侧边栏处出现了 **一道虚线, 一道虚线! , 一道虚线! ! ** (终于说到重点了, 之前的废话全是说明这一条虚线出现的原因, 哈哈) 之所以我要强调, 是因为我可是连一丁点前端基础都没有啊! 这个东西折磨了我好久好久, 还好我也是一只程序猿, 耐心什么的, 还不跟玩似的!</p>
<blockquote>
<p>有想要添加  <strong>即时聊天功能</strong> 的小伙伴可以从目录那里找到相关部分说明的位置坐标, 精准定位.</p>
</blockquote>
<p>经过好长好长一段时间的折腾, 其实就是一个 F12 (原谅我真的一点前端知识都没有), 终于被我找到了解决办法:</p>
<p>在 <code>themes\next\source\css\_schemes\Pisces\_sidebar.styl</code> 文件中, 搜索: <code>feed-link</code>, 可以找到如下代码:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.feed-link</span>, <span class="selector-class">.chat</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> dotted $grey-light;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted $grey-light;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  ······</span><br><span class="line">  省略</span><br><span class="line">  ······</span><br></pre></td></tr></table></figure>

<p>其中的 <code>border-top</code> 和 <code>border-bottom</code> 就是虚线了, 将 <code>1px</code> 修改为 <code>0px</code> 就可以了, 这样虚线就消失了!</p>
<p>随便建议大家把这个也改了:, 找到 <code>themes\next\source\css\_common\components\sidebar\sidebar-author-links.styl</code> 搜索: <code>links-of-author</code>, 将 <code>margin-top</code> 修改为 <code>0px</code> 这样侧边栏社交链接上面的空隙就消失了!</p>
<h2 id="文章分享功能"><a href="#文章分享功能" class="headerlink" title="文章分享功能"></a>文章分享功能</h2><p>NexT 主题集成的分享有3种: <code>Add-this</code>, <code>Likely</code>, <code>NeedMoreShare2</code></p>
<blockquote>
<ul>
<li>add-this: 不知道为什么, 在 NexT 7.2.0 版本中, 无论我怎么设置, 就是无效, 没有任何效果, F12 控制台也没有报任何错误! 很烦! 而且还要注册账号!</li>
<li>Likely: 推荐使用, 因为可以分享 Telegram, 哈哈, 必须用啊! 不用注册账号!</li>
<li>NeedMoreShare2: 不推荐, 它的样式我也不怎么喜欢, 弃用.</li>
</ul>
</blockquote>
<p>在主题配置文件中搜索: likely 修改为自定义值, 如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">likely:</span><br><span class="line">  enable: true</span><br><span class="line">  look: big</span><br><span class="line">  networks:</span><br><span class="line">    twitter: Tweeter</span><br><span class="line">    facebook: Facebook</span><br><span class="line">    linkedin: LinkedIn</span><br><span class="line">    telegram: Telegram</span><br><span class="line">    whatsapp: WhatApp</span><br></pre></td></tr></table></figure>

<h2 id="搜索引擎收录"><a href="#搜索引擎收录" class="headerlink" title="搜索引擎收录"></a>搜索引擎收录</h2><p>先要判断一下自己的博客是否已经被百度谷歌等搜索引擎收录, 在搜索栏中按下面的格式输入: <code>site:域名</code> 比如我检测的时候就是这样写: <code>site:kuroha.vip</code> 如果能搜索到自己的博客网站, 就说明已经收录了, 相反就是没有收录. 话说, 一个新站, 一上来就被搜索引擎收录, 这可能吗?</p>
<h3 id="百度搜索"><a href="#百度搜索" class="headerlink" title="百度搜索"></a>百度搜索</h3><p>大概 1 年前, 就是 2018 年, 那时候将网站提交到百度是不用注册一个叫做 &quot;熊掌ID&quot; 的东西的, 但是现在不行了, 百度强制用户只有绑定了 &quot;熊掌ID&quot; 之后, 才能开始使用站长之家, 否则什么功能也用不了, 你没看错, 什么也做不了! 所以我就去注册个 &quot;熊掌ID&quot; 试试, 然后我看到了这个: 🤔</p>
<p><img data-src="/images/hexo/xiongzhangID1.png" alt="熊掌ID注册页面"></p>
<p><img data-src="/images/hexo/xiongzhangID2.png" alt="熊掌ID注册页面"></p>
<p>于是我默默地将鼠标移动到了浏览器的标签页上, 按下了鼠标中键! 拜拜了您嘞!</p>
<p>如果有小伙伴就是想让百度收录自己的博客, 请参考: <span class="exturl" data-url="aHR0cHM6Ly9sdWFuemh1eGlhbi5naXRodWIuaW8vcG9zdC84MmQ5MmFkNC5odG1s">栾铸显的博客<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="谷歌搜索"><a href="#谷歌搜索" class="headerlink" title="谷歌搜索"></a>谷歌搜索</h3><p>让谷歌搜索收录自己的博客就简单多了. <strong>前提: 你能用 Google Search</strong></p>
<p>进入 <span class="exturl" data-url="aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZS8=">Google 站点服务平台<i class="fa fa-external-link-alt"></i></span> , 注册登录, 点击 &quot;添加资源&quot;, 选择 &quot;网址前缀&quot;, 默认的验证方法是 &quot;HTML 文件&quot;, 这个方法不适用于解析网址. 比如我的域名 &quot;kuroha.vip&quot; 就是解析到 Github Pages 上的, 所以这个方法不适用, 而且我也不推荐用这个方法. 点击 &quot;HTML文件&quot; 这四个字的位置, 你会发现刚才的页面折叠起来了.  ~~因为我之前弄的时候就卡在这里了, 死活找不到其他方法在哪里. 笨, 没办法. ~~ 选择 &quot;HTML 标记&quot; 这个方法, 复制 content 后面的内容, 不要复制 引号. 之后打开主题配置文件, 搜索: <code>google_site_verification</code>, 将你刚才复制的一串字符粘贴上就可以了.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">google_site_verification<span class="punctuation">:</span> xxxxxx99uVjXfXzFHr0M_2lKQ1z_jDOlFl4<span class="number">-6</span>xxxxxx</span><br></pre></td></tr></table></figure>

<h2 id="文章底部打分功能"><a href="#文章底部打分功能" class="headerlink" title="文章底部打分功能"></a>文章底部打分功能</h2><p>在主题配置文件中, 搜索: rating, 修改为自定义值, 如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rating:</span><br><span class="line">  enable: true</span><br><span class="line">  id: *****</span><br><span class="line">  color: fc6423</span><br></pre></td></tr></table></figure>

<ul>
<li>去<span class="exturl" data-url="aHR0cHM6Ly93aWRnZXRwYWNrLmNvbS8=">这个网站<i class="fa fa-external-link-alt"></i></span>注册账号, 填写网站信息, 获取 id.</li>
<li>颜色可以自定义修改.</li>
<li>个人建议这个功能可以弃用了, 因为访客想要给文章评分的话, 也是要注册账号并登陆的, 试想一下, 有哪个访客会为了打一个没有什么意义的评分而去注册账号呢?</li>
</ul>
<h2 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h2><p>在主题配置文件中, 搜索: busuanzi_count, 修改为自定义值, 如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true # 站点总访问人数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true # 站点总浏览次数</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true # 单篇博客浏览次数</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>

<h2 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h2><p>本地搜索功能需要安装依赖: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1nZW5lcmF0b3Itc2VhcmNoZGI=">这里! <i class="fa fa-external-link-alt"></i></span></p>
<p>在主题配置文件中, 搜索: local_search, 修改为自定义值, 如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: false</span><br></pre></td></tr></table></figure>

<h2 id="即时聊天功能"><a href="#即时聊天功能" class="headerlink" title="即时聊天功能"></a>即时聊天功能</h2><p>Next 主题配置文件中直接支持的有 <code>Chatra</code> 和 <code>Tidio</code>, 两者的使用方法基本相同, 先到官网注册账号, 他们的官网分别是 <span class="exturl" data-url="aHR0cHM6Ly9jaGF0cmEuaW8v">Chatra<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly93d3cudGlkaW9jaGF0LmNvbS8=">Tidio<i class="fa fa-external-link-alt"></i></span>, 之后在他们的网站上填写上自己的网站信息, 聊天窗口的外观也可以自己定义.</p>
<p>准备工作准备好了之后, 在账号设置中获取 <code>id</code> 和 <code>Key</code>, <code>Chatra</code> 中使用的标识码就做 <code>id</code>, <code>Tidio</code> 使用的标识码叫做 <code>Key</code>, 填写到主题配置文件中, 并将 <code>enable</code> 设置为 <code>true</code> 即可.</p>
<h2 id="博客背景动画效果"><a href="#博客背景动画效果" class="headerlink" title="博客背景动画效果"></a>博客背景动画效果</h2><p>在主题配置文件中, 搜索: canvas_nest, 修改为自定义值即可.</p>
<p>Next 中自带三种背景动画, 下面是效果预览:</p>
<p><img data-src="/images/hexo/AnimationEffect1.png" alt="Canvas_nest"></p>
<p><img data-src="/images/hexo/AnimationEffect2.png" alt="JavaScript 3D library"></p>
<p><img data-src="/images/hexo/AnimationEffect3.png" alt="Canvas_ribbon"></p>
<p>下面是我的设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: false</span><br><span class="line">  onmobile: true</span><br><span class="line">  color: &quot;0,0,255&quot;</span><br><span class="line">  opacity: 0.5</span><br><span class="line">  zIndex: -1</span><br><span class="line">  count: 99</span><br><span class="line"></span><br><span class="line">three:</span><br><span class="line">  enable: false</span><br><span class="line">  delay: false</span><br><span class="line">  three_waves: true</span><br><span class="line">  canvas_lines: true</span><br><span class="line">  canvas_sphere: true</span><br><span class="line"></span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br></pre></td></tr></table></figure>

<h2 id="博客加载进度条"><a href="#博客加载进度条" class="headerlink" title="博客加载进度条"></a>博客加载进度条</h2><p>在主题配置文件中, 搜索: pace, 修改为自定义值即可. 如果要用的话个人推荐 <code>loading-bar</code> 主题, 但是个人建议不要使用, 因为这样会给用户一种博客加载时间特别长, 博客很卡的感觉.</p>
<p>这是我的配置: (很显然, 我已经禁用了)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">pace<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  theme<span class="punctuation">:</span> loading-bar</span><br></pre></td></tr></table></figure>

<p>博客在加载的时候, 一般是先加载文章, 之后加载附加功能, 像: Live2D, 音乐播放器, 即时聊天服务等. 所以不使用进度条的话, 在加载完文章后, 访客就可以开始浏览文章了, 这时后台再继续默默加载附加功能. 但是进度条是在博客<strong>完全加载</strong>完成后才会消失的, 所以, 如果使用了进度条功能, 访客就要继续等待, 直到附加功能也完全加载完毕才能开始浏览博客......我想如果我是访客, 我直接就切换标签页, 去逛别人的博客去了.</p>
<h1 id="手动添加华丽效果"><a href="#手动添加华丽效果" class="headerlink" title="手动添加华丽效果"></a>手动添加华丽效果</h1><h2 id="看板娘-Live2D"><a href="#看板娘-Live2D" class="headerlink" title="看板娘 Live2D"></a>看板娘 Live2D</h2><p>第一种: <code>hexo-helper-live2d</code> 优点: 有声音, 缺点: 无法换装, 无法换模型, 响应事件少.</p>
<p>使用方法见官方网址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk">hexo-helper-live2d<i class="fa fa-external-link-alt"></i></span></p>
<p>第二种: <code>live2d-widget</code> 优点: 能换装, 能切换模型, 响应事件多, 缺点: 无声音, 配置较复杂.  (现在可能已经有声音了)</p>
<p>使用方法见官方网址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0ZXZlbmpvZXpoYW5nL2xpdmUyZC13aWRnZXQ=">live2d-widget<i class="fa fa-external-link-alt"></i></span></p>
<p>第三种: <code>live2d_demo</code> 优点: 能换装, 能切换模型, 响应事件多, 缺点: 无声音, 配置较复杂.  (现在可能已经有声音了)</p>
<p>使用方法见官方网址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZnaHJzaC9saXZlMmRfZGVtbw==">live2d_demo<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="音乐播放器-Aplayer"><a href="#音乐播放器-Aplayer" class="headerlink" title="音乐播放器 Aplayer"></a>音乐播放器 Aplayer</h2><blockquote>
<p>Aplayer 源码地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vZVBsYXllci9BUGxheWVy">APlayer<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>首先, 在 <code>next/source/lib</code> 目录下新建 <code>aplayer</code> 文件夹, 之后下载项目源码并解压, 将 <code>APlayer.min.js</code> 和 <code>APlayer.min.css</code> 文件复制到 <code>next/source/lib/aplayer</code> 中.</p>
<p>再之后, 继续在当前目录下新建一个 <code>music.js</code> 文件, 输入以下代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">    <span class="attr">fixed</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">audio</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;歌曲的名字&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;歌手&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;音乐文件的地址&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;封面图片的地址&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>之后修改 <code>themes/next/layout/_layout.swing</code> 在文件最后添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="title class_">Aplayer</span> 音乐播放功能--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">aplayer</span> %&#125;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/lib/aplayer/APlayer.min.css&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/lib/aplayer/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/lib/aplayer/music.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中, 找一个自己喜欢的位置, 写入 <code>aplayer: true</code>. 什么时候想要关闭这个功能了, 直接设置为 false 即可.</p>
<h2 id="鼠标红心效果"><a href="#鼠标红心效果" class="headerlink" title="鼠标红心效果"></a>鼠标红心效果</h2><p>在 <code>themes/next/source/js/src</code> 下创建 <code>love.js</code> 文件, 粘贴以下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span> (<span class="params">e, t, a</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), <span class="title function_">o</span>(), <span class="title function_">r</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.<span class="property">length</span>; e++)</span><br><span class="line">            d[e].<span class="property">alpha</span> &lt;= <span class="number">0</span> ? (t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>), d.<span class="title function_">splice</span>(e, <span class="number">1</span>)) : (d[e].<span class="property">y</span>-- , d[e].<span class="property">scale</span> += <span class="number">.004</span>, d[e].<span class="property">alpha</span> -= <span class="number">.013</span>, d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + d[e].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + d[e].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> + d[e].<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + d[e].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + d[e].<span class="property">scale</span> + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + d[e].<span class="property">color</span> + <span class="string">&quot;;z-index:99999&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.<span class="property">onclick</span> &amp;&amp; e.<span class="property">onclick</span>;</span><br><span class="line"></span><br><span class="line">        e.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t &amp;&amp; <span class="title function_">t</span>(), <span class="title function_">i</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        a.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>, d.<span class="title function_">push</span>(&#123; <span class="attr">el</span>: a, <span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">5</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">5</span>, <span class="attr">scale</span>: <span class="number">1</span>, <span class="attr">alpha</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="title function_">s</span>() &#125;), t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">        a.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (t)</span><br><span class="line">        &#123;</span><br><span class="line">            a.<span class="property">styleSheet</span>.<span class="property">cssText</span> = e</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = [];</span><br><span class="line"></span><br><span class="line">    e.<span class="property">requestAnimationFrame</span> = <span class="keyword">function</span> (<span class="params"></span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span> || e.<span class="property">webkitRequestAnimationFrame</span> || e.<span class="property">mozRequestAnimationFrame</span> || e.<span class="property">oRequestAnimationFrame</span> || e.<span class="property">msRequestAnimationFrame</span> || <span class="keyword">function</span> (<span class="params">e</span>) &#123; <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>) &#125;</span><br><span class="line">    &#125;(), <span class="title function_">n</span>()</span><br><span class="line"></span><br><span class="line">&#125;(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>

<p>之后修改 <code>themes/next/layout/_layout.swing</code> 在文件最后添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--页面点击小桃心--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">love</span> %&#125;</span><br><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/love.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中, 找一个自己喜欢的位置, 写入 <code>love: true</code>. 什么时候想要关闭这个功能了, 直接设置为 false 即可.</p>
<h2 id="页面标题欺诈"><a href="#页面标题欺诈" class="headerlink" title="页面标题欺诈"></a>页面标题欺诈</h2><p>在 <code>themes/next/source/js/</code> 下创建 <code>crash_cheat.js</code> 文件, 粘贴以下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitle</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;shortcut icon&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/images/sao-16x16.png&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;😰 w(ﾟДﾟ)w 页面崩溃啦!  &#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;shortcut icon&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/images/sao-16x16.png&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;😏 ♪(^∇^*) 噫? 又好了! &#x27;</span>;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;🤔 啊来来! 原标题是啥来着?  &#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">		</span><br><span class="line">		titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;😮哦~! 想起来了!  &#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">4000</span>);</span><br><span class="line">		</span><br><span class="line">		titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitle</span>;</span><br><span class="line">        &#125;, <span class="number">6000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>之后修改 <code>themes/next/layout/_layout.swing</code> 在文件最后添加:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">crashcheat</span> %&#125;</span><br><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/crash_cheat.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中, 找一个自己喜欢的位置, 写入 <code>crashcheat: true</code>. 什么时候想要关闭这个功能了, 直接设置为 false 即可.</p>
<h2 id="球形标签云"><a href="#球形标签云" class="headerlink" title="球形标签云"></a>球形标签云</h2><p>球形标签云其实就是用这个插件 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29hdDEwMDAuY29tL3RhZ2NhbnZhcy5waHA=">TagCanvas<i class="fa fa-external-link-alt"></i></span> 实现的, 点击进入官网.</p>
<p>进入官网后下载 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29hdDEwMDAuY29tL3RhZ2NhbnZhcy5qcw==">tagcanvas.js<i class="fa fa-external-link-alt"></i></span> 文件, 也可以直接在左面我给出的链接那里 &quot;右键-&gt;链接另存为&quot;, 保存到: <code>themes\next\source\js</code> 目录下.</p>
<p>打开 <code>themes\next\layout\page.swig</code> 文件, 如果你已经开启了 &quot;自定义 swig 功能&quot;,  <del>其实开不开也无所谓啦</del> , 进入博客网站根目录下的 <code>source</code> 文件夹, 打开 <code>_data</code> 文件夹, 没有的话就新建一个, 叫做 <code>_data</code> , 在 <code>_data</code> 文件夹中再新建一个 <code>tagcanvas.swig</code> 文件, 打开这个文件, 粘贴以下内容:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myTags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;350&quot;</span> <span class="attr">height</span>=<span class="string">&quot;350&quot;</span> <span class="attr">id</span>=<span class="string">&quot;my3DTags&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> Anything in here will be replaced on browsers that support the canvas element <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; tagcloud(&#123;</span><br><span class="line">      min_font: 16,</span><br><span class="line">      max_font: 35,</span><br><span class="line">      amount: 999,</span><br><span class="line">      color: true,</span><br><span class="line">      start_color: &#x27;black&#x27;,</span><br><span class="line">      end_color: &#x27;green&#x27;,</span><br><span class="line">    &#125;) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">TagCanvas</span>.<span class="title class_">Start</span>(<span class="string">&#x27;my3DTags&#x27;</span>,<span class="string">&#x27;tags&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">textFont</span>: <span class="string">&#x27;Georgia,Optima&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">textColour</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">outlineColour</span>: <span class="string">&#x27;black&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">weight</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">reverse</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">depth</span>: <span class="number">0.8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">maxSpeed</span>: <span class="number">0.05</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bgRadius</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">freezeDecel</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">catch</span> (e)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myTags&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后打开 <code>themes\next\layout\page.swig</code> 文件, 找到 43, 44 行之间的位置, 没有行数标记的话, 就搜索 <code>tag-cloud-tags</code> , 它所在的位置就是第 44 行. 在这一行的上面添加如下内容:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;# 球形云标签 #&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">tagcanvas</span> %&#125;</span><br><span class="line">&#123;% include <span class="string">&#x27;../../../source/_data/tagcanvas.swig&#x27;</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 普通云标签 #&#125;</span><br></pre></td></tr></table></figure>

<p>最后在 <strong>主题配置文件</strong> 中, 找一个自己喜欢的位置, 写入 <code>tagcanvas: true</code> 即可.</p>
<blockquote>
<p><a href="%E5%88%AB%E5%BF%98%E4%BA%86%E5%9C%A8%E5%AF%B9%E5%BA%94%E8%B7%AF%E5%BE%84%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%96%87%E4%BB%B6">注</a> 球形标签云也可以使用 <code>hexo-tag-cloud</code> 插件来实现, 不过我没用这种方法, 有时间的话我再试试吧. 执行我上面的操作后, 球形标签云和普通标签云是同时存在的, 如果你只想要显示球形标签云, 还是在 <code>page.swig</code> 文件中, 把后面那个 <strong>普通云标签</strong> 的 <code>div</code> 标签注释掉就行了. 就像这样:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;# 球形云标签 #&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">tagcanvas</span> %&#125;</span><br><span class="line">&#123;% include <span class="string">&#x27;../../../source/_data/tagcanvas.swig&#x27;</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 普通云标签 #&#125;</span><br><span class="line">&#123;# &lt;div <span class="keyword">class</span>=<span class="string">&quot;tag-cloud-tags&quot;</span>&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not theme.<span class="property">tagcloud</span> %&#125;</span><br><span class="line">    &#123;&#123; <span class="title function_">tagcloud</span>(&#123;<span class="attr">min_font</span>: <span class="number">12</span>, <span class="attr">max_font</span>: <span class="number">30</span>, <span class="attr">amount</span>: <span class="number">200</span>, <span class="attr">color</span>: <span class="literal">true</span>, <span class="attr">start_color</span>: <span class="string">&#x27;#ccc&#x27;</span>, <span class="attr">end_color</span>: <span class="string">&#x27;#111&#x27;</span>&#125;) &#125;&#125;</span><br><span class="line">  &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &#123;&#123; <span class="title function_">tagcloud</span>(&#123;<span class="attr">min_font</span>: theme.<span class="property">tagcloud</span>.<span class="property">min</span>, <span class="attr">max_font</span>: theme.<span class="property">tagcloud</span>.<span class="property">max</span>, <span class="attr">amount</span>: theme.<span class="property">tagcloud</span>.<span class="property">amount</span>, <span class="attr">color</span>: <span class="literal">true</span>, <span class="attr">start_color</span>: theme.<span class="property">tagcloud</span>.<span class="property">start</span>, <span class="attr">end_color</span>: theme.<span class="property">tagcloud</span>.<span class="property">end</span>&#125;) &#125;&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt; #&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文章写作部分"><a href="#文章写作部分" class="headerlink" title="文章写作部分"></a>文章写作部分</h1><h2 id="Hexo-博客的属性设置"><a href="#Hexo-博客的属性设置" class="headerlink" title="Hexo 博客的属性设置"></a>Hexo 博客的属性设置</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">title: <span class="comment">//文章标题</span></span><br><span class="line">date: <span class="comment">//博客的建立日期, 如果自己手动添加, 请按固定格式添加</span></span><br><span class="line">categories: <span class="comment">//分类, 支持多级</span></span><br><span class="line">tags: <span class="comment">//标签, 多个: [标签1,标签2,标签3]</span></span><br><span class="line">description: <span class="comment">//文章的描述, 在每篇文章标题下方显示, 并且作为网页的 description 元数据. 如果不写, 则自动取 &lt;!-- more --&gt; 之前的文字作为网页的 description 元数据. 建议每篇文章都务必加上!</span></span><br><span class="line">keywords: <span class="comment">//关键字, 并且作为网页的 keywords 元数据. 如果不写, 则自动取 tags 里的项作为网页的 keywords 元数据</span></span><br><span class="line">comments: <span class="literal">true</span> | <span class="literal">false</span> <span class="comment">//是否开启评论</span></span><br><span class="line">layout: <span class="comment">//页面布局, 默认值是 post, 默认值可以在站点配置文件中修改 default_layout</span></span><br></pre></td></tr></table></figure>

<h2 id="Markdown-支持部分-html-标签"><a href="#Markdown-支持部分-html-标签" class="headerlink" title="Markdown 支持部分 html 标签"></a>Markdown 支持部分 html 标签</h2><ol>
<li><p><code>&lt;kbd&gt;</code> 标签</p>
<p> <code>&lt;kbd&gt;</code> 标签可以将其中的文字渲染成一个按键, 虽然目前 <code>&lt;kbd&gt;</code> 已经被标记为了 &quot;过时的&quot; 标签, 但是还是可以使用其来实现简单的效果.</p>
<p> <strong>代码</strong>: <code>复制的快捷键是: &lt;kbd&gt;Ctrl&lt;/kbd&gt; &lt;kbd&gt;C&lt;/kbd&gt;</code></p>
<p> <strong>效果</strong>: 复制的快捷键是: <kbd>Ctrl</kbd> <kbd>C</kbd></p>
</li>
<li><p><code>&lt;font&gt;</code> 标签</p>
<p> 利用 font 标签可以简单修改文字的颜色, 加粗斜体这些可以直接使用 Markdown 的语法.</p>
<p> <strong>代码</strong>: <code>&lt;font color=&#39;red&#39;&gt; *这是红色斜体* &lt;/font&gt; &lt;font color=&#39;green&#39;&gt; **这是绿色粗体** &lt;/font&gt;</code></p>
<p> <strong>效果</strong>: <font color='red'> <em>这是红色斜体</em> </font> <font color='green'> <strong>这是绿色粗体</strong> </font></p>
</li>
</ol>
<h2 id="Markdown-支持自定义标签"><a href="#Markdown-支持自定义标签" class="headerlink" title="Markdown 支持自定义标签"></a>Markdown 支持自定义标签</h2><p>如何定义标签?</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">tag1</span>]: <span class="link">tag1Name</span></span><br></pre></td></tr></table></figure>

<p>如何使用标签?</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">text1</span>][tag1]</span><br></pre></td></tr></table></figure>

<h2 id="Markdown-支持自定义锚点"><a href="#Markdown-支持自定义锚点" class="headerlink" title="Markdown 支持自定义锚点"></a>Markdown 支持自定义锚点</h2><p>如何使用标题锚进行跳转?</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">text1</span>][<span class="symbol">#标题名称</span>]</span><br></pre></td></tr></table></figure>

<p>[<strong>注</strong>]</p>
<ul>
<li>无论是几级标题, 都只写一个井号</li>
<li>标题中所有的标签符号全部会被无视</li>
<li>标题中所有的空格会全部转化为横线 (-)</li>
<li>如 <code>What is LaTex?</code> &#x3D;&gt; <code>#what-is-latex</code></li>
<li>如 <code>Ready, set, Go!</code> &#x3D;&gt; <code>#ready-set-go</code></li>
</ul>
<h2 id="Gitpages-支持使用-Markdown-实现任务列表"><a href="#Gitpages-支持使用-Markdown-实现任务列表" class="headerlink" title="Gitpages 支持使用 Markdown 实现任务列表"></a>Gitpages 支持使用 Markdown 实现任务列表</h2><p>语法格式:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] item 1</span><br><span class="line"><span class="bullet">    *</span> [x] item A</span><br><span class="line"><span class="bullet">    *</span> [ ] item B</span><br><span class="line"><span class="code">        more text</span></span><br><span class="line"><span class="code">        + [x] item a</span></span><br><span class="line"><span class="code">        + [ ] item b</span></span><br><span class="line"><span class="code">        + [x] item c</span></span><br><span class="line"><span class="code">    * [x] item C</span></span><br><span class="line"><span class="code">- [ ] item 2</span></span><br><span class="line"><span class="code">- [ ] item 3</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> item 1<ul>
<li><input checked="" disabled="" type="checkbox"> item A</li>
<li><input disabled="" type="checkbox"> item B<br>  more text<ul>
<li><input checked="" disabled="" type="checkbox"> item a</li>
<li><input disabled="" type="checkbox"> item b</li>
<li><input checked="" disabled="" type="checkbox"> item c</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> item C</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> item 2</li>
<li><input disabled="" type="checkbox"> item 3</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>入门 MPV 播放器</title>
    <url>/kuroha/how_to_use_mpv_player.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="播放器简介"><a href="#播放器简介" class="headerlink" title="播放器简介"></a>播放器简介</h1><p>默认情况下, MPV 播放器并不提供 GUI 界面, 需要通过命令行或配置文件进行设置, 它配置灵活, 性能优秀, 支持硬件解码.</p>
<p>基于开源, MPV 衍生出来一大批第三方播放器, 比如 Mac 平台上的 IINA, 以及 Baka MPlayer, bomi, mpc-qt, xt7-player-mpv 等, 它们的核心都是 MPV.</p>
<h1 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h1><ol>
<li>   MPV 支持播放列表文件 (如: m3u).</li>
<li>   如果需要临时播放多个文件, 打开MPV, 选中多个文件拖入窗口.</li>
<li>   鼠标右键单击 上一个 或者 下一个 按钮可以临时显示当前播放列表.</li>
<li>   如果需要将该目录的所有文件全部添加进 MPV 的播放列表中, 使用命令: <code>mpv *.*</code></li>
</ol>
<h1 id="文件关联"><a href="#文件关联" class="headerlink" title="文件关联"></a>文件关联</h1><ol>
<li><p>   解压 <code>mpv-install-master.zip</code> 文件, 这里是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jvc3N5L21wdi1pbnN0YWxsL2FyY2hpdmUvbWFzdGVyLnppcA==">下载地址<i class="fa fa-external-link-alt"></i></span>.</p>
</li>
<li><p>   将三个文件（<code>mpv-document</code>, <code>mpv-install.bat</code>, <code>mpv-uninstall.bat</code>）移动到自定义的 MPV 程序目录下.</p>
</li>
<li><p>   以管理员身份运行 <code>mpv-install.bat</code> 进行文件关联. <code>mpv-uninstall.bat</code> 则是用来解除文件关联的.</p>
</li>
<li><p>   没做第 3 步之前, 进入 Win10 Setting 设置默认应用时, 会找不到 MPV, 做完第 3 步之后就可以进入 Win10 Setting 设置默认应用了.</p>
</li>
</ol>
<h1 id="快捷键-区分大小写"><a href="#快捷键-区分大小写" class="headerlink" title="快捷键 (区分大小写)"></a>快捷键 (<font color=red>区分大小写</font>)</h1><h2 id="播放控制"><a href="#播放控制" class="headerlink" title="播放控制"></a>播放控制</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">p</td>
<td align="center">Space</td>
<td align="right">暂停, 继续播放</td>
</tr>
<tr>
<td align="center">Num&#x2F;</td>
<td align="center">Num*</td>
<td align="right">减少音量 &#x2F; 增加音量</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">0</td>
<td align="right">减少音量 &#x2F; 增加音量</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center"></td>
<td align="right">静音</td>
</tr>
<tr>
<td align="center">←</td>
<td align="center">→</td>
<td align="right">快退 &#x2F; 快进 5 秒</td>
</tr>
<tr>
<td align="center">↑</td>
<td align="center">↓</td>
<td align="right">快进 &#x2F; 快退 1 分钟</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">&gt;</td>
<td align="right">上一个 &#x2F; 下一个（播放列表中）</td>
</tr>
<tr>
<td align="center">Enter</td>
<td align="center"></td>
<td align="right">下一个（播放列表中）</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center"></td>
<td align="right">设定 &#x2F; 清除 A - B 循环点</td>
</tr>
<tr>
<td align="center">L</td>
<td align="center"></td>
<td align="right">循环播放</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center"></td>
<td align="right">对本机画面进行全屏截图</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center"></td>
<td align="right">对源画面进行全屏截图</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center"></td>
<td align="right">停止播放并退出</td>
</tr>
<tr>
<td align="center">Q</td>
<td align="center"></td>
<td align="right">保存当前播放进度并退出</td>
</tr>
</tbody></table>
<h2 id="视频音频控制"><a href="#视频音频控制" class="headerlink" title="视频音频控制"></a>视频音频控制</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">_</td>
<td align="center"></td>
<td align="right">循环切换可用视频轨</td>
</tr>
<tr>
<td align="center">A</td>
<td align="center"></td>
<td align="right">循环切换视频画面比例</td>
</tr>
<tr>
<td align="center">Alt+0</td>
<td align="center"></td>
<td align="right">0.5倍源视频画面大小</td>
</tr>
<tr>
<td align="center">Alt+1</td>
<td align="center"></td>
<td align="right">1倍源视频画面大小</td>
</tr>
<tr>
<td align="center">Alt+2</td>
<td align="center"></td>
<td align="right">2倍源视频画面大小</td>
</tr>
<tr>
<td align="center">#</td>
<td align="center"></td>
<td align="right">循环切换可用音频轨</td>
</tr>
<tr>
<td align="center">Ctrl +</td>
<td align="center">Ctrl -</td>
<td align="right">音轨延迟+&#x2F;- 0.1秒</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center"></td>
<td align="right">下一帧</td>
</tr>
<tr>
<td align="center">,</td>
<td align="center"></td>
<td align="right">上一帧</td>
</tr>
</tbody></table>
<h2 id="字幕控制"><a href="#字幕控制" class="headerlink" title="字幕控制"></a>字幕控制</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">V</td>
<td align="center"></td>
<td align="right">开启&#x2F;关闭字幕</td>
</tr>
<tr>
<td align="center">j</td>
<td align="center">J</td>
<td align="right">循环切换可用字幕轨</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">z</td>
<td align="right">字幕时间轴 + &#x2F; - 0.1 秒</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">t</td>
<td align="right">上移&#x2F;下移字幕位置</td>
</tr>
</tbody></table>
<h2 id="窗口控制"><a href="#窗口控制" class="headerlink" title="窗口控制"></a>窗口控制</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">f</td>
<td align="right">进入&#x2F;退出全屏</td>
</tr>
<tr>
<td align="center">ESC</td>
<td align="right">退出全屏</td>
</tr>
</tbody></table>
<h2 id="播放速度控制"><a href="#播放速度控制" class="headerlink" title="播放速度控制"></a>播放速度控制</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[</td>
<td align="right">0.9倍慢速播放</td>
</tr>
<tr>
<td align="center">]</td>
<td align="right">1.1倍快速播放</td>
</tr>
<tr>
<td align="center">{</td>
<td align="right">0.5倍慢速播放</td>
</tr>
<tr>
<td align="center">}</td>
<td align="right">2.0倍快速播放</td>
</tr>
<tr>
<td align="center">Backspace</td>
<td align="right">重置为正常播放速度</td>
</tr>
</tbody></table>
<h2 id="色彩调节"><a href="#色彩调节" class="headerlink" title="色彩调节"></a>色彩调节</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="right">对比度-&#x2F;+</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">4</td>
<td align="right">亮度-&#x2F;+</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">6</td>
<td align="right">伽马-&#x2F;+</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">8</td>
<td align="right">饱和度-&#x2F;+</td>
</tr>
</tbody></table>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><table>
<thead>
<tr>
<th align="center">快捷键</th>
<th align="center">快捷键</th>
<th align="right">作用说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">s</td>
<td align="center">S</td>
<td align="right">包含 &#x2F; 不包含字幕进行截图</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center"></td>
<td align="right">显示视频的详情参数</td>
</tr>
</tbody></table>
<h1 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h1><h2 id="程序配置文件路径"><a href="#程序配置文件路径" class="headerlink" title="程序配置文件路径"></a>程序配置文件路径</h2><p><code>C:\Users\Kirito\AppData\Roaming\mpv\mpv.conf</code></p>
<h2 id="快捷键配置文件路径"><a href="#快捷键配置文件路径" class="headerlink" title="快捷键配置文件路径"></a>快捷键配置文件路径</h2><p><code>C:\Users\Kirito\AppData\Roaming\mpv\input.conf</code></p>
<p>下面是我的自定义快捷键设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鼠标滑轮调节音量</span></span><br><span class="line"><span class="string">WHEEL_UP</span> <span class="string">add</span> <span class="string">volume</span> <span class="number">1</span></span><br><span class="line"><span class="string">WHEEL_DOWN</span> <span class="string">add</span> <span class="string">volume</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等号键循环切换窗口置顶</span></span><br><span class="line"><span class="string">=</span> <span class="string">cycle</span> <span class="string">ontop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alt + 方向键旋转画面 (依赖 cycle-video-rotate.lua 脚本)</span></span><br><span class="line"><span class="string">alt+left</span> <span class="string">script-message</span> <span class="string">Cycle_Video_Rotate</span> <span class="number">-90</span></span><br><span class="line"><span class="string">alt+right</span> <span class="string">script-message</span> <span class="string">Cycle_Video_Rotate</span> <span class="number">90</span></span><br></pre></td></tr></table></figure>

<h2 id="脚本文件路径"><a href="#脚本文件路径" class="headerlink" title="脚本文件路径"></a>脚本文件路径</h2><p><code>C:\Users\Kirito\AppData\Roaming\mpv\scripts\...</code></p>
<p>脚本是 MPV 配置的重头戏. MPV 启动时, 保存在 scripts 文件夹里的脚本文件会自动加载并且执行. 官方 wiki 里有收录的脚本列表, 可以自行查阅, 寻找自己喜欢的功能脚本.</p>
<h1 id="脚本推荐"><a href="#脚本推荐" class="headerlink" title="脚本推荐"></a>脚本推荐</h1><h2 id="autoload-lua"><a href="#autoload-lua" class="headerlink" title="autoload.lua"></a>autoload.lua</h2><p>autoload.lua: 自动加载当前播放文件目录里的视频文件到播放列表, 也就是自动连播, 原生 MPV 不具有这个功能.</p>
<h2 id="mpv-thumbnail-script-lua"><a href="#mpv-thumbnail-script-lua" class="headerlink" title="mpv_thumbnail_script.lua"></a>mpv_thumbnail_script.lua</h2><p>mpv_thumbnail_script.lua: 生成并显示预览缩略图.</p>
<h2 id="save-sub-delay-lua"><a href="#save-sub-delay-lua" class="headerlink" title="save-sub-delay.lua"></a>save-sub-delay.lua</h2><p>save-sub-delay.lua: 遇到外挂字幕时间轴不正确的情况, 调好之后, 这个脚本会保存 delay 信息.</p>
<h2 id="cycle-video-rotate-lua"><a href="#cycle-video-rotate-lua" class="headerlink" title="cycle-video-rotate.lua"></a>cycle-video-rotate.lua</h2><p>cycle-video-rotate.lua: 实现旋转屏幕效果.</p>
<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>脚本下载地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1ZpZGVvUGxheWVyQ29kZS9tcHYtdG9vbHM=">Github MPV Tools<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>LifeTips</category>
      </categories>
      <tags>
        <tag>MPV</tag>
      </tags>
  </entry>
  <entry>
    <title>社会保险制度</title>
    <url>/kuroha/social_insurance.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="社会保险的结构构成"><a href="#社会保险的结构构成" class="headerlink" title="社会保险的结构构成"></a>社会保险的结构构成</h1><blockquote>
<p>注: 由于后续政策可能变动, 所以在阅读本文之前, 请注意文章的最新更新时间.</p>
</blockquote>
<p>直接上图:</p>
<p><img data-src="/images/life/Social_Insurance.png" alt="保险的构成"></p>
<ul>
<li><p>&quot;社会保险&quot; 简称 &quot;社保&quot;, &quot;城镇职工社会保险&quot; 简称 &quot;职保&quot;, &quot;城乡居民社会保险&quot; 简称 &quot;居保&quot;.</p>
</li>
<li><p>&quot;社保&quot; 一词非常广泛, 内部包含 7 种社会保险.</p>
</li>
<li><p>&quot;社保&quot; 分为两个大类: 一个是针对就业群体的 &quot;职保&quot;, 另一个是针对无业人群的 &quot;居保&quot;.</p>
</li>
<li><p>&quot;职保&quot; 全称: &quot;城镇职工社会保险&quot;, 它包含五种保险: &quot;城镇职工基本养老保险&quot;, &quot;城镇职工基本医疗保险&quot;, &quot;城镇职工失业保险&quot;, &quot;城镇职工工伤保险&quot;, &quot;城镇职工生育保险&quot;.</p>
</li>
<li><p>&quot;居保&quot; 全称: &quot;城乡居民社会保险&quot;, 它只包含两种保险: &quot;城乡居民基本养老保险&quot; 和 &quot;城乡居民基本医疗保险&quot;. 由于 &quot;失业保险&quot;, &quot;工伤保险&quot;, &quot;生育保险&quot; 都是和工作息息相关的, 所以 &quot;居保&quot; 自然不包含这三种保险.</p>
</li>
<li><p>&quot;医保&quot; 一词非常容易混淆, 它指代两种保险: &quot;城镇职工基本医疗保险&quot; 和 &quot;城乡居民基本医疗保险&quot;, 不同情况下要弄清具体含义.</p>
</li>
</ul>
<h2 id="城镇职工基本养老保险"><a href="#城镇职工基本养老保险" class="headerlink" title="城镇职工基本养老保险"></a>城镇职工基本养老保险</h2><ul>
<li><p>&quot;城镇职工基本养老保险&quot; 的目的是保障我们年迈退休后的基本生活需求, 为我们提供稳定可靠的生活经济来源.</p>
</li>
<li><p>&quot;城镇职工基本养老保险&quot; 是由企业和我们按照不同的缴费比例共同缴纳费用的. <font color=red>按月缴纳</font>.</p>
</li>
<li><p>&quot;城镇职工基本养老保险&quot; 的待遇是当我们退休后可以领取到养老金. (有前提条件)</p>
</li>
</ul>
<h2 id="城镇职工基本医疗保险"><a href="#城镇职工基本医疗保险" class="headerlink" title="城镇职工基本医疗保险"></a>城镇职工基本医疗保险</h2><ul>
<li><p>&quot;城镇职工基本医疗保险&quot; 简称 &quot;医保&quot;.</p>
</li>
<li><p>&quot;城镇职工基本医疗保险&quot; 的目的是减轻我们生活中因患病或受伤害而带来的医疗开销.</p>
</li>
<li><p>&quot;城镇职工基本医疗保险&quot; 也是由企业和我们按照不同的缴费比例共同缴纳费用的. <font color=red>按月缴纳</font>.</p>
</li>
<li><p>&quot;城镇职工基本医疗保险&quot; 的待遇是当我们患病并去医疗机构就诊而发生医疗费用后, 由医疗保险机构给予一定的经济补偿.</p>
</li>
</ul>
<h2 id="城镇职工失业保险"><a href="#城镇职工失业保险" class="headerlink" title="城镇职工失业保险"></a>城镇职工失业保险</h2><ul>
<li><p>&quot;城镇职工失业保险&quot; 的目的是为那些因失业而暂时中断生活经济来源的劳动者提供物质帮助以保障其基本生活, 并通过专业训练, 职业介绍等手段为其再就业创造条件.</p>
</li>
<li><p>&quot;城镇职工失业保险&quot; 也是由企业和我们按照不同的缴费比例共同缴纳费用的. <font color=red>按月缴纳</font>.</p>
</li>
<li><p>&quot;城镇职工失业保险&quot; 的最主要待遇是当我们失业时可以领取到失业保险金. (有前提条件)</p>
</li>
</ul>
<h2 id="城镇职工工伤保险"><a href="#城镇职工工伤保险" class="headerlink" title="城镇职工工伤保险"></a>城镇职工工伤保险</h2><ul>
<li><p>&quot;城镇职工工伤保险&quot; 是指劳动者在工作中或在规定的特殊情况下, 遭受意外伤害或患职业病导致暂时或永久丧失劳动能力甚至死亡时, 劳动者或其遗属从国家和社会获得物质帮助的一种社会保险制度.</p>
</li>
<li><p>&quot;城镇职工保险&quot; 生效的认定办法: 工伤保险实行无过错责任原则. 无论工伤事故的责任归于用人单位还是职工个人或第三者, 用人单位均应承担保险责任.</p>
</li>
<li><p>&quot;城镇职工工伤保险&quot; 的缴费: 劳动者不缴纳工伤保险费, <font color = red>全部费用由用人单位负担, 按月缴纳</font>.</p>
</li>
<li><p>&quot;城镇职工工伤保险&quot; 的待遇是当我们因工负伤或职业病暂时或永久失去劳动能力以及死亡时, 可以获得工伤保险金.</p>
</li>
</ul>
<h2 id="城镇职工生育保险"><a href="#城镇职工生育保险" class="headerlink" title="城镇职工生育保险"></a>城镇职工生育保险</h2><ul>
<li><p>&quot;城镇职工生育保险&quot; 是在劳动者因生育子女而导致劳动力暂时中断时, 由国家和社会及时给予物质帮助的一项社会保险制度.</p>
</li>
<li><p>&quot;城镇职工生育保险&quot; 的缴费: 劳动者不缴纳生育保险费, <font color = red>全部费用由用人单位负担, 按月缴纳</font>.</p>
</li>
<li><p>&quot;城镇职工生育保险&quot; 的待遇主要包括两项: 一是生育津贴, 二是生育医疗待遇.</p>
</li>
</ul>
<h2 id="城乡居民基本养老保险"><a href="#城乡居民基本养老保险" class="headerlink" title="城乡居民基本养老保险"></a>城乡居民基本养老保险</h2><ul>
<li><p>&quot;城乡居民基本养老保险&quot; 的目的是保障城镇老年居民和乡村老年居民的基本生活需求, 为他们提供稳定可靠的生活经济来源.</p>
</li>
<li><p>&quot;城乡居民基本养老保险&quot; 的缴费是自选档次进行缴费, 档次越高费用越高, 国家补贴一部分费用. <font color=red>按年缴纳</font>.</p>
</li>
<li><p>&quot;城乡居民基本养老保险&quot; 的待遇也是可以领取到养老金, 采用多缴多得原则, 年轻时上缴的总金额越多, 年迈时领取到的养老金也就越多. (有前提条件))</p>
</li>
</ul>
<h2 id="城乡居民基本医疗保险"><a href="#城乡居民基本医疗保险" class="headerlink" title="城乡居民基本医疗保险"></a>城乡居民基本医疗保险</h2><ul>
<li><p>&quot;城乡居民基本医疗保险&quot; 也简称 &quot;医保&quot;, 医保是最需要大家关注的保险, 应当深入了解学习.</p>
</li>
<li><p>&quot;城乡居民基本医疗保险&quot; 的目的是减轻城镇居民和乡村居民因患病或受伤害而带来的医疗开销.</p>
</li>
<li><p>&quot;城乡居民基本医疗保险&quot; 的缴费也是自选档次进行缴费, 档次越高费用越高, 国家补贴一部分费用. <font color=red>按年缴纳</font>.</p>
</li>
<li><p>&quot;城乡居民基本医疗保险&quot; 的待遇也是当我们患病并去医疗机构就诊而发生医疗费用后, 由医疗保险机构给予一定的经济补偿, 但是报销比例比起 &quot;城镇职工基本医疗保险&quot; 要低一些.</p>
</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="我只是一个农民-我想知道我一直缴纳的-社保-是什么"><a href="#我只是一个农民-我想知道我一直缴纳的-社保-是什么" class="headerlink" title="我只是一个农民, 我想知道我一直缴纳的 &quot;社保&quot; 是什么?"></a>我只是一个农民, 我想知道我一直缴纳的 &quot;社保&quot; 是什么?</h2><p>农民不属于职工, 所以农民所缴纳的社保就是指 &quot;城乡居民社会保险&quot;, 包含 &quot;城乡居民基本养老保险&quot; 和 &quot;城乡居民基本医疗保险&quot; 两种.</p>
<h2 id="我现在只是一名学生-既不是失业-也不是就业-那么我一直缴纳的-社保-是什么"><a href="#我现在只是一名学生-既不是失业-也不是就业-那么我一直缴纳的-社保-是什么" class="headerlink" title="我现在只是一名学生, 既不是失业, 也不是就业, 那么我一直缴纳的 &quot;社保&quot; 是什么?"></a>我现在只是一名学生, 既不是失业, 也不是就业, 那么我一直缴纳的 &quot;社保&quot; 是什么?</h2><p>学生也不属于职工, 所以学生所缴纳的社保也是指 &quot;城乡居民社会保险&quot;, 但是学生不同于农民的地方是学生所缴纳的社保中不包含 &quot;城乡居民基本养老保险&quot;, 只包含 &quot;城乡居民基本医疗保险&quot;. 所以大多数时候老师或者校方会直接询问你是否缴纳 &quot;医保&quot;, 而不是询问你是否缴纳 &quot;社保&quot;. 当然这里所说的 &quot;医保&quot; 就是指 &quot;城乡居民基本医疗保险&quot;.</p>
<h2 id="我刚刚参加工作-听说了-五险一金-它是什么"><a href="#我刚刚参加工作-听说了-五险一金-它是什么" class="headerlink" title="我刚刚参加工作, 听说了 &quot;五险一金&quot;, 它是什么?"></a>我刚刚参加工作, 听说了 &quot;五险一金&quot;, 它是什么?</h2><p>由于已经参加了工作, 便成为了职工人员, 所以就出现了 &quot;五险一金&quot;. &quot;五险&quot; 自然就是指 &quot;城镇职工社会保险&quot; 了, 由于 &quot;城镇职工社会保险&quot; 包含五种保险, 所以也被称作 &quot;五险&quot;, 而 &quot;一金&quot; 指的是 &quot;住房公积金&quot;.</p>
<h2 id="我听说-五险一金-中有一个叫做-生育险-可是我一个男生-交-生育险-有什么用"><a href="#我听说-五险一金-中有一个叫做-生育险-可是我一个男生-交-生育险-有什么用" class="headerlink" title="我听说 &quot;五险一金&quot; 中有一个叫做 &quot;生育险&quot;, 可是我一个男生, 交 &quot;生育险&quot; 有什么用?"></a>我听说 &quot;五险一金&quot; 中有一个叫做 &quot;生育险&quot;, 可是我一个男生, 交 &quot;生育险&quot; 有什么用?</h2><ul>
<li><p>虽然男生们不能生育宝宝, 但是男生们在公司也是有 10 天看护假期的, 按照生育险规定, 已参保的男性职工按规定享受看护假假期津贴.</p>
</li>
<li><p>男生们不能生育宝宝, 但是你的太太是要生育宝宝的啊, 如果你的太太没有就业, 也就没有缴纳生育险, 但是由于你缴纳了 &quot;职保&quot;(职保包含生育险), 那么你的太太同样可以享受其中的生育险待遇.</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2ODQ2NDUwOS9hbnN3ZXIvMzM5NDY1OTQy">知乎用户 ID: 51社保余清泉<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>LifeTips</category>
      </categories>
      <tags>
        <tag>生活知识</tag>
      </tags>
  </entry>
  <entry>
    <title>QBittorrent 实现自动追番</title>
    <url>/kuroha/qbittorrent_proxy.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>先下载安装一下 QBitTorrent, 喜欢折腾的话也可以再下载一下自己喜欢的主题</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucWJpdHRvcnJlbnQub3JnL2Rvd25sb2Fk">QBitTorrent<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FiaXR0b3JyZW50L3FCaXR0b3JyZW50L3dpa2kvTGlzdC1vZi1rbm93bi1xQml0dG9ycmVudC10aGVtZXM=">QBitTorrent Theme<i class="fa fa-external-link-alt"></i></span></p>
<p><img data-src="/images/life/qbittorrent1.png" alt="自定义主题"></p>
<h1 id="蜜柑计划"><a href="#蜜柑计划" class="headerlink" title="蜜柑计划"></a>蜜柑计划</h1><p>RSS 订阅集合, 傻瓜式使用难度, 只说明一点, 不会获取 RSS 链接的话, 直接在 RSS 图标上打开右键菜单, 点击<code>复制链接</code>即可</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9taWthbmFuaS5tZS8=">蜜柑计划<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="QBitTorrent-设置之-代理服务器"><a href="#QBitTorrent-设置之-代理服务器" class="headerlink" title="QBitTorrent 设置之 &quot;代理服务器&quot;"></a>QBitTorrent 设置之 &quot;代理服务器&quot;</h1><p><img data-src="/images/life/qbittorrent3.png" alt="自定义主题"></p>
<p>打开 &quot;设置&quot;, 找到 &quot;连接&quot; 项, 其中有一个 &quot;代理服务器&quot; 的子项目</p>
<p>&quot;类型主机端口&quot; 一栏按照自己的代理设置进行填写, 例如: 类型选择 &quot;HTTP&quot;, 主机填写 &quot;127.0.0.1&quot;, 端口填写 &quot;1080&quot;</p>
<h2 id="通过代理查找主机名"><a href="#通过代理查找主机名" class="headerlink" title="通过代理查找主机名"></a>通过代理查找主机名</h2><p>由于之前的蜜柑计划需要翻墙, 所以必须勾选</p>
<h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>一般不需要勾选</p>
<h3 id="对-BitTorrent-目的使用代理"><a href="#对-BitTorrent-目的使用代理" class="headerlink" title="对 BitTorrent 目的使用代理"></a>对 BitTorrent 目的使用代理</h3><p>一般不需要勾选</p>
<h3 id="使用代理服务器进行用户连接"><a href="#使用代理服务器进行用户连接" class="headerlink" title="使用代理服务器进行用户连接"></a>使用代理服务器进行用户连接</h3><p>一般不需要勾选</p>
<h2 id="对-RSS-目的使用代理"><a href="#对-RSS-目的使用代理" class="headerlink" title="对 RSS 目的使用代理"></a>对 RSS 目的使用代理</h2><p>建议勾选</p>
<h2 id="对常规目的使用代理"><a href="#对常规目的使用代理" class="headerlink" title="对常规目的使用代理"></a>对常规目的使用代理</h2><p>建议勾选</p>
<h1 id="QBitTorrent-设置之-RSS-订阅"><a href="#QBitTorrent-设置之-RSS-订阅" class="headerlink" title="QBitTorrent 设置之 &quot;RSS 订阅&quot;"></a>QBitTorrent 设置之 &quot;RSS 订阅&quot;</h1><p><img data-src="/images/life/qbittorrent4.png" alt="自定义主题"></p>
<p>在 RSS 设置项中勾选 &quot;启用获取 RSS 订阅&quot;</p>
<h1 id="QBitTorrent-设置之-自动下载"><a href="#QBitTorrent-设置之-自动下载" class="headerlink" title="QBitTorrent 设置之 &quot;自动下载&quot;"></a>QBitTorrent 设置之 &quot;自动下载&quot;</h1><p>在 RSS 设置项中勾选 &quot;启用 RSS Torrent 自动下载&quot;</p>
<h1 id="添加-RSS-订阅"><a href="#添加-RSS-订阅" class="headerlink" title="添加 RSS 订阅"></a>添加 RSS 订阅</h1><p><img data-src="/images/life/qbittorrent2.png" alt="自定义主题"></p>
<h1 id="配合-Jellyfin-以及-MPV-食用更佳"><a href="#配合-Jellyfin-以及-MPV-食用更佳" class="headerlink" title="配合 Jellyfin 以及 MPV 食用更佳"></a>配合 Jellyfin 以及 MPV 食用更佳</h1><p>下面是我现在的配置</p>
<p><img data-src="/images/life/qbittorrent5.png" alt="Jellyfin"></p>
<p><img data-src="/images/life/qbittorrent6.png" alt="Jellyfin"></p>
<p><img data-src="/images/life/qbittorrent7.png" alt="Jellyfin"></p>
]]></content>
      <categories>
        <category>LifeTips</category>
      </categories>
      <tags>
        <tag>QBittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title>初学正则表达式</title>
    <url>/program/regular_expression.html</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式?"></a>正则表达式?</h1><blockquote>
<p>正则表达式是一种被用于从文本中检索符合某些特定模式的文本, 英文为 &quot;Regular Expression&quot;, 缩写 &quot;regex&quot; 或者 &quot;regexp&quot;.</p>
</blockquote>
<ol>
<li><p>正则表达式可以很简单的实现比较复杂的字符串匹配逻辑, 来快速地对用户输入施加限制条件.</p>
</li>
<li><p>在日常的文本编辑中, 正则表达式还可以快速的实现复杂的替换操作, 使得文本编辑省时省力.</p>
</li>
<li><p>正则表达式依赖于所处的环境, JavaScript, C#, Java, C++ 等不同的开发语言中以及 VSCode 等不同的文本编辑器下, 正则表达式的匹配规则会有一些细微的差别.</p>
</li>
<li><p>元字符不能写在字符集合 <code>[ ]</code> 的里面. <code>[ ]</code> 中的元字符全部会变为普通字符.</p>
</li>
</ol>
<h1 id="普通元字符"><a href="#普通元字符" class="headerlink" title="普通元字符"></a>普通元字符</h1><table>
<thead>
<tr>
<th align="center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>表示一个除换行符以外的任意字符</td>
</tr>
<tr>
<td align="center">()</td>
<td><strong>字符组</strong>, 占位长度和字符串长度一致, 匹配其中的字符串或者逻辑</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td><strong>字符集合</strong>, 默认占位长度为 1, 匹配集合中的任意一个字符, 可以使用范围符 <code>-</code> 来表示范围, 如: 0-9, a-z, A-Z 等</td>
</tr>
<tr>
<td align="center">[^ ]</td>
<td>否定字符集合, 默认占位长度为 1, 匹配集合中的所有字符以外的任意一个字符</td>
</tr>
<tr>
<td align="center">|</td>
<td>逻辑或</td>
</tr>
<tr>
<td align="center">\</td>
<td>转义符</td>
</tr>
</tbody></table>
<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><p>[<strong>注意</strong>] 字符集名称(<strong>大小写敏感</strong>), \w 和 \W 的含义完全相反.</p>
<table>
<thead>
<tr>
<th align="center">转义符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配所有字母和数字的字符, 某些环境下也会匹配汉字</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配非字母和数字的字符, 某些环境下汉字也会排除</td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配数字: <code>[0-9]</code></td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配非数字: <code>[^ 0-9]</code></td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配任何空白字符, 包括空格, 制表符, 换页符等</td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配非空格符</td>
</tr>
</tbody></table>
<h1 id="次数限定符"><a href="#次数限定符" class="headerlink" title="次数限定符"></a>次数限定符</h1><p>写在一个特定的字符或者字符组 <code>()</code> 的后面, 控制字符或者字符组的出现次数.</p>
<table>
<thead>
<tr>
<th align="center">次数限定符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td>匹配前面的子表达式 0 次或多次</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配前面的子表达式 1 次或多次</td>
</tr>
<tr>
<td align="center">?</td>
<td>匹配前面的子表达式 0 次或 1 次, 或指明一个非贪婪限定符</td>
</tr>
<tr>
<td align="center">{n}</td>
<td>花括号, 匹配前面字符或字符组 n 次</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td>花括号, 匹配前面字符或字符组至少 n 次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td>花括号, 匹配前面字符或字符组至少 n 次, 但是不超过 m 次</td>
</tr>
</tbody></table>
<h1 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h1><p>定位符表示字符所处的位置.</p>
<table>
<thead>
<tr>
<th align="center">定位符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td>表示行的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td>表示行的结束</td>
</tr>
<tr>
<td align="center">\b</td>
<td>匹配一个单词边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td>非单词边界匹配</td>
</tr>
</tbody></table>
<h1 id="前后缀逻辑-断言"><a href="#前后缀逻辑-断言" class="headerlink" title="前后缀逻辑 (断言)"></a>前后缀逻辑 (断言)</h1><p>Q1: 匹配字符串中以全角美元符开头的 &#39;12000.00&#39;</p>
<p><code>12000.00 ￥12000.00 ＄12000.00</code></p>
<p>Q2: 匹配字符串中以全角美元符结尾的 &#39;12000.00&#39;</p>
<p><code>12000.00 12000.00￥ 12000.00＄</code></p>
<p>上面的两个问题, 就可以通过在正则表达式中添加前后缀逻辑来解决. &#39;前后缀逻辑&#39; 是我自己起的名字, 方便自己记忆, 但是有的文章中叫作 &quot;断言&quot;, 有的文章中叫 &quot;预匹配&quot;, 我都感觉好别扭啊!</p>
<p>[<strong>注</strong>] <font color='red'><strong>前后缀逻辑必须写在字符组 () 里面, 如: <code>(?&lt;=K)</code></strong></font>.</p>
<h2 id="前后缀逻辑组件"><a href="#前后缀逻辑组件" class="headerlink" title="前后缀逻辑组件"></a>前后缀逻辑组件</h2><p>[<strong>注</strong>] 下面是前后缀逻辑实现时用到的字符, 不能直接使用, 这样拆开写只是为了容易理解! 切记不可直接使用!</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?&lt;</td>
<td>前缀描述符, 必须写在 &quot;被描述字符或字符组&quot; 的 <code>前面</code></td>
</tr>
<tr>
<td align="center">?</td>
<td>后缀描述符, 必须写在 &quot;被描述字符或字符组&quot; 的 <code>后面</code></td>
</tr>
<tr>
<td align="center">&#x3D;</td>
<td>是</td>
</tr>
<tr>
<td align="center">!</td>
<td>不是</td>
</tr>
</tbody></table>
<h2 id="前缀逻辑-前行断言"><a href="#前缀逻辑-前行断言" class="headerlink" title="前缀逻辑 (前行断言)"></a>前缀逻辑 (前行断言)</h2><p><img data-src="/images/program/regular_expression_01.png" alt="前行断言"></p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?&lt;&#x3D;)</td>
<td><code>前缀为</code> 描述符</td>
</tr>
<tr>
<td align="center">(?&lt;!)</td>
<td><code>前缀不为</code> 描述符</td>
</tr>
</tbody></table>
<p>[<strong>注</strong>] 前缀描述符必须写在 &quot;被描述字符或字符组&quot; 的 <code>前面</code> ! 切记 !</p>
<p>示例:</p>
<p><code>(?&lt;=K)[0-9]&#123;11&#125;</code>: 匹配以 &#39;K&#39; 为前缀的 11 位数字.</p>
<p><code>(?&lt;!K)[0-9]&#123;11&#125;</code>: 匹配不以 &#39;K&#39; 为前缀的 11 位数字.</p>
<h2 id="后缀逻辑-后行断言"><a href="#后缀逻辑-后行断言" class="headerlink" title="后缀逻辑 (后行断言)"></a>后缀逻辑 (后行断言)</h2><p><img data-src="/images/program/regular_expression_02.png" alt="后行断言"></p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?&#x3D;)</td>
<td><code>后缀为</code> 描述符</td>
</tr>
<tr>
<td align="center">(?!)</td>
<td><code>后缀不为</code> 描述符</td>
</tr>
</tbody></table>
<p>[<strong>注</strong>] 后缀描述符必须写在 &quot;被描述字符或字符组&quot; 的 <code>后面</code> ! 切记 !</p>
<p>示例:</p>
<p><code>[\d]&#123;11&#125;(?=K)</code>: 匹配以 &#39;K&#39; 为后缀的 11 位数字.</p>
<p><code>[\d]&#123;11&#125;(?!K)</code>: 匹配不以 &#39;K&#39; 为后缀的 11 位数字.</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>A1: <code>(?&lt;=＄)[\d.]+</code> <font color='red'>答案不唯一</font></p>
<p>A2: <code>[\d.]+(?=＄)</code> <font color='red'>答案不唯一</font></p>
<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>会修改正则表达式的匹配模式, 可以以任意顺序或组合使用, 先将要修饰的整个正则表达式前后加一个 <code>/</code> 字符, 然后在后面的 <code>/</code> 字符后面加修饰符.</p>
<table>
<thead>
<tr>
<th align="center">标记</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>不区分大小写: 将匹配设置为不区分大小写.</td>
</tr>
<tr>
<td align="center">g</td>
<td>全局搜索: 搜索整个输入字符串中的所有匹配.</td>
</tr>
<tr>
<td align="center">m</td>
<td>多行匹配: 会匹配输入字符串每一行.</td>
</tr>
</tbody></table>
<p>示例:</p>
<ul>
<li><p><code>/(T|t)he/gi</code> : 全局搜索, 不区分大小写, 正则: <code>(T|t)he</code></p>
</li>
<li><p><code>/.(at)/g</code> : 全局搜索, 正则: <code>.(at)</code></p>
</li>
<li><p><code>/at(.)?$/gm</code> :全局搜索, 多行匹配, 正则: <code>at(.)?$</code></p>
</li>
</ul>
<h1 id="C-中的正则表达式"><a href="#C-中的正则表达式" class="headerlink" title="C# 中的正则表达式"></a>C# 中的正则表达式</h1><ol>
<li>全部匹配</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> content = <span class="string">&quot;content&quot;</span>;</span><br><span class="line">Regex regex = <span class="keyword">new</span> Regex(<span class="string">@&quot;[0-9]&#123;8&#125;&quot;</span>);</span><br><span class="line">MatchCollection matchs = regex.Matches(content);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matchs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(match.Value))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//TODO...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>匹配第一项</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> content = <span class="string">&quot;content&quot;</span>;</span><br><span class="line">Regex regex = <span class="keyword">new</span> Regex(<span class="string">@&quot;[0-9]&#123;8&#125;&quot;</span>);</span><br><span class="line">Match match = regex.Match(content);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(match.Value))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//TODO...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Program</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式 断言</title>
    <url>/program/regular_assert.html</url>
    <content><![CDATA[<p>先放断言的手册链接 : <span class="exturl" data-url="aHR0cHM6Ly93d3cucmVndWxhci1leHByZXNzaW9ucy5pbmZvL2xvb2thcm91bmQuaHRtbA==">https://www.regular-expressions.info/lookaround.html<i class="fa fa-external-link-alt"></i></span></p>
<p>正则表达式的断言全称是: <code>Lookahead and Lookbehind Zero-Length Assertions</code>, 分为前瞻和后瞻, 符号是 <code>?=</code> 和 <code>?&lt;=</code>, 同时它们都有其对应的反匹配, 就像数字的正反一样, 把 <code>=</code> 换成 <code>!</code> 就行了, 分别为 <code>?!</code> 和 <code>?&lt;!</code></p>
<h1 id="🍒-断言"><a href="#🍒-断言" class="headerlink" title="🍒 断言"></a>🍒 断言</h1><p>直接统一说明断言, 断言也是一种零宽匹配, 就像 <code>^</code> 和 <code>$</code> 一样, 返回的是位置</p>
<p>为了方便理解, 以编辑器为例, 一般正则都是返回匹配到的字符, 而断言返回的是光标, 不是字符, 注意看下面举例图片中光标的位置</p>
<p><code>^</code> 返回的是行首</p>
<p><img data-src="/images/program/regular_expression_10.png" alt="行首"></p>
<p><code>$</code> 返回的是行尾</p>
<p><img data-src="/images/program/regular_expression_11.png" alt="行尾"></p>
<p><code>(?=)</code> 前瞻返回的是匹配到的字符串的头, 比如 <code>(?=￥)</code> 返回的是</p>
<p><img data-src="/images/program/regular_expression_12.png" alt="前瞻"></p>
<p><code>(?&lt;=)</code> 后瞻返回的是匹配到的字符串的尾, 比如 <code>(?&lt;=￥)</code> 返回的是</p>
<p><img data-src="/images/program/regular_expression_13.png" alt="后瞻"></p>
<p>前后瞻无非返回的位置一前一后, 其他的都一致, 这就是断言了, 但是理解了这个不代表会用, 我们还要学习一些它们的用法, 阅读后面的示例是请先自己独立思考, 之后再看答案</p>
<h1 id="🌰-断言的使用"><a href="#🌰-断言的使用" class="headerlink" title="🌰 断言的使用"></a>🌰 断言的使用</h1><h2 id="实现前缀判断"><a href="#实现前缀判断" class="headerlink" title="实现前缀判断"></a>实现前缀判断</h2><p>比如现在想要匹配到前缀是 # 的 1 个数字, 怎么用断言实现呢?</p>
<p>答案是 <code>(?&lt;=#)(\d)</code></p>
<p><code>?&lt;=#</code> 返回的就是 # 字符后面的位置, 然后从这个位置 <code>匹配后面的</code> 一个数字, 就实现了前缀是 # 的效果</p>
<p>总结: 将 <code>后瞻</code> 写在 <code>前面</code> 实现前缀判断</p>
<h2 id="实现后缀判断"><a href="#实现后缀判断" class="headerlink" title="实现后缀判断"></a>实现后缀判断</h2><p>匹配到后缀是 # 的 1 个数字, 怎么用断言实现呢?</p>
<p>答案是 <code>(\d)(?=#)</code></p>
<p><code>?=#</code> 返回的就是 # 字符前面的位置, 然后从这个位置开始 <code>匹配前面的</code> 匹配一个数字, 就实现了后缀是 # 的效果</p>
<p>总结: 将 <code>前瞻</code> 写在 <code>后面</code> 实现后缀判断</p>
<h1 id="🌰-断言的阅读"><a href="#🌰-断言的阅读" class="headerlink" title="🌰 断言的阅读"></a>🌰 断言的阅读</h1><h2 id="d"><a href="#d" class="headerlink" title="(?!\d)(.+)"></a><code>(?!\d)(.+)</code></h2><p>上面表达式的含义是 ? 对于以下文本, 匹配的结果是什么 ?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1123jkh123123coll%iderqweasdfzxv</span><br><span class="line">1244collider5567%ertdf</span><br><span class="line">kjhkj123klcolliderhlazcvg</span><br><span class="line">123123jhk%j123klcolltyughj</span><br><span class="line">ider5567asdf</span><br><span class="line">123123col23jkhfg</span><br><span class="line">collidercol2%3jkh</span><br></pre></td></tr></table></figure>

<p>答案是 <strong>匹配一行中不以数字开头的部分</strong>, 结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jkh123123coll%iderqweasdfzxv</span><br><span class="line">collider5567%ertdf</span><br><span class="line">kjhkj123klcolliderhlazcvg</span><br><span class="line">jhk%j123klcolltyughj</span><br><span class="line">ider5567asdf</span><br><span class="line">col23jkhfg</span><br><span class="line">collidercol2%3jkh</span><br></pre></td></tr></table></figure>

<p><code>(?!\d)</code> 返回的是非数字的前面的位置, 然后从这个位置开始匹配任意串, 所以实现的是 <code>提取一行中不以数字开头的部分</code>, 这个也可以使用 <code>([^\d])+(.+)</code> 实现</p>
<h2 id="collider"><a href="#collider" class="headerlink" title="^((?!collider)(.))+$"></a><code>^((?!collider)(.))+$</code></h2><p>上方表达式的含义是 ? 对于以下文本, 匹配的结果是什么 ?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1123jkh123123colliderqweasdfzxv</span><br><span class="line">1244collider5567%ertdf</span><br><span class="line">kjhkj123klcolliderhlazcvg</span><br><span class="line">123123jhk%j123klcolltyughj</span><br><span class="line">ider5567asdf</span><br><span class="line">123123col23jkhfg</span><br><span class="line">collidercol2%3jkh</span><br></pre></td></tr></table></figure>

<p>答案是 <strong>匹配不包含单词 collider 的整行串</strong>, 结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123123jhk%j123klcolltyughj</span><br><span class="line">ider5567asdf</span><br><span class="line">123123col23jkhfg</span><br></pre></td></tr></table></figure>

<p>使用 <code>^((.)(?&lt;!collider))+$</code> 也可以实现同样的效果</p>
<p><code>(.)</code> 是匹配任意字符, 之后是一个放在前面的前瞻断言, 含义是 <strong>后面不是collider的位置</strong>, 结合起来便是 <strong>不是以collider开头的字符</strong>, 不是以collider开头的字符 ? ? ? 不是以collider这个单词开头的字符 ? ? ? 不是以单词开头的字符 ? ? ? 这是什么鬼 ? ? ? 什么叫以单词开头的字符 ? ? ?</p>
<p>翻译一下, 就是 <strong>不是紧跟着ollider的字符c的任意字符</strong>, 也就是从任意字符中把一个 <code>以ollider结尾的字符c</code> 排除了, 其他的 c 可以, 以 ollider 结尾的 c 不行</p>
<p>最后在外面使用 <code>^()+$</code> 包起来, 表示只使用这样的字符构成一整行, 就是上面解析的, 使用 <strong>不是紧跟着ollider的字符c的任意字符</strong> 构成整行, 就实现了 <strong>不包含单词 collider 的行</strong> 的效果</p>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Program</tag>
      </tags>
  </entry>
  <entry>
    <title>使用正则表达式捕获分组并使用分组</title>
    <url>/program/regular_common.html</url>
    <content><![CDATA[<h1 id="捕获符号-以及-捕获后的使用"><a href="#捕获符号-以及-捕获后的使用" class="headerlink" title="捕获符号 以及 捕获后的使用"></a>捕获符号 以及 捕获后的使用</h1><p>最常使用的场景是: 需要使用正则表达式进行替换, 但是同时需要使用到正则表达式所匹配到的内容, 这时候就需要用到分组了, 举个非常简单的栗子🌰, 将下面的代码段一替换为代码段二</p>
<p><strong>代码段一</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tempTool001 = <span class="keyword">new</span> RefCleanerController();</span><br><span class="line"><span class="keyword">var</span> tempTool002 = <span class="keyword">new</span> TextureAnalysis();</span><br><span class="line"><span class="keyword">var</span> tempTool003 = <span class="keyword">new</span> MeshAnalysis();</span><br><span class="line"><span class="keyword">var</span> tempTool004 = <span class="keyword">new</span> ProfilerTool();</span><br><span class="line"><span class="keyword">var</span> tempTool005 = <span class="keyword">new</span> AnimeClipCompress();</span><br><span class="line"><span class="keyword">var</span> tempTool006 = <span class="keyword">new</span> BrokenAssetChecker();</span><br><span class="line"><span class="keyword">var</span> tempTool007 = <span class="keyword">new</span> RefCleanerMat();</span><br><span class="line"><span class="keyword">var</span> tempTool008 = <span class="keyword">new</span> PreCombineMesh();</span><br><span class="line"><span class="keyword">var</span> tempTool009 = <span class="keyword">new</span> MeshUVViewer();</span><br><span class="line"><span class="keyword">var</span> tempTool010 = <span class="keyword">new</span> PreStaticBatches();</span><br><span class="line"><span class="keyword">var</span> tempTool011 = <span class="keyword">new</span> GuidFinder();</span><br><span class="line"><span class="keyword">var</span> tempTool012 = <span class="keyword">new</span> AssetOperateTool();</span><br><span class="line"><span class="keyword">var</span> tempTool013 = <span class="keyword">new</span> AssetRenameTool();</span><br><span class="line"><span class="keyword">var</span> tempTool014 = <span class="keyword">new</span> SoCreator();</span><br><span class="line"><span class="keyword">var</span> tempTool015 = <span class="keyword">new</span> LODBatchTool();</span><br><span class="line"><span class="keyword">var</span> tempTool016 = <span class="keyword">new</span> MissingChecker();</span><br><span class="line"><span class="keyword">var</span> tempTool017 = <span class="keyword">new</span> RemoveRepeatCharacter();</span><br><span class="line"><span class="keyword">var</span> tempTool018 = <span class="keyword">new</span> About();</span><br></pre></td></tr></table></figure>

<p><strong>代码段二</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">AddTool&lt;RefCleanerController&gt;();</span><br><span class="line">AddTool&lt;TextureAnalysis&gt;();</span><br><span class="line">AddTool&lt;MeshAnalysis&gt;();</span><br><span class="line">AddTool&lt;ProfilerTool&gt;();</span><br><span class="line">AddTool&lt;AnimeClipCompress&gt;();</span><br><span class="line">AddTool&lt;BrokenAssetChecker&gt;();</span><br><span class="line">AddTool&lt;RefCleanerMat&gt;();</span><br><span class="line">AddTool&lt;PreCombineMesh&gt;();</span><br><span class="line">AddTool&lt;MeshUVViewer&gt;();</span><br><span class="line">AddTool&lt;PreStaticBatches&gt;();</span><br><span class="line">AddTool&lt;GuidFinder&gt;();</span><br><span class="line">AddTool&lt;AssetOperateTool&gt;();</span><br><span class="line">AddTool&lt;AssetRenameTool&gt;();</span><br><span class="line">AddTool&lt;SoCreator&gt;();</span><br><span class="line">AddTool&lt;LODBatchTool&gt;();</span><br><span class="line">AddTool&lt;MissingChecker&gt;();</span><br><span class="line">AddTool&lt;RemoveRepeatCharacter&gt;();</span><br><span class="line">AddTool&lt;About&gt;();</span><br></pre></td></tr></table></figure>

<p>在不使用多行编辑的情况下, 想一步将代码段一替换为代码段二还是很麻烦的, 基本都是花费好几步才能完成, 但是使用捕获就不一样了</p>
<p>搜索栏填写 : <code>.*new (\w+).*</code></p>
<p>替换栏填写 : <code>AddTool&lt;$1&gt;();</code></p>
<p>其中使用 <strong>$数字</strong> 来引用正则中匹配到的内容, 在第几个 () 中就是第几组, 序号从 1 开始</p>
<h1 id="使用捕获来实现字符大小写转换"><a href="#使用捕获来实现字符大小写转换" class="headerlink" title="使用捕获来实现字符大小写转换"></a>使用捕获来实现字符大小写转换</h1><blockquote>
<p>\l 首字母变小写, \u 首字母变大写</p>
<p>\L 字符串变小写, \U 字符串变大写</p>
</blockquote>
<p>还是以上面的字符串举例, 搜索栏依旧填写: <code>^var .*new (\w+).*</code>, 替换栏中输入: <code>\U$1</code>, 最终的结果便是:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">REFCLEANERCONTROLLER</span><br><span class="line">TEXTUREANALYSIS</span><br><span class="line">MESHANALYSIS</span><br><span class="line">PROFILERTOOL</span><br><span class="line">ANIMECLIPCOMPRESS</span><br><span class="line">BROKENASSETCHECKER</span><br><span class="line">REFCLEANERMAT</span><br><span class="line">PRECOMBINEMESH</span><br><span class="line">MESHUVVIEWER</span><br><span class="line">PRESTATICBATCHES</span><br><span class="line">GUIDFINDER</span><br><span class="line">ASSETOPERATETOOL</span><br><span class="line">ASSETRENAMETOOL</span><br><span class="line">SOCREATOR</span><br><span class="line">LODBATCHTOOL</span><br><span class="line">MISSINGCHECKER</span><br><span class="line">REMOVEREPEATCHARACTER</span><br><span class="line">ABOUT</span><br></pre></td></tr></table></figure>

<h1 id="一些常用的表达式"><a href="#一些常用的表达式" class="headerlink" title="一些常用的表达式"></a>一些常用的表达式</h1><h2 id="不能包含某些字符"><a href="#不能包含某些字符" class="headerlink" title="不能包含某些字符"></a>不能包含某些字符</h2><ul>
<li><p>整行中不包含汉字</p>
<p>  <code>^[^\u4e00-\u9fa5]+$</code></p>
</li>
<li><p>整行中不包含数字</p>
<p>  <code>^[^\d]+$</code></p>
</li>
<li><p>整行中不包含字母</p>
<p>  <code>^[^a-zA-Z]+$</code></p>
</li>
</ul>
<h2 id="整行中不能包含某些词汇"><a href="#整行中不能包含某些词汇" class="headerlink" title="整行中不能包含某些词汇"></a>整行中不能包含某些词汇</h2><ul>
<li><p>不包含 &quot;包含&quot;</p>
<p>  <code>^(.(?!包含))*$</code></p>
</li>
<li><p>不包含 &quot;Collider&quot;</p>
<p>  <code>^(.(?!Collider))*$</code></p>
</li>
<li><p>不包含 &quot;00&quot;</p>
<p>  <code>^(.(?!00))*$</code></p>
</li>
</ul>
<h2 id="整行只由某些字符构成"><a href="#整行只由某些字符构成" class="headerlink" title="整行只由某些字符构成"></a>整行只由某些字符构成</h2><ul>
<li><p>纯汉字</p>
<p>  <code>^[\u4e00-\u9fa5]+$</code></p>
</li>
<li><p>纯字母</p>
<p>  <code>^[a-zA-Z]+$</code></p>
</li>
<li><p>纯数字</p>
<p>  <code>^[\d]+$</code></p>
</li>
</ul>
<h2 id="整行只由某些词汇构成"><a href="#整行只由某些词汇构成" class="headerlink" title="整行只由某些词汇构成"></a>整行只由某些词汇构成</h2><ul>
<li><p>只有 Android, iOS, PC</p>
<p>  <code>^((Android)|(iOS)|(PC))+$</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>Program</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 自定义编辑器</title>
    <url>/unity_editor/unity_editor.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="如何添加嵌套资源"><a href="#如何添加嵌套资源" class="headerlink" title="如何添加嵌套资源"></a>如何添加嵌套资源</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AssetDatabase.AddObjectToAsset(asset, prefab);</span><br></pre></td></tr></table></figure>

<h1 id="如何完整地拷贝一个组件"><a href="#如何完整地拷贝一个组件" class="headerlink" title="如何完整地拷贝一个组件"></a>如何完整地拷贝一个组件</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">UnityEditorInternal.ComponentUtility.CopyComponent(collider);</span><br><span class="line">UnityEditorInternal.ComponentUtility.PasteComponentAsNew(colliderObject);</span><br></pre></td></tr></table></figure>

<h1 id="如何获取全部特定类型的物体"><a href="#如何获取全部特定类型的物体" class="headerlink" title="如何获取全部特定类型的物体"></a>如何获取全部特定类型的物体</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Resources</span></span><br><span class="line">Resources.FindObjectsOfTypeAll&lt;Transform&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObjectOf</span></span><br><span class="line">UnityEngine.Object.FindObjectOfType&lt;FunnyToolController&gt;(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObjectBy</span></span><br><span class="line">UnityEngine.Object.FindObjectsByType&lt;Transform&gt;(FindObjectsInactive.Include, FindObjectsSortMode.None);</span><br></pre></td></tr></table></figure>

<h1 id="如何改变反射出来的值的类型"><a href="#如何改变反射出来的值的类型" class="headerlink" title="如何改变反射出来的值的类型"></a>如何改变反射出来的值的类型</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">memoryProfilerWindow = Convert.ChangeType(window, memoryProfilerWindowClass);</span><br></pre></td></tr></table></figure>

<h1 id="相对路径和绝对路径的转换"><a href="#相对路径和绝对路径的转换" class="headerlink" title="相对路径和绝对路径的转换"></a>相对路径和绝对路径的转换</h1><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">selectedMatCapPath = FileUtil.GetProjectRelativePath(selectedMatCapPath);</span><br></pre></td></tr></table></figure>

<h1 id="Unity-Selection-类"><a href="#Unity-Selection-类" class="headerlink" title="Unity Selection 类"></a>Unity Selection 类</h1><p>先说一下 Unity.Selection 类, 这个类可以获取我们在编辑器模式下的输入, 因为编辑器模式下各种方法逻辑的触发更多的是使用按钮的方法, 所以<strong>获取输入</strong>是排在第一位的.</p>
<h2 id="Selection-activeTransform"><a href="#Selection-activeTransform" class="headerlink" title="Selection.activeTransform"></a><code>Selection.activeTransform</code></h2><p>仅在 Hierarchy 面板中生效;</p>
<p>这个静态字段会返回在 Hierarchy 面板中选中的游戏物体;</p>
<p>如果选择多个则只返回第一个; 如果没有选择, 则返回 null; null 可以直接在 if 中进行判断, 相等于 false.</p>
<h2 id="Selection-activeGameObject"><a href="#Selection-activeGameObject" class="headerlink" title="Selection.activeGameObject"></a><code>Selection.activeGameObject</code></h2><p>在 Hierarchy 面板和 Project 面板中都有效;</p>
<p>在 Hierarchy 面板中返回的是当前选中的游戏物体(任意物体);</p>
<p>在 Project 面板中返回的是当前选中的<strong>预制体</strong>(Prefab);</p>
<p>如果选择多个则只返回第一个; 如果没有选择或者选择的目标不符合上述条件的都会返回 null.</p>
<h2 id="Selection-activeObject"><a href="#Selection-activeObject" class="headerlink" title="Selection.activeObject"></a><code>Selection.activeObject</code></h2><p>在 Hierarchy 面板和 Project 面板中都有效;</p>
<p>在 Hierarchy 面板中返回的是当前选中的游戏物体(任意物体);</p>
<p>在 Project 面板中返回的是当前选中的<strong>任意资源</strong>;</p>
<p>如果选择多个则只返回第一个; 如果没有选择或者选择的目标不符合上述条件的都会返回 null.</p>
<h2 id="Selection-transforms"><a href="#Selection-transforms" class="headerlink" title="Selection.transforms"></a><code>Selection.transforms</code></h2><p>Selection.activeTransform 方法的复数版本, 返回一个数组, 包含所有符合 Selection.activeTransform 条件的物体.</p>
<h2 id="Selection-gameObjects"><a href="#Selection-gameObjects" class="headerlink" title="Selection.gameObjects"></a><code>Selection.gameObjects</code></h2><p>Selection.activeGameObject 方法的复数版本, 返回一个数组, 包含所有符合 Selection.activeGameObject 条件的物体.</p>
<h2 id="Selection-objects"><a href="#Selection-objects" class="headerlink" title="Selection.objects"></a><code>Selection.objects</code></h2><p>Selection.activeObject 方法的复数版本, 返回一个数组, 包含所有符合 Selection.activeObject 条件的物体.</p>
<h2 id="Selection-selectionChanged"><a href="#Selection-selectionChanged" class="headerlink" title="Selection.selectionChanged"></a><code>Selection.selectionChanged</code></h2><p>一个委托, 当选择的东西发生变化的时候会自动调用. 可以用来监测选择的游戏物体是否发生了改变.</p>
<h1 id="C-特性-MenuItem-A-B-true-15"><a href="#C-特性-MenuItem-A-B-true-15" class="headerlink" title="C# 特性 [MenuItem(&quot;A&#x2F;B&quot;, true, 15)]"></a>C# 特性 [MenuItem(&quot;A&#x2F;B&quot;, true, 15)]</h1><p>MenuItem 特性用于向主菜单 (Unity 标题栏下的一行菜单) 和检视面板上下文菜单 (也就是 Inspector 的设置菜单 CONTEXT 菜单) 添加菜单项.</p>
<p>能够将任何<strong>静态函数</strong>转变为菜单命令, <strong>仅静态函数可使用 MenuItem 特性</strong>, 另外 Unity 还支持创建带有热键的菜单项哦.</p>
<table>
<thead>
<tr>
<th align="left">代码示例</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%</td>
<td align="left">Ctrl</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left">Shift</td>
</tr>
<tr>
<td align="left">&amp;</td>
<td align="left">Alt</td>
</tr>
<tr>
<td align="left">LEFT, RIGHT, UP, DOWN</td>
<td align="left">LEFT, RIGHT, UP, DOWN</td>
</tr>
<tr>
<td align="left">F1 .. F12</td>
<td align="left">F1 .. F12</td>
</tr>
<tr>
<td align="left">HOME, END, PGUP, PGDN</td>
<td align="left">HOME, END, PGUP, PGDN</td>
</tr>
<tr>
<td align="left">MyMenu&#x2F;Do Something #&amp;g</td>
<td align="left">Shift + Alt + g</td>
</tr>
<tr>
<td align="left">MyMenu&#x2F;Do Something _g</td>
<td align="left">g</td>
</tr>
</tbody></table>
<h2 id="MenuItem-的第一个参数为菜单项的路径和名称"><a href="#MenuItem-的第一个参数为菜单项的路径和名称" class="headerlink" title="MenuItem 的第一个参数为菜单项的路径和名称."></a>MenuItem 的第一个参数为菜单项的路径和名称.</h2><ul>
<li>如果要扩展 Project 面板的右键菜单, 则路径必须以 Assets 开头.</li>
<li>如果要扩展 Hierarchy 面板的右键菜单, 则路径必须以 GameObject 开头.</li>
<li>以其他名称开头时, 创建的菜单会显示在主菜单上.</li>
</ul>
<h2 id="MenuItem-的第二个参数标记方法是否为同名菜单项的验证方法"><a href="#MenuItem-的第二个参数标记方法是否为同名菜单项的验证方法" class="headerlink" title="MenuItem 的第二个参数标记方法是否为同名菜单项的验证方法."></a>MenuItem 的第二个参数标记方法是否为同名菜单项的验证方法.</h2><ul>
<li>当被修饰方法返回值不是 bool 类型时, 始终应设置为 false.</li>
<li>当被修饰方法返回值是 bool 类型时:<ul>
<li>true: 当被修饰方法返回 false 时, 同名的菜单项会隐藏; 当被修饰方法返回 true 时, 同名的菜单项才会显示出来.</li>
<li>false: 标记此方法不是同名菜单项的验证方法. (当然此时的 bool 返回值也就没有了意义)</li>
</ul>
</li>
</ul>
<p>因此这个参数的使用场景为:</p>
<p>当某个菜单项只能在某些特定条件下才能显示的时候使用, 创建两个同名的 MenuItem(), 其中一个设置第二个参数为 true, 逻辑就是菜单项显示条件, 而另一个则是真正的菜单项方法.</p>
<h2 id="MenuItem-的第三个参数是显示优先级"><a href="#MenuItem-的第三个参数是显示优先级" class="headerlink" title="MenuItem 的第三个参数是显示优先级."></a>MenuItem 的第三个参数是显示优先级.</h2><ul>
<li>优先级打开主菜单查看当前有多少菜单项, 依次向后排序即可.</li>
<li>如果想要让菜单项在 Hierarchy 面板的右键菜单中也显示出来的话, 推荐将优先级设置为大于等于 11 的数值, 因为 0 - 10 优先级会导致自定义的菜单项穿插在 Unity 原生菜单项中间, 具体每个优先级的位置可以参照下面的图片.</li>
</ul>
<h2 id="MenuItem-的优先级排序"><a href="#MenuItem-的优先级排序" class="headerlink" title="MenuItem 的优先级排序"></a>MenuItem 的优先级排序</h2><p><img data-src="/images/unity_editor/menuitem_roder_1.png" alt="顶部菜单"></p>
<p><img data-src="/images/unity_editor/menuitem_roder_2.png" alt="Hierarchy 右键菜单"></p>
<p>结论:</p>
<ol>
<li><strong>负优先级</strong> 和 <strong>0 ~ 49</strong>, 会同时显示在顶部菜单和右键菜单中.</li>
<li><strong>顶层菜单项</strong>之间相差 11 及以上会产生分割线, 相差 10 不行.</li>
<li>顶部菜单项的<strong>子菜单项</strong>之间相差 11 也会产生分割线, 但是右键菜单的<strong>子菜单项</strong>之间即使相差 100 也不会产生分割线.</li>
<li>即使是相同优先级, 只要菜单项名称不同则都会显示.</li>
<li>具有子菜单项的菜单, 他的优先级和优先级最高的子菜单项保持一致.</li>
<li>从优先级 <strong>11</strong> 开始, 自定义菜单项就会全部显示在 Unity 原生菜单项的下方.</li>
<li>如果有一个菜单项的名称刚好和一些子菜单项的顶层菜单名称一致了, 那么这个菜单项会丢失, 仅剩下子菜单项的顶层菜单, 仅作为菜单项的文件夹, <strong>无任何作用</strong>.</li>
</ol>
<h1 id="扩展-Project-视图"><a href="#扩展-Project-视图" class="headerlink" title="扩展 Project 视图"></a>扩展 Project 视图</h1><h2 id="扩展-Project-视图的右键菜单"><a href="#扩展-Project-视图的右键菜单" class="headerlink" title="扩展 Project 视图的右键菜单"></a>扩展 Project 视图的右键菜单</h2><ul>
<li>定义静态行为类: 无继承关系, 放到 Editor 文件夹下.</li>
<li>定义菜单项: <code>[MenuItem(&quot;Menu Item Path&quot;, false, 1)]</code>.</li>
<li>扩展 Project 视图时, 菜单项的路径必须以 <strong>Assets&#x2F;</strong> 开头, 原因是 Project 视图的右键菜单就是标题栏中的 Assets 菜单.</li>
<li>如果以标题栏中没有的名称作为路径开头, 则标题栏中会出现一个新的对应名称的菜单.</li>
<li>定义菜单行为方法: 菜单行为方法推荐是 <code>private static void FunctionName()</code> 类型.</li>
</ul>
<h2 id="扩展-Project-布局"><a href="#扩展-Project-布局" class="headerlink" title="扩展 Project 布局"></a>扩展 Project 布局</h2><p>扩展 Project 布局的原理就是 Unity 会监听 <code>EditorApplication.projectWindowItemOnGUI</code> 渲染回调, 因此脚本代码的思路就是写一个方法用来对委托 <code>EditorApplication.projectWindowItemOnGUI</code> 进行注册. 并且这个方法必须在 C# 代码编译完成后立即自动执行.</p>
<p>Unity 中提供了实现这个效果的属性, 使用 <code>[InitializeOnLoadMethod]</code> 属性可以让被修饰的方法在代码编译完成后自动执行.</p>
<p>有了自动执行的方法了, 那么我们就可以在这个方法中, 对 <code>EditorApplication.projectWindowItemOnGUI</code> 委托进行注册. 注册的内容就是我们想要实现的操作.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 扩展 Project 布局</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment">// 由于扩展布局的方法无法进行手动调用, 所以使用这个属性进行自动调用</span></span><br><span class="line">[<span class="meta">InitializeOnLoadMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeOnLoadMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 对 projectWindowItemOnGUI 进行注册</span></span><br><span class="line">    EditorApplication.projectWindowItemOnGUI += (guid, selectionRect) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 前提是必须选中预制体 Prefab</span></span><br><span class="line">        <span class="keyword">if</span> (!Selection.activeGameObject)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (guid != AssetDatabase.AssetPathToGUID(AssetDatabase.GetAssetPath(Selection.activeGameObject)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义绘制按钮时需要用到的矩形, selectionRect 原本是当前选中时 Unity 中的蓝色的高亮矩形框.</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">float</span> WIDTH = <span class="number">50f</span>;</span><br><span class="line">        Rect projectRect = <span class="keyword">new</span> Rect(</span><br><span class="line">            selectionRect.x += selectionRect.width - WIDTH,</span><br><span class="line">            selectionRect.y,</span><br><span class="line">            WIDTH,</span><br><span class="line">            selectionRect.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置接下来绘制按钮时要使用的颜色</span></span><br><span class="line">        GUI.color = Color.red;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制按钮, 显示文本: click</span></span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(projectRect, <span class="string">&quot;click&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 定义按钮点击后的行为</span></span><br><span class="line">            Debug.Log(<span class="string">$&quot;click: <span class="subst">&#123;Selection.activeObject.name&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制完成后将颜色重置</span></span><br><span class="line">        GUI.color = Color.white;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="扩展-Hierarchy-视图"><a href="#扩展-Hierarchy-视图" class="headerlink" title="扩展 Hierarchy 视图"></a>扩展 Hierarchy 视图</h1><h2 id="扩展-Hierarchy-视图的右键菜单"><a href="#扩展-Hierarchy-视图的右键菜单" class="headerlink" title="扩展 Hierarchy 视图的右键菜单"></a>扩展 Hierarchy 视图的右键菜单</h2><p>[<strong>注</strong>] 扩展 Project 视图的脚本和扩展 Hierarchy 视图的脚本不能是一个, 必须分开.</p>
<ul>
<li>扩展 Hierarchy 视图和扩展 Project 视图的操作相同, 只是菜单项的路径必须以 <strong>GameObject&#x2F;</strong> 开头, 原因是 Hierarchy 视图的右键菜单就是标题栏中的 GameObject 菜单.</li>
</ul>
<h2 id="Hierarchy-视图的右键菜单的顺序"><a href="#Hierarchy-视图的右键菜单的顺序" class="headerlink" title="Hierarchy 视图的右键菜单的顺序"></a>Hierarchy 视图的右键菜单的顺序</h2><h2 id="扩展-Hierarchy-布局"><a href="#扩展-Hierarchy-布局" class="headerlink" title="扩展 Hierarchy 布局"></a>扩展 Hierarchy 布局</h2><ul>
<li>扩展 Hierarchy 布局和扩展 Project 布局是一样的原理, 只不过监听的是另一个委托: <code>EditorApplication.hierarchyWindowItemOnGUI</code>.</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">InitializeOnLoadMethod</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitOnLoad</span>()</span> &#123;</span><br><span class="line">    EditorApplication.hierarchyWindowItemOnGUI += (instanceID, selectionRect) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Selection.activeObject) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (instanceID != Selection.activeObject.GetInstanceID()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> PREFAB_PATH = <span class="string">&quot;Assets/1.prefab&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> TEXTURE_PATH = <span class="string">&quot;Assets/unity.png&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">float</span> WIDTH = <span class="number">32f</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">float</span> HEIGHT = <span class="number">16f</span>;</span><br><span class="line">        <span class="keyword">var</span> hierarchyRect = <span class="keyword">new</span> Rect(</span><br><span class="line">            selectionRect.width - WIDTH, selectionRect.y,</span><br><span class="line">            WIDTH, HEIGHT);</span><br><span class="line">        <span class="comment">// 加载资源: AssetDatabase.LoadAssetAtPath</span></span><br><span class="line">        <span class="keyword">var</span> texture = AssetDatabase.LoadAssetAtPath&lt;Texture&gt;(TEXTURE_PATH);</span><br><span class="line">        <span class="keyword">if</span> (!GUI.Button(hierarchyRect, texture)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 更新或者创建 Prefab</span></span><br><span class="line">        PrefabUtility.SaveAsPrefabAssetAndConnect(Selection.activeGameObject, PREFAB_PATH, InteractionMode.AutomatedAction);</span><br><span class="line">        AssetDatabase.Refresh();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="扩展-Inspector-视图"><a href="#扩展-Inspector-视图" class="headerlink" title="扩展 Inspector 视图"></a>扩展 Inspector 视图</h1><p>扩展 Inspector 视图就和上面两种完全不一样了. Inspector 视图是用来显示类 (组件本质就是一个类) 中的信息的, 由于类中会有各种各样的千奇百怪的数据类型, 因此 Unity 提供了大量的控件来帮助开发者自定义 Inspector 视图.</p>
<p>重写 Inspector 面板需要做的事情:</p>
<ol>
<li>继承 UnityEditor.Editor 类.</li>
<li>使用特性 CustomEditor(typeof()) 关联要显示的类.</li>
<li>重写 OnInspectorGUI() 方法.</li>
<li>绘制各种组件.</li>
</ol>
<h2 id="扩展原生类组件"><a href="#扩展原生类组件" class="headerlink" title="扩展原生类组件"></a>扩展原生类组件</h2><p>扩展原生类组件的 Inspector 面板就是重写 <code>OnInspectorGUI()</code> 方法, 这个方法就是用来绘制 Inspector 面板的.</p>
<p>如果需要显示原本组件的的 Inspector 面板信息, 可以调用父类的方法: <code>base.OnInspectorGUI();</code>.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CustomEditor(typeof(Camera))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpendInspector</span> : <span class="title">Editor</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;扩展按钮&quot;</span>)) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展继承类组件"><a href="#扩展继承类组件" class="headerlink" title="扩展继承类组件"></a>扩展继承类组件</h2><p>对于我们重写界面而言, <strong>继承类组件</strong>与<strong>原生类组件</strong>的不同之处就是不能调用 <code>base.OnInspectorGUI();</code> 方法, 或者调用 <code>base.OnInspectorGUI();</code> 时不会出现组件原本的显示效果, 显示效果会变得很糟糕. 因此我们需要使用<strong>反射</strong>机制来实现调用<strong>真正的</strong> OnInspectorGUI() 方法.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CustomEditor(typeof(Transform))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpendInspector</span> : <span class="title">Editor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Editor editor;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span> &#123;</span><br><span class="line">        editor = Editor.CreateEditor(target,</span><br><span class="line">            Assembly.GetAssembly(<span class="keyword">typeof</span>(Editor)).GetType(<span class="string">&quot;UnityEditor.TransformInspector&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;扩展按钮&quot;</span>)) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        editor.OnInspectorGUI();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置-Inspector-面板为只读"><a href="#设置-Inspector-面板为只读" class="headerlink" title="设置 Inspector 面板为只读"></a>设置 Inspector 面板为只读</h2><p>设置 Inspector 面板为只读可以让某些设置不被任意修改, 尤其是多人合作开发项目的时候尤其有用.</p>
<h3 id="绘制-Inspector-面板时设置只读"><a href="#绘制-Inspector-面板时设置只读" class="headerlink" title="绘制 Inspector 面板时设置只读"></a>绘制 Inspector 面板时设置只读</h3><p>设置自定义 Inspector 面板为只读, 只需要在绘制 Inspector 面板的时候设置 GUI.enabled 为 false 即可将特定的区域设置为只读.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CustomEditor(typeof(Transform))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpendInspector</span> : <span class="title">Editor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Editor editor;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span> &#123;</span><br><span class="line">        editor = Editor.CreateEditor(target,</span><br><span class="line">            Assembly.GetAssembly(<span class="keyword">typeof</span>(Editor)).GetType(<span class="string">&quot;UnityEditor.TransformInspector&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;扩展按钮&quot;</span>)) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        GUI.enabled = <span class="literal">false</span>;</span><br><span class="line">        editor.OnInspectorGUI();</span><br><span class="line">        GUI.enabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过脚本设置只读"><a href="#通过脚本设置只读" class="headerlink" title="通过脚本设置只读"></a>通过脚本设置只读</h3><p>即使不直接修改 Inspector 面板, 也可以设置其为只读, 只要设置物体的 hideFlags 属性即可.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpendInspector</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> MENU_LUCK = <span class="string">&quot;GameObject/3D Object/Lock/Lock&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> MENU_UNLUCK = <span class="string">&quot;GameObject/3D Object/Lock/Unlock&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(MENU_LUCK, false, 0)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GameObjectLock</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Selection.objects != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Selection.objects) &#123;</span><br><span class="line">                item.hideFlags = HideFlags.NotEditable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(MENU_UNLUCK, false, 0)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GameObjectUnlock</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Selection.objects != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (Object item <span class="keyword">in</span> Selection.objects) &#123;</span><br><span class="line">                item.hideFlags = HideFlags.None;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展-Inspector-面板的设置菜单"><a href="#扩展-Inspector-面板的设置菜单" class="headerlink" title="扩展 Inspector 面板的设置菜单"></a>扩展 Inspector 面板的设置菜单</h2><p>Inspector 的设置菜单位于 <code>CONTEXT</code> 层级下, 因此路径必须以这个开头. 另外, 这个菜单在扩展时的方法必须有一个 <code>MenuCommand</code> 类型的参数, 里面包含了<strong>挂载当前组件的游戏物体</strong>的信息.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpendInspector</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> MENU_1 = <span class="string">&quot;CONTEXT/Transform/PrintName&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> MENU_2 = <span class="string">&quot;CONTEXT/Camera/PrintName&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(MENU_1, false, 0)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Menu1</span>(<span class="params">MenuCommand command</span>)</span> &#123;</span><br><span class="line">        Debug.Log(command.context.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(MENU_2, false, 0)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Menu2</span>(<span class="params">MenuCommand command</span>)</span> &#123;</span><br><span class="line">        Debug.Log(command.context.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="扩展-Scene-视图"><a href="#扩展-Scene-视图" class="headerlink" title="扩展 Scene 视图"></a>扩展 Scene 视图</h1><p>Scene 视图是开发者搭建游戏场景的视图, 搭建场景的时候可以利用一些辅助元素来更加规范地快捷地搭建游戏场景. 扩展 Scene 视图的时候有两种, 一种是仅作为辅助元素来方便开发者搭建场景, 这一类元素是无法进行交互的, 类似于辅助线的功能, 当时辅助元素不仅仅只有线. 另一种就是绘制可交互的辅助 UI.</p>
<h2 id="不可交互的辅助元素-Gizmos"><a href="#不可交互的辅助元素-Gizmos" class="headerlink" title="不可交互的辅助元素 Gizmos"></a>不可交互的辅助元素 Gizmos</h2><p>Unity 中有一个 Gimos 类, 这个类中的 API 就是用来给 Scene 视图绘制辅助元素的. Gizmos 类元素是在 On 类事件中绘制的, 这一类 On 事件的触发需要继承 MonoBehavior, 之后会在编辑器模式下每一帧调用. 也正是因为这个机制导致 Gizmos 绘制脚本不能放到 Editor 文件夹下.</p>
<p>事件方法:</p>
<p><code>OnDrawGizmosSelected()</code> : 依赖特定的物体, 因此需要将脚本挂载在特定的游戏物体上, 当选中这个游戏物体时, 这个事件会被触发.</p>
<p><code>OnDrawGizmos()</code> : 不依赖任何游戏物体, 事件会在编辑器模式下的每一帧触发.</p>
<p>绘制方法:</p>
<p><code>Gizmos.color</code> : 设置绘制元素时画笔的颜色.</p>
<p><code>Gizmos.DrawLine</code>, <code>Gizmos.DrawCube</code>, <code>Gizmos.DrawSphere</code> 等方法可以用来绘制线段, 长方体, 球体等.</p>
<h2 id="可交互的辅助元素-Handles-GUI"><a href="#可交互的辅助元素-Handles-GUI" class="headerlink" title="可交互的辅助元素 Handles GUI"></a>可交互的辅助元素 Handles GUI</h2><p>第一类是只在特定的物体上让脚本生效, 比如当选择摄像机的时候, Scene 面板中出现几个按钮, 用来打印摄像机的信息.</p>
<p>第二类是全局修改 Scene 窗口, 即任何时候 Scene 窗口上都会显示自定义的内容.</p>
<h3 id="特定物体的-Scene-窗口自定义"><a href="#特定物体的-Scene-窗口自定义" class="headerlink" title="特定物体的 Scene 窗口自定义"></a>特定物体的 Scene 窗口自定义</h3><p>这一类的扩展代码编写方法和扩展 Inspector 面板时是一样的.</p>
<p>需要使用特性 <code>CustomEditor(typeof())</code> 来修饰类, 同时继承 <code>Editor</code> 来绘制 UI.</p>
<p>绘制 UI 的时候, 绘制用的代码放在 <code>OnSceneGUI()</code> 中, 并且必须放在 <code>Handles.BeginGUI()</code> 和 <code>Handles.EndGUI()</code> 之间.</p>
<p><code>Handles.color</code> 可以修改绘制 UI 时的颜色.</p>
<p>绘制 UI 时使用的 API 依旧是: <code>GUI</code>, <code>GUILayout</code>, <code>EditorGUI</code>, <code>EditorGUILayout</code> 等.</p>
<h3 id="全局的-Scene-窗口自定义"><a href="#全局的-Scene-窗口自定义" class="headerlink" title="全局的 Scene 窗口自定义"></a>全局的 Scene 窗口自定义</h3><p>常驻 UI 的绘制方法和依赖物体的 Scene UI 是一样的, 只是这个显示 UI 的方法的调用方式不一样了, 之前的是使用 <code>OnSceneGUI()</code> 方法, 而全部的 UI 是使用 <code>[InitializeOnLoadMethod]</code> 特性来调用自定义方法实现.</p>
<h1 id="创建自定义窗口-EditorWindow"><a href="#创建自定义窗口-EditorWindow" class="headerlink" title="创建自定义窗口 (EditorWindow)"></a>创建自定义窗口 (EditorWindow)</h1><h2 id="定义窗口"><a href="#定义窗口" class="headerlink" title="定义窗口"></a>定义窗口</h2><p>继承自 <code>EditorWindow</code> 的类便是窗口本身.</p>
<h2 id="打开窗口"><a href="#打开窗口" class="headerlink" title="打开窗口"></a>打开窗口</h2><p>使用继承自 EditorWindow 类中的 <code>GetWindow&lt;MyEditorWindowType&gt;();</code> 方法便可以打开特定的窗口, 返回打开后的窗口引用.</p>
<h2 id="设置窗口的基本信息"><a href="#设置窗口的基本信息" class="headerlink" title="设置窗口的基本信息"></a>设置窗口的基本信息</h2><p>在使用 <code>GetWindow&lt;&gt;();</code> 之后获得的返回值中有一个 <code>titleContent</code> 可以设置窗口的名称, 图标, 气泡提示.</p>
<p><code>myWindow.titleContent = new GUIContent(&quot;标题名称&quot;, textureICON(Texture), &quot;气泡提示内容&quot;);</code></p>
<h2 id="改变风格的两种方式"><a href="#改变风格的两种方式" class="headerlink" title="改变风格的两种方式"></a>改变风格的两种方式</h2><h3 id="使用全局-GUI-风格"><a href="#使用全局-GUI-风格" class="headerlink" title="使用全局 GUI 风格"></a>使用全局 GUI 风格</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 粗体</span></span><br><span class="line">GUI.skin.label.fontStyle = FontStyle.Bold;</span><br><span class="line"><span class="comment">// 24 号</span></span><br><span class="line">GUI.skin.label.fontSize = <span class="number">24</span>;</span><br><span class="line"><span class="comment">// 居中</span></span><br><span class="line">GUI.skin.label.alignment = TextAnchor.MiddleCenter;</span><br></pre></td></tr></table></figure>

<h3 id="使用局部-GUI-风格"><a href="#使用局部-GUI-风格" class="headerlink" title="使用局部 GUI 风格"></a>使用局部 GUI 风格</h3><p>Unity 规定只能在 <code>OnEnable()</code> 方法中新建局部 GUI 风格.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GUIStyle guiStyleTitle = <span class="keyword">new</span> GUIStyle</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 粗体</span></span><br><span class="line">    fontStyle = FontStyle.Bold,</span><br><span class="line">    <span class="comment">// 24 号</span></span><br><span class="line">    fontSize = <span class="number">24</span>,</span><br><span class="line">    <span class="comment">// 居中</span></span><br><span class="line">    alignment = TextAnchor.MiddleCenter</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>之后将这个新建的风格作为参数, 绘制控件的时候传入即可.</p>
<h1 id="绘制控件"><a href="#绘制控件" class="headerlink" title="绘制控件"></a>绘制控件</h1><p>这里可以绘制控件的 API 有: GUI, GUILayout, EditorGUI, EditorGUILayout, 可用于绘制 Inspector 面板, EditorWindow 窗口等.</p>
<h2 id="布局类"><a href="#布局类" class="headerlink" title="布局类"></a>布局类</h2><ul>
<li><p>Space: 空白, 空行, 空格</p>
<p> <code>EditorGUILayout.Space(10);</code></p>
</li>
<li><p>FlexibleSpace: 自适应空格, 自动填充所处布局的全部剩余空间. 自适应空格大多和布局一起使用, 在水平布局中, 假设按照: <code>A, FlexibleSpace, B</code> 的顺序安排控件, 那么效果是: A 靠左, B 靠右, 中间空白会随着水平布局的变宽而变宽.</p>
<p>  <code>GUILayout.FlexibleSpace();</code></p>
</li>
<li><p>BeginVertical, EndVertical: 垂直布局, 可以通过输入参数 <code>&quot;box&quot;</code> 让布局有一个灰色的背景.</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">EditorGUILayout.BeginVertical(<span class="string">&quot;box&quot;</span>);`</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">EditorGUILayout.EndVertical();`</span><br></pre></td></tr></table></figure>
</li>
<li><p>BeginHorizontal, EndHorizontal: 水平布局, 可以通过输入参数 <code>&quot;box&quot;</code> 让布局有一个灰色的背景.</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GUILayout.BeginHorizontal(<span class="string">&quot;box&quot;</span>);`</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">GUILayout.EndHorizontal();`</span><br></pre></td></tr></table></figure>
</li>
<li><p>BeginArea, EndArea: 自动布局区域</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>));</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">GUILayout.EndArea();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Foldout: 折叠区域, 第一个参数为 bool 类型的参数, 表示是否折叠, 第三个参数是表示点击标题时是否可以展开, 默认是 false</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">foldoutTitle = <span class="keyword">new</span> GUIContent(<span class="string">&quot;测试折叠菜单&quot;</span>, <span class="string">&quot;气泡提示, 好无聊~&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (foldout = EditorGUILayout.Foldout(foldout, foldoutTitle, <span class="literal">true</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ScrollView: 附带滑动条的固定显示区域. 第一个参数是滑动条的位置, 是对滑动条滑动量的一个描述, 是一个 Vector2 类型, 分别表示横向和纵向两个滑动条, 每个轴保存的是滑动条的位置, 并不是百分比, 比如滑动区域的总高度为1000, 当纵向滑动条处于中间时, Vector2 的 Y 周值便是 500, 第二, 三个参数是布局选项, 设置滑动区域的显示大小. 滑动区域的实际大小由内容决定.</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">scrollPos = EditorGUILayout.BeginScrollView(scrollPos, GUILayout.Width(<span class="number">100</span>), GUILayout.Height(<span class="number">100</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="提示用标签类"><a href="#提示用标签类" class="headerlink" title="提示用标签类"></a>提示用标签类</h2><ul>
<li><p>LabelField, 文字提示, 不可交互, 不可选中, 不可复制</p>
<p>  <code>EditorGUILayout.LabelField(&quot;第一个编辑器窗口&quot;, guiStyleTitle);</code></p>
</li>
<li><p>SelectableLabel, 可选择的标签, 右键可复制</p>
<p>  <code>EditorGUILayout.SelectableLabel(&quot;可选择的标签&quot;);</code></p>
</li>
</ul>
<h2 id="输入框类"><a href="#输入框类" class="headerlink" title="输入框类"></a>输入框类</h2><ul>
<li><p>TextField 文本输入框, 可输入少量文本</p>
<p>  <code>accountName = EditorGUILayout.TextField(&quot;账号:&quot;, accountName);</code></p>
</li>
<li><p>TextArea, 文字区域, 可输入大量文本</p>
<p>  <code>description = EditorGUILayout.TextArea(description, GUILayout.MaxHeight(75));</code></p>
</li>
<li><p>PasswordField, 密码输入框, 可输入密码</p>
<p>  <code>password = EditorGUILayout.PasswordField(&quot;密码:&quot;, password);</code></p>
</li>
<li><p>IntField, 整型数字输入框, 只允许输入<font color='red'><strong>整数</strong></font></p>
<p>  <code>intField = EditorGUILayout.IntField(&quot;输入框名称&quot;, intField);</code></p>
</li>
<li><p>FloatField, 浮点数输入框, 只允许输入<font color='red'><strong>小数</strong></font></p>
<p>  <code>floatField = EditorGUILayout.FloatField(&quot;输入框名称&quot;, floatField);</code></p>
</li>
</ul>
<h2 id="滑动条类-Slider"><a href="#滑动条类-Slider" class="headerlink" title="滑动条类 (Slider)"></a>滑动条类 (Slider)</h2><ul>
<li><p>Slider, 普通(浮点数)滑动条, 滑动时的数值为小数</p>
<p>  <code>sliderValue = EditorGUILayout.Slider(&quot;滑动条名称&quot;, sliderValue, 0.3f, 30.3f);</code></p>
</li>
<li><p>IntSlider, 整数滑动条, 滑动时的数值为整数</p>
<p>  <code>intSliderValue = EditorGUILayout.IntSlider(&quot;整形滑动条名称&quot;, intSliderValue, 1, 25);</code></p>
</li>
<li><p>MinMaxSlider, 范围滑动条, 滑动条上左右两侧均可滑动, 数字为小数</p>
<p>  <code>EditorGUILayout.MinMaxSlider(ref sliderMinValue, ref sliderMaxValue, sliderMinLimit, sliderMaxLimit);</code></p>
</li>
</ul>
<h2 id="弹出菜单选择类"><a href="#弹出菜单选择类" class="headerlink" title="弹出菜单选择类"></a>弹出菜单选择类</h2><ul>
<li><p>Popup, 普通弹出菜单, <strong>selectedNameIndex</strong> 默认的选择项和当前的选择项, 从 0 开始计数. <strong>playerNames</strong> 则是一维的字符串数组, 作为选择菜单项的来源数据.</p>
<p>  <code>selectedNameIndex = EditorGUILayout.Popup(&quot;弹出菜单的名称: &quot;, selectedNameIndex, playerNames);</code></p>
</li>
<li><p>IntPopup, 整型数字选择菜单, 与 Popup 的区别是索引为自定义的整型数字, 不再是固定的 从 0 开始. 因此需要两个数组, <strong>selectedAgeIndex</strong> 是默认的选择项和当前的选择项, <strong>playerAgesInfo</strong> 则是一维的字符串数组, 作为选择菜单项的来源数据, <strong>playerAges</strong> 则是自定义的索引数组, 其长度必须和前面的数据数组保持一致.</p>
<p>  <code>selectedAgeIndex = EditorGUILayout.IntPopup(&quot;整型数字弹出菜单&quot;, selectedAgeIndex, playerAgesInfo, playerAges);</code></p>
</li>
<li><p>EnumPopup, 枚举式弹出菜单, 与 Popup 的区别是不再使用索引, 而是使用枚举作为选择的标志. 前面强制类型转换的 <strong>PlayerType</strong> 就是枚举类型. 后面的 <strong>playerType</strong> 则是默认的选择项和当前的选择项, 当然这就是 <strong>PlayerType</strong> 类型的变量.</p>
<p>  <code>playerType = (PlayerType)EditorGUILayout.EnumPopup(&quot;枚举式弹出菜单&quot;, playerType);</code></p>
</li>
</ul>
<h2 id="资源选择框"><a href="#资源选择框" class="headerlink" title="资源选择框"></a>资源选择框</h2><ul>
<li><p>ObjectField, 预制件选择框, 可选择资源中的预制件, <strong>go</strong> 是默认值以及当前的选择值.</p>
<p>  <code>go = EditorGUILayout.ObjectField(&quot;物体名&quot;, go, typeof(GameObject), false) as GameObject;</code></p>
</li>
</ul>
<h2 id="交互按钮"><a href="#交互按钮" class="headerlink" title="交互按钮"></a>交互按钮</h2><ul>
<li><p>GUILayout.Button, 点击后返回 true</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;保存数据&quot;</span>, GUILayout.MaxWidth(<span class="number">80</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;保存数据成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h2><ul>
<li><p>Toggle, 第一个参数是显示的提示文本, 第二个选项时默认的勾选状态以及当前的勾选状态</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (toggleValue = EditorGUILayout.Toggle(<span class="string">&quot;多选控件显示的文本, 勾选后进行三维向量检测&quot;</span>, toggleValue))</span><br><span class="line">&#123;</span><br><span class="line">    myv3value = EditorGUILayout.Vector3Field(<span class="string">&quot;请输入一个三维向量&quot;</span>, myv3value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h2><ul>
<li><p><code>EditorUtility.OpenFilePanel()</code>, 第一个参数为弹出窗口的标题, 第二个为默认路径, 第三个为文件类型条件</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Select File&quot;</span>, GUILayout.Height(<span class="number">25</span>), GUILayout.Width(<span class="number">120</span>))) &#123;</span><br><span class="line">    filePath = EditorUtility.OpenFilePanel(<span class="string">&quot;Select File&quot;</span>, filePath, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(filePath)) &#123;</span><br><span class="line">        <span class="comment">// 具体的行为</span></span><br><span class="line">        filePath = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="目录选择"><a href="#目录选择" class="headerlink" title="目录选择"></a>目录选择</h2><ul>
<li><p><code>EditorUtility.OpenFolderPanel()</code>, 第一个参数为弹出窗口的标题, 第二个为默认路径, 第三个为默认文件夹名称</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Select Folder&quot;</span>, GUILayout.Height(<span class="number">25</span>), GUILayout.Width(<span class="number">120</span>))) &#123;</span><br><span class="line">    folderPath = EditorUtility.OpenFolderPanel(<span class="string">&quot;Select Folder&quot;</span>, folderPath, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(folderPath)) &#123;</span><br><span class="line">        <span class="comment">// 具体的行为</span></span><br><span class="line">        folderPath = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="目录选择-1"><a href="#目录选择-1" class="headerlink" title="目录选择"></a>目录选择</h2><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>进度条有两种, 第一种是附带了一个 &quot;取消&quot; 按钮的进度条, 这个是可以中途取消的, 另外一种就是没有取消按钮的进度条.</p>
<h3 id="可中途取消的进度条"><a href="#可中途取消的进度条" class="headerlink" title="可中途取消的进度条"></a>可中途取消的进度条</h3><p><img data-src="/images/unity_editor/progress_bar_cancel.png" alt="可取消的进度条"></p>
<p>使用下方的 <code>DisplayCancelableProgressBar</code> 方法便可以生成一个带有取消按钮的进度条, 返回值为 bool 类型. 当点击 &quot;取消&quot; 按钮时, 返回值为 false, 否则返回值始终为 true, 即使第三个参数的数值已经超过了 1 (进度条数值溢出, 外观上不会溢出) 返回值也是 true. 需要注意的是: <font color='red'>取消按钮并不能删除当前显示的进度条, 这个按钮只能让 <code>DisplayCancelableProgressBar()</code> 方法返回 false, 需要取消进度条必须使用 <code>EditorUtility.ClearProgressBar();</code> 方法.</font></p>
<p><code>EditorUtility.DisplayCancelableProgressBar(&quot;进度条窗口的标题&quot;, &quot;进度条下方的描述&quot;, 浮点型的进度条百分比(0-1))</code></p>
<p>因此大多数在循环中展示进度条, 在一个将要处理<strong>大量数据</strong>的循环中加一个进度条, 这样每次循环的时候, 外部都会有一个进度值实时告诉用户进度, 用户就不容易以为设备卡住了.</p>
<h3 id="不可中途取消的进度条"><a href="#不可中途取消的进度条" class="headerlink" title="不可中途取消的进度条"></a>不可中途取消的进度条</h3><p><img data-src="/images/unity_editor/progress_bar.png" alt="不可取消的进度条"></p>
<p>这个就更简单了, 使用 <code>DisplayProgressBar()</code> 方法便可以生成不可中途取消的进度条, 方法的返回值为 <code>void</code>, 因此不需要过多的处理.</p>
<p><code>EditorUtility.DisplayProgressBar(&quot;进度条窗口的标题&quot;, &quot;进度条下方的描述&quot;, 浮点型的进度条百分比(0-1))</code></p>
<p>[<strong>注</strong>] 这两种进度条都必须使用 <code>EditorUtility.ClearProgressBar();</code> 方法才能取消进度条的显示.</p>
<h3 id="自定义进度条"><a href="#自定义进度条" class="headerlink" title="自定义进度条"></a>自定义进度条</h3><p>Unity 的进度条有一个不好的地方就是必须自己去 Clear 进度条, 经常会出现忘记 Clear 导致 Unity 卡住的情况, 所以就自己写了一个可以自动 Clear 的进度条.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">KurohaUtility</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CommonProgressBar</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProgressBar</span>(<span class="params"><span class="built_in">string</span> title, <span class="built_in">string</span> info, <span class="built_in">float</span> progress</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (progress &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                EditorUtility.ClearProgressBar();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                EditorUtility.DisplayProgressBar(title, info, progress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">ProgressBarCancel</span>(<span class="params"><span class="built_in">string</span> title, <span class="built_in">string</span> info, <span class="built_in">float</span> progress</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (progress &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                EditorUtility.ClearProgressBar();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = EditorUtility.DisplayCancelableProgressBar(title, info, progress);</span><br><span class="line">                <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                    EditorUtility.ClearProgressBar();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><h3 id="EditorSceneManager-SaveCurrentModifiedScenesIfUserWantsTo"><a href="#EditorSceneManager-SaveCurrentModifiedScenesIfUserWantsTo" class="headerlink" title="EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();"></a>EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();</h3><p>如果用户当前修改了场景, 并且还没有对场景进行保存, 则会询问用户是否保存场景; 如果当前场景没有被修改, 则无事发生.</p>
<p><img data-src="/images/unity_editor/unity_editor_api_001.png" alt="unity_editor_api"></p>
<h2 id="路径开头总结"><a href="#路径开头总结" class="headerlink" title="路径开头总结"></a>路径开头总结</h2><table>
<thead>
<tr>
<th align="left">路径内容</th>
<th align="left">开头</th>
<th align="left">原因</th>
</tr>
</thead>
<tbody><tr>
<td align="left">AssetDatabase 访问资源路径</td>
<td align="left">Assets</td>
<td align="left">Unity 中资源的顶级目录为: Assets</td>
</tr>
<tr>
<td align="left">Resources 动态加载资源路径</td>
<td align="left">无</td>
<td align="left">Resources.Load() 方法中参数是相对路径的文件名, 所以不能加任何开头</td>
</tr>
<tr>
<td align="left">Project 面板菜单</td>
<td align="left">Assets</td>
<td align="left">Project 面板菜单就是标题栏中的 Assets 菜单</td>
</tr>
<tr>
<td align="left">Hierarchy 面板菜单</td>
<td align="left">GameObject</td>
<td align="left">Hierarchy 面板菜单就是标题栏中的 GameObject 菜单</td>
</tr>
<tr>
<td align="left">Inspector 面板中单个组件的设置菜单</td>
<td align="left">CONTEXT</td>
<td align="left">Inspector 面板中的组件设置菜单就是在 CONTEXT 目录下</td>
</tr>
<tr>
<td align="left">Inspector 面板中所有组件的设置菜单</td>
<td align="left">CONTEXT&#x2F;Component</td>
<td align="left">设置特定组件就在 CONTEXT 后加特定组件, 如果要设置全部组件, 就加 Component</td>
</tr>
</tbody></table>
<h2 id="如何高亮选中物体"><a href="#如何高亮选中物体" class="headerlink" title="如何高亮选中物体"></a>如何高亮选中物体</h2><h3 id="Hierarchy-面板"><a href="#Hierarchy-面板" class="headerlink" title="Hierarchy 面板"></a>Hierarchy 面板</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 搜索物体</span></span><br><span class="line">GameObject go = GameObject.Find(<span class="string">&quot;Main Camera&quot;</span>);</span><br><span class="line"><span class="comment">// 高亮物体, 同时将定位 Hierarchy 面板中高亮物体的位置</span></span><br><span class="line">EditorGUIUtility.PingObject(go);</span><br><span class="line"><span class="comment">// 选中物体, 显示 Inspector 面板 (目前 Unity 存在 Bug, 选中后直接变成 &quot;重命名&quot; 状态)</span></span><br><span class="line">Selection.activeGameObject = go;</span><br></pre></td></tr></table></figure>

<h3 id="Project-面板"><a href="#Project-面板" class="headerlink" title="Project 面板"></a>Project 面板</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取资源</span></span><br><span class="line">GameObject go = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(<span class="string">&quot;Assets/Cube.prefab&quot;</span>);</span><br><span class="line"><span class="comment">// 高亮物体, 同时将定位 Project 面板中高亮物体的位置</span></span><br><span class="line">EditorGUIUtility.PingObject(go);</span><br><span class="line"><span class="comment">// 选中物体, 显示 Inspector 面板</span></span><br><span class="line">Selection.activeObject = go;</span><br></pre></td></tr></table></figure>

<h2 id="EditorWindow-中变量的初始化"><a href="#EditorWindow-中变量的初始化" class="headerlink" title="EditorWindow 中变量的初始化"></a>EditorWindow 中变量的初始化</h2><p>窗口类中的变量通常是需要在 <code>OnGUI()</code> 方法中使用, 根据方法的生命周期来看, 在 <code>OnGUI()</code> 方法中使用的变量都是可以直接在 <code>OnEnable()</code> 方法中进行初始化的. 同时<font color='red'>由于这类变量通常需要保存数据到本地, 所以大多是使用文件中读取的数值进行初始化.</font></p>
<p>另外需要注意的一个点是: 之前说过 <code>OnEnable()</code> 和 <code>OnFocus()</code> 是在 <code>GetWindow()</code> 方法返回之前执行的, 因此这两个方法不能用来对 <code>GetWindow()</code> 的返回值进行设置, 所以对窗口的外观设置任务就只能交给 <code>AfterGetWindow</code> 区域了, 或者直接独立出一个方法来进行窗口的外观设置.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> windowTitle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static 特性: 在编辑器模式下的静态变量一旦赋值, 除非 &quot;Unity 重新编译脚本&quot; 或者 &quot;Unity 退出&quot;, 否则变量的值一直保留, 不会重置.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyWindow self;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GUIContent windowTitleContent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Open</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        self = GetWindow&lt;MyWindow&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对窗口初始化的任务就只能交给 AfterGetWindow 区域了.</span></span><br><span class="line">        self.titleContent = windowTitleContent;</span><br><span class="line">        self.minSize = <span class="keyword">new</span> Vector2(<span class="number">500f</span>, <span class="number">500f</span>);</span><br><span class="line">        self.maxSize = self.minSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// OnEnable 中不能对 self 做任何操作, 因为此时 self 还是空值.</span></span><br><span class="line">        <span class="comment">// 虽然由于 static 的特性, 仅第 1 次设置会报错, 但是既然报错就必须要禁止!😂</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 OnGUI 中需要用到的变量初始化</span></span><br><span class="line">        windowTitle = <span class="string">&quot;This is a string inside a Scroll view!&quot;</span>;</span><br><span class="line">        windowTitleContent ??= <span class="keyword">new</span> GUIContent(<span class="string">&quot;测试窗口1&quot;</span>, <span class="string">&quot;气泡测试1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUILayout.Label(windowTitle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取场景中全部游戏物体"><a href="#获取场景中全部游戏物体" class="headerlink" title="获取场景中全部游戏物体"></a>获取场景中全部游戏物体</h2><p>使用普通的方法只能获取非隐藏的游戏物体, 而我们大多数时候都是需要获取全部游戏物体的.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取 Hierarchy 中所有的游戏物体</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 包括被禁用的游戏物体</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;GameObject&gt; <span class="title">GetAllSceneObjectsWithInactive</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> allTransforms = Resources.FindObjectsOfTypeAll(<span class="keyword">typeof</span>(Transform));</span><br><span class="line">    <span class="keyword">var</span> previousSelection = Selection.objects;</span><br><span class="line">    Selection.objects = allTransforms.Cast&lt;Transform&gt;()</span><br><span class="line">        .Where(x =&gt; x != <span class="literal">null</span>)</span><br><span class="line">        .Select(x =&gt; x.gameObject)</span><br><span class="line">        <span class="comment">//.Where(x =&gt; x != null &amp;&amp; !x.activeInHierarchy)</span></span><br><span class="line">        <span class="comment">//.Where(x =&gt; x != null &amp;&amp; x.activeInHierarchy)</span></span><br><span class="line">        .Cast&lt;UnityEngine.Object&gt;().ToArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> selectedTransforms = Selection.GetTransforms(SelectionMode.Editable | SelectionMode.ExcludePrefab);</span><br><span class="line">    Selection.objects = previousSelection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> selectedTransforms.Select(transform =&gt; transform.gameObject).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityEditor 中制作和 Console 窗口一样可拖动的 Splitter 控件</title>
    <url>/unity_editor/unity_editor_console_splitter.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>分享一个大佬写的 Splitter 控件, 主要是实现了和 Unity 原生 Console 窗口一样的效果, 有一条可以拖动的分割线, 用于将一个窗口分割成两部分.</p>
<p>这就是最终实现的效果, 看一下是否满足你的需要, 如果正好满足, 那你就可以继续往下看了.</p>
<p><img data-src="/images/unity_editor/splitter.gif" alt="Splitter"></p>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>主要由一个公共基类和一个自定义的窗口类构成.</p>
<h2 id="基类-Splitter"><a href="#基类-Splitter" class="headerlink" title="基类: Splitter"></a>基类: Splitter</h2><p>基类主要负责的是控制分割条的拖动, 以及重新计算拖动分割条之后主区域和子区域的尺寸.</p>
<p>下面是源码, 本质就只是一个 OnGUI 方法.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Kuroha.GUI.Editor.Splitter</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Splitter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">enum</span> SplitMode</span><br><span class="line">        &#123;</span><br><span class="line">            Horizontal,</span><br><span class="line">            Vertical</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不允许子类访问的字段</span></span><br><span class="line">        <span class="keyword">private</span> EditorWindow editorWindow;</span><br><span class="line">        <span class="keyword">private</span> MouseCursor mouseCursor;</span><br><span class="line">        <span class="keyword">private</span> SplitMode splitMode;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> lockSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> isResizing;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> isFreeze;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要子类访问的字段</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">float</span> barSize;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">float</span> mainAreaSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 可触发鼠标变化的区域, 即分割条的全部有效区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> Rect mouseCursorRect;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 主区域占整个窗口的比例</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> mainAreaRatio = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 专业版: 分割条的颜色</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Color splitterColorPro = Color.black;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 免费版: 分割条的颜色</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Color splitterColorFree = Color.gray;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;window&quot;&gt;</span>使用当前布局的窗口<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;splitMode&quot;&gt;</span>分割方式, 分为上下切分和左右切分<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mainAreaSize&quot;&gt;</span>主区域的默认大小, 上下切分时为默认高度, 左右切分时为默认宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;minSize&quot;&gt;</span>主区域的最小大小, 上下切分时为最小高度, 左右切分时为最小宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;barSize&quot;&gt;</span>分割条的有效大小, 即鼠标放置时会变化的区域, 上下切分时为有效高度, 左右切分时为有效宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;isFreeze&quot;&gt;</span>是否冻结分割线 (不允许滑动调整范围)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="title">Splitter</span>(<span class="params">EditorWindow window, SplitMode splitMode, <span class="built_in">float</span> mainAreaSize, <span class="built_in">float</span> minSize, <span class="built_in">float</span> barSize, <span class="built_in">bool</span> isFreeze</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            editorWindow = window;</span><br><span class="line">            <span class="keyword">this</span>.mainAreaSize = mainAreaSize;</span><br><span class="line">            <span class="keyword">this</span>.splitMode = splitMode;</span><br><span class="line">            lockSize = minSize;</span><br><span class="line">            <span class="keyword">this</span>.barSize = barSize;</span><br><span class="line">            <span class="keyword">this</span>.isFreeze = isFreeze;</span><br><span class="line">            mouseCursor = <span class="keyword">this</span>.splitMode == SplitMode.Vertical</span><br><span class="line">                ? MouseCursor.ResizeHorizontal</span><br><span class="line">                : MouseCursor.ResizeVertical;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 主窗口</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span>区域矩形<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Rect <span class="title">MainRect</span>(<span class="params">Rect rect</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 子窗口</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span>区域矩形<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Rect <span class="title">SubRect</span>(<span class="params">Rect rect</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条的全部区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span>区域矩形<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Rect <span class="title">BarRect</span>(<span class="params">Rect rect</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条的无色区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 默认分割条为 16 像素, 这里设置顶部 7 像素和 底部 8 像素都不显示, 仅显示中间的 1 个像素.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 但是整个厚度为 16 像素的区域都可以触发鼠标变化, 可以触发拖拽.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> RectOffset <span class="title">BarRectOffset</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 绘制界面</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;windowRect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mainGUI&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;subGUI&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params">Rect windowRect, Action&lt;Rect&gt; mainGUI, Action&lt;Rect&gt; subGUI</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> current = Event.current;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制主区域内容</span></span><br><span class="line">            mainGUI(MainRect(windowRect));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制子区域内容</span></span><br><span class="line">            subGUI(SubRect(windowRect));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分割条全部有效区域 (可触发鼠标变化的整个区域, 外观上部分不显示)</span></span><br><span class="line">            mouseCursorRect = BarRect(windowRect);</span><br><span class="line">            EditorGUIUtility.AddCursorRect(mouseCursorRect, mouseCursor);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (isFreeze == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 单个区域的最大大小</span></span><br><span class="line">                <span class="keyword">var</span> clampMax = splitMode == SplitMode.Vertical ? windowRect.width - lockSize : windowRect.height - lockSize;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 整个区域的最大大小 (两个区域之和, 即整个显示区域的大小)</span></span><br><span class="line">                <span class="keyword">var</span> targetSplitterValue = splitMode == SplitMode.Vertical ? windowRect.width : windowRect.height;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 主区域占整个区域的比例</span></span><br><span class="line">                mainAreaRatio = splitMode == SplitMode.Vertical ? mainAreaSize / windowRect.width : mainAreaSize / windowRect.height;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 鼠标点击了分割条</span></span><br><span class="line">                <span class="keyword">if</span> (current.type == EventType.MouseDown)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mouseCursorRect.Contains(current.mousePosition))</span><br><span class="line">                    &#123;</span><br><span class="line">                        isResizing = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 鼠标松开</span></span><br><span class="line">                <span class="keyword">if</span> (current.type == EventType.MouseUp)</span><br><span class="line">                &#123;</span><br><span class="line">                    isResizing = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 鼠标按住分割条并滑动</span></span><br><span class="line">                <span class="keyword">if</span> (isResizing)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current.type == EventType.MouseDrag)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> targetValue = splitMode == SplitMode.Vertical ? current.mousePosition.x : current.mousePosition.y;</span><br><span class="line">                        <span class="keyword">var</span> diffValue = splitMode == SplitMode.Vertical ? windowRect.width : windowRect.height;</span><br><span class="line">                        mainAreaRatio = targetValue / diffValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (current.type != EventType.Layout &amp;&amp; current.type != EventType.Used)</span><br><span class="line">                &#123;</span><br><span class="line">                    mainAreaRatio = targetSplitterValue * mainAreaRatio / targetSplitterValue;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 计算主区域大小</span></span><br><span class="line">                mainAreaSize = Mathf.Clamp(targetSplitterValue * mainAreaRatio, lockSize, clampMax);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 绘制分割条</span></span><br><span class="line">            <span class="keyword">var</span> color = EditorGUIUtility.isProSkin ? splitterColorPro : splitterColorFree;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// API: RectOffset.Remove(rect) =&gt; 从指定的 rect 中移除 RectOffset 偏移</span></span><br><span class="line">            EditorGUI.DrawRect(BarRectOffset().Remove(mouseCursorRect), color);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 即时刷新</span></span><br><span class="line">            <span class="keyword">if</span> (isResizing)</span><br><span class="line">            &#123;</span><br><span class="line">                editorWindow.Repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义窗口类"><a href="#自定义窗口类" class="headerlink" title="自定义窗口类"></a>自定义窗口类</h2><p>自定义窗口类就是我们实际构建的窗口, 它需要继承自基类 Splitter, 并且重写基类中的 4 个区域方法: <code>MainRect</code>, <code>SubRect</code>, <code>BarRect</code>, <code>BarRectOffset</code>.</p>
<p>下面是动图中横向分割窗口的源码:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Kuroha.GUI.Editor.Splitter</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HorizontalSplitter</span> : <span class="title">Splitter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条的无色区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 默认分割条为 16 像素, 这里设置顶部 7 像素和 底部 8 像素都不显示, 仅显示中间的 1 个像素.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 但是整个厚度为 16 像素的区域都可以触发鼠标变化, 可以触发拖拽.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> RectOffset barRectOffset;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条大小</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> BAR_SIZE = <span class="number">16</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;window&quot;&gt;</span>使用当前布局的窗口<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mainSize&quot;&gt;</span>主区域的默认大小, 上下切分时为默认高度, 左右切分时为默认宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;minSize&quot;&gt;</span>主区域的最小大小, 上下切分时为最小高度, 左右切分时为最小宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;isFreeze&quot;&gt;</span>是否冻结分割线 (不允许滑动调整范围)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HorizontalSplitter</span>(<span class="params">EditorWindow window, <span class="built_in">float</span> mainSize, <span class="built_in">float</span> minSize, <span class="built_in">bool</span> isFreeze</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">window, SplitMode.Horizontal, mainSize, minSize, BAR_SIZE, isFreeze</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条的无色区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> RectOffset <span class="title">BarRectOffset</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> barRectOffset ??= <span class="keyword">new</span> RectOffset(<span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 主区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Rect <span class="title">MainRect</span>(<span class="params">Rect rect</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(rect)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="number">0</span>,</span><br><span class="line">                y = <span class="number">0</span>,</span><br><span class="line">                height = mainAreaSize</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 子区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Rect <span class="title">SubRect</span>(<span class="params">Rect rect</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(rect)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="number">0</span>,</span><br><span class="line">                y = mainAreaSize + <span class="number">5</span>,</span><br><span class="line">                height = rect.height - mainAreaSize - <span class="number">15</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Rect <span class="title">BarRect</span>(<span class="params">Rect rect</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(rect)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="number">0</span>,</span><br><span class="line">                y = mainAreaSize - barSize / <span class="number">2</span>,</span><br><span class="line">                height = barSize</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是动图中纵向分割窗口的源码:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Kuroha.GUI.Editor.Splitter</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VerticalSplitter</span> : <span class="title">Splitter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条的无色区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 默认分割条为 16 像素, 这里设置顶部 7 像素和 底部 8 像素都不显示, 仅显示中间的 1 个像素.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 但是整个厚度为 16 像素的区域都可以触发鼠标变化, 可以触发拖拽.</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> RectOffset barRectOffset;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条大小</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> BAR_SIZE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;window&quot;&gt;</span>使用当前布局的窗口<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mainSize&quot;&gt;</span>主区域的默认大小, 上下切分时为默认高度, 左右切分时为默认宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;minSize&quot;&gt;</span>主区域的最小大小, 上下切分时为最小高度, 左右切分时为最小宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;isFreeze&quot;&gt;</span>是否冻结分割线 (不允许滑动调整范围)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">VerticalSplitter</span>(<span class="params">EditorWindow window, <span class="built_in">float</span> mainSize, <span class="built_in">float</span> minSize, <span class="built_in">bool</span> isFreeze</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">window, SplitMode.Vertical, mainSize, minSize, BAR_SIZE, isFreeze</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条的无色区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> RectOffset <span class="title">BarRectOffset</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> barRectOffset ??= <span class="keyword">new</span> RectOffset(<span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 主区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Rect <span class="title">MainRect</span>(<span class="params">Rect rect</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(rect)</span><br><span class="line">            &#123;</span><br><span class="line">                x = <span class="number">0</span>,</span><br><span class="line">                y = <span class="number">0</span>,</span><br><span class="line">                width = mainAreaSize</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 子区域</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Rect <span class="title">SubRect</span>(<span class="params">Rect rect</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(rect)</span><br><span class="line">            &#123;</span><br><span class="line">                x = mainAreaSize + <span class="number">5</span>,</span><br><span class="line">                y = <span class="number">0</span>,</span><br><span class="line">                width = rect.width - mainAreaSize - <span class="number">15</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 分割条</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rect&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Rect <span class="title">BarRect</span>(<span class="params">Rect rect</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rect(rect)</span><br><span class="line">            &#123;</span><br><span class="line">                x = mainAreaSize - barSize / <span class="number">2</span>,</span><br><span class="line">                y = <span class="number">0</span>,</span><br><span class="line">                width = barSize</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>最后再分享一个我实际项目中的应用:</p>
<p><img data-src="/images/unity_editor/assetchecktool.gif" alt="Asset Check Tool"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><span class="exturl" data-url="aHR0cHM6Ly9oYWNjaGktbWFuLmhhdGVuYWJsb2cuY29tL2VudHJ5LzIwMjAvMDEvMTYvMjIwMDAw">Console Window で利用されているような Splitter を作る<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>UnityEditor</tag>
        <tag>Splitter</tag>
      </tags>
  </entry>
  <entry>
    <title>EditorWindow 类中事件方法的执行顺序</title>
    <url>/unity_editor/unity_editorwindow_runorder.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="参与实验的事件方法"><a href="#参与实验的事件方法" class="headerlink" title="参与实验的事件方法"></a>参与实验的事件方法</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Open() <span class="comment">// 内部调用了 GetWindow() 方法</span></span><br><span class="line"></span><br><span class="line">OnEnable()</span><br><span class="line"></span><br><span class="line">OnFocus()</span><br><span class="line"></span><br><span class="line">OnGUI()</span><br><span class="line"></span><br><span class="line">OnInspectorUpdate()</span><br><span class="line"></span><br><span class="line">OnLostFocus()</span><br><span class="line"></span><br><span class="line">OnDisable()</span><br><span class="line"></span><br><span class="line">OnDestroy()</span><br><span class="line"></span><br><span class="line">OnHierarchyChange()</span><br><span class="line"></span><br><span class="line">OnProjectChange()</span><br><span class="line"></span><br><span class="line">OnSelectionChange()</span><br></pre></td></tr></table></figure>

<h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码:"></a>实验代码:</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnEnable = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnInspectorUpdate = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnHierarchyChange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnProjectChange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnGUI = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnFocus = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnSelectionChange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnLostFocus = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnDisable = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">bool</span> bool_OnDestroy = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Open</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;打开窗口&quot;</span>);</span><br><span class="line">        Debug.Log(<span class="string">&quot;BeforeOpen&quot;</span>);</span><br><span class="line"></span><br><span class="line">        GetWindow&lt;MyWindow&gt;();</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;AfterOpen&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnEnable)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnEnable = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnEnable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnInspectorUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnInspectorUpdate)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnInspectorUpdate = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnInspectorUpdate&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnHierarchyChange</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnHierarchyChange)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnHierarchyChange = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnHierarchyChange&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnProjectChange</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnProjectChange)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnProjectChange = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnProjectChange&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnGUI)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnGUI = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnGUI&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnFocus</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnFocus)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnFocus = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnFocus&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnSelectionChange</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnSelectionChange)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnSelectionChange = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnSelectionChange&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnLostFocus</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnLostFocus)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnLostFocus = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;---------------------------------------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">            Debug.Log(<span class="string">&quot;关闭窗口&quot;</span>);</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnLostFocus&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnDisable)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnDisable = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnDisable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bool_OnDestroy)</span><br><span class="line">        &#123;</span><br><span class="line">            bool_OnDestroy = <span class="literal">false</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;OnDestroy&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="实验输出"><a href="#实验输出" class="headerlink" title="实验输出"></a>实验输出</h1><p><img data-src="/images/unity_editor/EditorWindowRunTime.png" alt="EditorWindowRunTime"></p>
<h1 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h1><p>下图中有一个点需要特别注意, <code>OnEnable()</code> 和 <code>OnFocus()</code> 是在 <code>GetWindow()</code> 方法返回之前执行的. 因此 <font color='red'><strong><code>OnEnable()</code> 和 <code>OnFocus()</code> 中不能对 <code>GetWindow()</code> 的返回值做任何操作</strong></font>, 因为此时的返回值还是空值.</p>
<p><img data-src="/images/unity_editor/EditorWindowRunTimeUML.png" alt="EditorWindowRunTimeUML"></p>
<p>另外的三个 Change() 类事件方法:</p>
<ul>
<li><p>OnHierarchyChange()</p>
<p>  每当场景的层次结构发生变化时调用.</p>
</li>
<li><p>OnProjectChange()</p>
<p>  每当项目发生更改时调用.</p>
</li>
<li><p>OnSelectionChange()</p>
<p>  每当选择发生更改时调用.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>EditorWindow</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Plugins Odin</title>
    <url>/unity_editor/unity_editor_odin.html</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Odin"><a href="#Odin" class="headerlink" title=" Odin"></a><img data-src="/images/unity_editor/Odin_Inspector_Logo.png" alt="Odin"> Odin</h1><ul>
<li><p>立即刷新</p>
<p>  <code>Sirenix.Utilities.Editor.GUIHelper.RequestRepaint();</code></p>
</li>
<li><p>取一个随机的 [0, 1) 值 [正弦函数]</p>
<p>  <code>Mathf.Abs(Mathf.Sin((float)EditorApplication.timeSinceStartup))</code></p>
</li>
<li><p>Odin 中一些需要引用变量值或者需要引用方法的地方都可以使用美元符号来引用</p>
<p>  <code>Required(&quot;$变量名&quot;)</code> <code>Required(&quot;$方法名&quot;)</code></p>
</li>
<li><p>Odin 中也可以使用 <strong>@</strong> 字符来直接引用方法体内容, 在方法体很短很短的时候可以用一下</p>
</li>
<li><p><code>EditorGUI.BeginChangeCheck()</code> 和 <code>if (EditorGUI.EndChangeCheck())</code> 可以实现监控 GUI 变更</p>
</li>
<li><p><code>EditorGUIUtility.isProSkin</code> 判断是否是黑色主题</p>
</li>
<li><p>得到 Android 平台当前导入设置的尺寸和压缩格式</p>
<p>  <code>return textureImporter.GetPlatformTextureSettings(&quot;Android&quot;, out var maxSize, out var format);</code></p>
<ul>
<li>其中平台名称可选 <code>&quot;Standalone&quot;, &quot;Web&quot;, &quot;iPhone&quot;, &quot;Android&quot;, &quot;WebGL&quot;, &quot;Windows Store Apps&quot;, &quot;PS4&quot;, &quot;XboxOne&quot;, &quot;Nintendo Switch&quot;, &quot;tvOS&quot;</code>.</li>
</ul>
</li>
<li><p>得到默认的导入设置 <code>textureImporter.GetDefaultPlatformTextureSettings()</code></p>
</li>
<li><p>修改 Mesh 的压缩等级</p>
<p>  <code>MeshUtility.SetMeshCompression(Mesh mesh, ModelImporterMeshCompression level);</code></p>
</li>
</ul>
<h1 id="AssetsOnly"><a href="#AssetsOnly" class="headerlink" title="AssetsOnly"></a><code>AssetsOnly</code></h1><p>修饰一个字段, 这个字段只能使用 Project 面板中资源赋值</p>
<h1 id="SceneObjectsOnly"><a href="#SceneObjectsOnly" class="headerlink" title="SceneObjectsOnly"></a><code>SceneObjectsOnly</code></h1><p>修饰一个字段, 这个字段只能使用 Scene 中的物体赋值</p>
<h1 id="CustomValueDrawer"><a href="#CustomValueDrawer" class="headerlink" title="CustomValueDrawer"></a><code>CustomValueDrawer</code></h1><p>使用自定义方法来绘制字段的 Inspector</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用特性修饰字段, 并且引用自定义的界面绘制方法</span></span><br><span class="line">[<span class="meta">CustomValueDrawer(nameof(MyCustomDrawer))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> CustomDrawerStatic;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 界面绘制方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">MyCustomDrawer</span>(<span class="params"><span class="built_in">float</span> <span class="keyword">value</span>, GUIContent label</span>)</span> &#123; <span class="keyword">return</span> EditorGUILayout.Slider(label, <span class="keyword">value</span>, <span class="number">0f</span>, <span class="number">10f</span>); &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Delayed-DelayedProperty"><a href="#Delayed-DelayedProperty" class="headerlink" title="Delayed  DelayedProperty"></a><code>Delayed</code>  <code>DelayedProperty</code></h1><p>分别修饰字段和属性, 让用户的修改不再实时生效, 而是当用户按下 Enter 时或者控件丢失焦点时生效</p>
<h1 id="DetailedInfoBox"><a href="#DetailedInfoBox" class="headerlink" title="DetailedInfoBox"></a><code>DetailedInfoBox</code></h1><p>修饰一个字段, 在其上方展示一个消息框</p>
<p>可以使用 <code>InfoMessageType</code> 来控制消息框中显示什么样的图标, None 为不显示图标, 默认为 Info</p>
<p>可以使用 <code>VisibleIf(nameof(function))</code> 来控制消息框的显示与隐藏</p>
<h1 id="ShowInInspector"><a href="#ShowInInspector" class="headerlink" title="ShowInInspector"></a><code>ShowInInspector</code></h1><p>可以修饰字段与属性, 将值显示在面板中</p>
<p>但是此特性仅仅实现了对值的显示, 无法保存修改</p>
<p>对于仅有 get 器的属性, 显示在面板中的时候是灰色的</p>
<h1 id="EnableGUI"><a href="#EnableGUI" class="headerlink" title="EnableGUI"></a><code>EnableGUI</code></h1><p>当仅有 get 器的属性使用 <code>ShowInInspector</code> 修饰后显示在面板中的时候是灰色的, 此时再使用此特性修饰, 显示的属性将不再是灰色的</p>
<h1 id="GUIColor"><a href="#GUIColor" class="headerlink" title="GUIColor"></a><code>GUIColor</code></h1><p>以指定的颜色来绘制 GUI</p>
<p>可以直接串 3 ~ 4 个数字来控制颜色, 也可以传一个返回值为 Color 的方法名称, 使用 nameof 关键字</p>
<h1 id="HideLabel"><a href="#HideLabel" class="headerlink" title="HideLabel"></a><code>HideLabel</code></h1><p>可以隐藏界面上的变量名, 只显示变量值</p>
<h1 id="PropertyOrder-1"><a href="#PropertyOrder-1" class="headerlink" title="[PropertyOrder(-1)]"></a><code>[PropertyOrder(-1)]</code></h1><p>用来控制属性在界面上的显示顺序, 数字小的先显示, 允许负数</p>
<h1 id="PropertySpace-SpaceBefore-30-SpaceAfter-30"><a href="#PropertySpace-SpaceBefore-30-SpaceAfter-30" class="headerlink" title="[PropertySpace(SpaceBefore = 30, SpaceAfter = 30)]"></a><code>[PropertySpace(SpaceBefore = 30, SpaceAfter = 30)]</code></h1><p>控制一个的属性或者字段的上下空白间距</p>
<h1 id="ReadOnly"><a href="#ReadOnly" class="headerlink" title="ReadOnly"></a><code>ReadOnly</code></h1><p>和 <code>EnableGUI</code> 正好相反, 此特性修饰后, 显示将变为灰色, 当仅显示数值而不允许修改的时候使用</p>
<h1 id="Required"><a href="#Required" class="headerlink" title="Required"></a><code>Required</code></h1><p>当修饰的值为 null 的时候会提示错误信息</p>
<p>可以使用 <code>Required(&quot;自定义错误提示信息&quot;)</code> 来自定义提示的信息</p>
<p>另外需要显示动态提示的时候可以使用 <code>Required(&quot;$变量名&quot;)</code> <code>Required(&quot;$方法名&quot;)</code> 来实现, 但是这里不能使用 nameof, 只能使用名称字符串</p>
<h1 id="Searchable"><a href="#Searchable" class="headerlink" title="Searchable"></a><code>Searchable</code></h1><p>通过添加特性为字段其添加一个搜索框, 可用于搜索对应的类或其子类的成员, 但目前不可用于字典类型</p>
<ul>
<li><p>也可以直接修饰 MonoBehavior 类, 此时会在界面顶部显示一个搜索框</p>
</li>
<li><p>还可以通过实现 <code>ISearchFilterable</code> 接口来自定义搜索规则</p>
<p>  <code>Searchable(FilterOptions = SearchFilterOptions.ISearchFilterableInterface)</code></p>
</li>
<li><p><strong>但是目前此属性在搜索数字 0 1 2 的时候会有 Bug, 再加上这个界面上很少使用搜索, 因此默认禁用</strong></p>
</li>
</ul>
<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a><code>Title</code></h1><p>在字段上方显示标题</p>
<p>可以显示主标题 + 副标题, 默认主标题为加粗 + 分割线</p>
<p>可以使用 <code>bold</code> 参数控制是否是粗体</p>
<p>可以使用 <code>horizontalLine</code> 参数控制是否显示分割线</p>
<p>可以使用 <code>TitleAlignments</code> 参数控制主标题和副标题的对齐方式</p>
<h1 id="TypeFilter"><a href="#TypeFilter" class="headerlink" title="TypeFilter"></a><code>TypeFilter</code></h1><p>此特性的应用场景是显示的字段是基类型, 并且它还有好几个子类型, 于是编辑器就不知道该序列化哪个了</p>
<p>所以就有了这个筛选类型的特性, 来决定这个字段按照什么类型来序列化</p>
<p>由于筛选函数是自定义的, 因此也可以指定只能选择特定的类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Type&gt; <span class="title">GetFilteredTypeList</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> types = <span class="keyword">typeof</span>(BaseClass).Assembly.GetTypes()</span><br><span class="line">        <span class="comment">// 非抽象类 (这里 BaseClass 是 abstract 类)</span></span><br><span class="line">        .Where(type =&gt; !type.IsAbstract)</span><br><span class="line">        <span class="comment">// 非泛型类</span></span><br><span class="line">        .Where(type =&gt; !type.IsGenericTypeDefinition)</span><br><span class="line">        <span class="comment">// 是 BaseClass 的派生类</span></span><br><span class="line">        .Where(type =&gt; <span class="keyword">typeof</span>(BaseClass).IsAssignableFrom(type));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照需求添加指定的类型</span></span><br><span class="line">    types = types.AppendWith(<span class="keyword">typeof</span>(C1&lt;&gt;).MakeGenericType(<span class="keyword">typeof</span>(GameObject)));</span><br><span class="line">    types = types.AppendWith(<span class="keyword">typeof</span>(C1&lt;&gt;).MakeGenericType(<span class="keyword">typeof</span>(AnimationCurve)));</span><br><span class="line">    types = types.AppendWith(<span class="keyword">typeof</span>(C1&lt;&gt;).MakeGenericType(<span class="keyword">typeof</span>(List&lt;<span class="built_in">float</span>&gt;)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> types;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TypeInfoBox"><a href="#TypeInfoBox" class="headerlink" title="TypeInfoBox"></a><code>TypeInfoBox</code></h1><p>用来修饰 MonoBehavior 以及 ScriptableObject, 可以在类型的最上方显示一条信息</p>
<h1 id="ValidateInput"><a href="#ValidateInput" class="headerlink" title="ValidateInput"></a><code>ValidateInput</code></h1><p>变量输入值验证</p>
<ul>
<li>传入方法名以及消息内容 <code>[ValidateInput(nameof(IsRight), &quot;输入值不正确!&quot;)]</code></li>
<li>可以通过 <code>InfoMessageType</code> 来控制显示的图标类型</li>
</ul>
<h1 id="ValueDropdown"><a href="#ValueDropdown" class="headerlink" title="ValueDropdown"></a><strong><strong><code>ValueDropdown</code></strong></strong></h1><p>用来实现一个下拉框</p>
<p>下拉框所需要的数据 [ MemberName ] 有两种传参方式</p>
<ul>
<li>传递 <strong>数组 或者 链表</strong> <code>int[]</code> <code>Vector3[]</code> <strong><code>List&lt;GameObject&gt;</code></strong> 数组及链表的内容会同时作为下拉框选项的显示文本和选项的实际值</li>
<li>传递 <strong>下拉列表</strong> <code>ValueDropdownList&lt;T&gt;</code> 这个类型是一个键值对链表, Key 为 string 类型, Value 为自定义泛型 T, 这种情况下, Key 会作为下拉框的显示文本, Value 则会作为选项的实际值, 一般常用 <code>&lt;string, string&gt;</code> 和 <code>&lt;string, int&gt;</code></li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th align="left">参数类型</th>
<th align="center">参数默认值</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SortDropdownItems</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">参数设置为 true 的时候, Key 的显示会按照字母升序来进行排序, false 时不进行排序</td>
</tr>
<tr>
<td align="left">DropdownTitle</td>
<td align="left">string</td>
<td align="center">null</td>
<td align="left">给下拉框设置一个标题</td>
</tr>
<tr>
<td align="left">DropdownHeight</td>
<td align="left">int</td>
<td align="center">自适应</td>
<td align="left">固定下拉框的高度</td>
</tr>
<tr>
<td align="left">DropdownWidth</td>
<td align="left">int</td>
<td align="center">自适应</td>
<td align="left">固定下拉框的宽度</td>
</tr>
<tr>
<td align="left">FlattenTreeView</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">是否平铺树形视图, 默认为 false 使用树形视图, 如果设置为 true, 则会使用平铺视图;</br>树形数据使用 &#x2F; 来分割层级</td>
</tr>
<tr>
<td align="left">DoubleClickToConfirm</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">true: 双击选中选项</br>一般当数据源为树形结构时使用</td>
</tr>
<tr>
<td align="left">HideChildProperties</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">true: 会隐藏掉属性自身的面板绘制</br>比如 Vector3 类型就没有的自身的 x y z 三个输入框绘制, 只保留一个 (x, y, z) 的下拉框</td>
</tr>
<tr>
<td align="left">AppendNextDrawer</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">true: 使用一个子菜单 ︙ 来代替下拉框</br>此时字段显示的数值为下拉框的值, 而不是显示文本</td>
</tr>
<tr>
<td align="left">DisableGUIInAppendedDrawer</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">配合 AppendNextDrawer 使用</br>AppendNextDrawer 会导致字段显示的是下拉框的值, 而不是显示文本, 所以可以对值进行修改</br>DisableGUIInAppendedDrawer 设置为 true 时, 字段显示的值将会是灰色的, 无法修改</td>
</tr>
<tr>
<td align="left">ExpandAllMenuItems</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">设置为 true 之后, 则会默认展开整个树形结构, 否则默认折叠整个树形结构</td>
</tr>
<tr>
<td align="left">IsUniqueList</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">是否是多选列表</br>设置为 true 时将可以选择多个选项添加到列表, 选择完成后点击 √</td>
</tr>
<tr>
<td align="left">ExcludeExistingValuesInList</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">是否排除已存在的值, false 表示可以重复添加, true 则不允许添加重复值</td>
</tr>
<tr>
<td align="left">DisableListAddButtonBehaviour</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">禁用下拉列表, 以弹窗的形式弹出</td>
</tr>
<tr>
<td align="left">DrawDropdownForListElements</td>
<td align="left">bool</td>
<td align="center">false</td>
<td align="left">是否为列表元素绘制下拉框, 默认绘制</td>
</tr>
<tr>
<td align="left">NumberOfItemsBeforeEnablingSearch</td>
<td align="left">int</td>
<td align="center">10</td>
<td align="left">当下拉框的选项个数超出指定个数后, 绘制搜索框</td>
</tr>
</tbody></table>
<h1 id="AssetList"><a href="#AssetList" class="headerlink" title="AssetList"></a><code>AssetList</code></h1><p>用于生成一个资源列表, 这个列表用来给修饰的字段赋值, 资源列表的资源来源是 Project 面板中的资源, 并不是 Hierarchy 中的游戏物体</p>
<p>因此这里的字段大多是 Texture, Sprite 等资源类型, 即使是 GameObject 指代的也是预制体而不是场景物体</p>
<p>可以修饰 UnityEngine.Object 类型的 单个字段 或者 数组字段 或者 列表字段</p>
<p>参数1: Path 用于指定资源列表的来源, 不传 Path 则默认为 Assets 目录下的全部资源</p>
<p>参数2: AutoPopulate 是否自动将符合条件的资源添加到修饰的字段中</p>
<p>参数3: CustomFilterMethod 自定义筛选方法, 方法的参数为字段的元素类型</p>
<p>比如字段为 GameObject, 那么筛选方法的参数就是 GameObject 类型 <code>private bool Filter(GameObject obj)</code></p>
<p>比如字段为 List<Sprite>, 那么筛选方法的参数就是 Sprite 类型 <code>private bool Filter(Sprite sprite)</code></p>
<p>参数4: LayerNames 根据 Layer 来筛选预制体资源, 由于只有预制体有标签, 所以只能修饰 GameObject 类型</p>
<p>参数5: Tags 根据 Tag 来筛选预制体资源, 可以使用 <code>,</code> 分割多个标签 <code>Tags = &quot;TagA,TagB&quot;</code></p>
<p>参数6: AssetNamePrefix 根据名称的前缀来筛选资源</p>
<h1 id="AssetSelector"><a href="#AssetSelector" class="headerlink" title="AssetSelector"></a><code>AssetSelector</code></h1><p>修饰单个字段, 会在字段前显示一个 ︙ 符号, 产生一个资源选择框</p>
<p>修饰列表字段, 会在最右侧产生一个 + 号, 用于选择资源</p>
<p>FlattenTreeView 参数: 控制是否将树形结构平铺, 默认为 false 不平铺</p>
<p>Paths 参数: 限定资源选择的路径, 默认为 Assets 目录下的全部资源</p>
<p>Filter 参数: 筛选器, 字符串类型参数, 字符串规则就是 Unity 的搜索规则 <code>name t:Model l:Water</code></p>
<p>DropdownTitle 参数: 定义选择框标题</p>
<p>ExpandAllMenuItems 参数: 是否强制展开树形结构</p>
<p>IsUniqueList 参数: 是否可以一次添加多个 false: 一次只能添加一个资源到列表</p>
<p>ExcludeExistingValuesInList 参数: 是否排除已存在列表中的资源 (即使显示已存在的资源, 也不允许选择同一个资源两次)</p>
<p>DrawDropdownForListElements: 是否给列表中的元素绘制下拉框</p>
<p>DisableListAddButtonBehaviour: 以弹窗的方式取代下拉框</p>
<h1 id="ChildGameObjectsOnly"><a href="#ChildGameObjectsOnly" class="headerlink" title="ChildGameObjectsOnly"></a><code>ChildGameObjectsOnly</code></h1><p>用于限制字段的值只能是子物体或自身上的组件</p>
<h1 id="ColorPalette"><a href="#ColorPalette" class="headerlink" title="ColorPalette"></a><code>ColorPalette</code></h1><p>修饰一个 Color 字段以及数组列表, 会产生一个调色板选择器, 可以选择不用的调色板, 之后再选择调色板上具有的颜色给 Color 字段赋值</p>
<ul>
<li><p>PaletteName: 指定调色板名称</p>
<p>  指定名称时, 除了直接写明调色板的名称, 也可以引用变量值</p>
<p>  <code>[ColorPalette(&quot;$字符串变量名&quot;)]</code></p>
<p>  还可以使用运算表达式, 比如下方将会引用 &quot;调色板_1&quot;, &quot;调色板_2&quot;, &quot;调色板_3&quot; 之类的</p>
<p>  [ColorPalette(&quot;@&quot;调色板_&quot; + 数字变量&quot;)]</p>
</li>
<li><p>ShowAlpha: 颜色值显示时是否在下方显示 Alpha 通道状态</p>
</li>
</ul>
<h1 id="DisplayAsString"><a href="#DisplayAsString" class="headerlink" title="DisplayAsString"></a><code>DisplayAsString</code></h1><p>用于任何属性, 对应的值在检查器中以文本形式显示字符串.</p>
<p>如果属性的值要在检查器中显示字符串, 但不允许进行任何编辑, 则推荐使用此特性</p>
<h1 id="HideLabel-1"><a href="#HideLabel-1" class="headerlink" title="HideLabel"></a><code>HideLabel</code></h1><p>用于任何属性, 隐藏其属性名称, 仅显示属性的值</p>
<h1 id="FilePath-FolderPath"><a href="#FilePath-FolderPath" class="headerlink" title="FilePath FolderPath"></a><code>FilePath</code> <code>FolderPath</code></h1><p>用于字符串属性以及字符串的数组和列表, 会显示一个文件夹图标, 用于选择文件给字符串赋值为选择文件的相对路径</p>
<p>ParentFolder: 自定义相对文件夹, 默认为相对 Assets 文件夹</p>
<p>[仅 <code>FilePath</code>]  Extensions &#x3D; &quot;cs, lua&quot;: 限定文件的后缀</p>
<p>AbsolutePath: 赋值的时候为绝对路径, 默认是 false, 此时使用的是相对路径</p>
<p>RequireExistingPath: 要求路径必须存在, 不存在时显示错误信息</p>
<p>UseBackslashes: 默认为 false, 此时使用 &#x2F; 分割目录, 设置为 true, 则使用 \ 分割目录</p>
<h1 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a><code>Toggle</code></h1><p>修饰含有 bool 类型变量的结构体或者类</p>
<p>需要一个必填参数: 类或者结构体中 bool 类型的变量的名称</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Toggle(nameof(MyToggleable.enabled))</span>]</span><br><span class="line"><span class="keyword">public</span> MyToggleable toggler = <span class="keyword">new</span> MyToggleable();</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyToggleable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> enabled;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> myValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Odin</tag>
      </tags>
  </entry>
</search>
